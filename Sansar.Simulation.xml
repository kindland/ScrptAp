<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Sansar.Simulation</name>
    </assembly>
    <members>
        <member name="T:Sansar.Simulation.AnimationComponent">
            <summary>The AnimationComponent handles interactions with animations.</summary><sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsAnimationComponent.h(31)</sourceLocation>
            <remarks>Animated objects should be manipulated through this interface.</remarks>
        </member>
        <member name="T:Sansar.Simulation.AnimationComponent.SubscriptionHandler">
            <summary>Animation events.</summary><sourceLocation>C:\linden\p\Sansar\SharedBranches\ServerScript\Code\App\Libraries\SimulationScriptApi/AnimationComponent.h(70)</sourceLocation>
            <remarks>See <see cref="T:Sansar.Simulation.AnimationComponent"/>.</remarks>
            <param name='BehaviorName'> The behavior name of the Animation. This name will match the subscribed event.</param>
            <param name='ComponentId'> The id of the animation component.</param>
        </member>
        <member name="M:Sansar.Simulation.AnimationComponent.Subscribe(System.String,Sansar.Simulation.AnimationComponent.SubscriptionHandler,System.Boolean)">
            <summary>Subscribes to Animation Events.</summary><sourceLocation>DistributeEvent::writeSubscribe line 198</sourceLocation><remarks/>
            <param name='BehaviorName'> The behavior name of the Animation. This name will match the subscribed event.</param>
            <param name='callback'>Callback which is executed when the event completes.</param>
            <param name='persistent'>Optional, set to false to unsubscribe after one event.</param>
        </member>
        <member name="F:Sansar.Simulation.AnimationComponent.ComponentType">
            <summary>The <see cref='F:Sansar.Simulation.AnimationComponent.ComponentType' /> of this component</summary>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsAnimationComponent.h(37)</sourceLocation>
            <remarks></remarks>
        </member>
        <member name="P:Sansar.Simulation.AnimationComponent.ComponentId">
            <summary>Retrieves the component id for this AnimationComponent.</summary><returns>The id.</returns><sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsAnimationComponent.h(65)</sourceLocation>
            <remarks>This id will be unique among all components.</remarks>
        </member>
        <member name="P:Sansar.Simulation.AnimationComponent.DefaultAnimation">
            <summary>
            Gets the default scriptable animation.
            </summary>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsAnimationComponent.h(51)</sourceLocation>
            <returns>An Animation object. </returns>
        </member>
        <member name="P:Sansar.Simulation.AnimationComponent.Name">
            <summary>This AnimationComponent name, as specified in the editor.</summary><sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsAnimationComponent.h(70)</sourceLocation>
            <remarks></remarks>
            <value></value>
        </member>
        <member name="M:Sansar.Simulation.AnimationComponent.Subscribe(System.String,System.Action{Sansar.Simulation.AnimationData},System.Boolean)">
            <summary>Subscribes to Animation Events.</summary><sourceLocation>DistributeEvent::writeSubscribe line 180</sourceLocation><remarks /><returns>An <see cref='T:Sansar.Script.IEventSubscription' /> that can be used to cancel the subscription.</returns><seealso cref='T:Sansar.Simulation.AnimationData'/><seealso cref='T:Sansar.Script.IEventSubscription'/>
            <param name='BehaviorName'> The behavior name of the Animation. This name will match the subscribed event.</param>
            <param name='callback'>Callback which is executed when the event completes.</param>
            <param name='persistent'>Optional, set to false to unsubscribe after one event.</param>
        </member>
        <member name="M:Sansar.Simulation.AnimationComponent.GetAnimations">
            <summary>
            Gets the scriptable animations for this object.
            </summary>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsAnimationComponent.h(52)</sourceLocation>
            <returns>An IEnumarable collection of animation objects. </returns>
        </member>
        <member name="M:Sansar.Simulation.AnimationComponent.GetAnimation(System.String)">
            <summary>
            Finds a scriptable animations by name.
            </summary>
            
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsAnimationComponent.h(53)</sourceLocation>
            <returns>An Animation, or null if no animation was found with the correct name. </returns>
            <param name='animationName'>The name of the animation.</param>
        </member>
        <member name="M:Sansar.Simulation.AnimationComponent.SetPosition(Sansar.Vector,System.Action{Sansar.Script.OperationCompleteEvent})">
            <summary>
            Asynchronously set the position for this object.
            </summary>
            
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsAnimationComponent.h(55)</sourceLocation>
            <value>Returns an internal event id.</value>
            <remarks>To block until the method returns pass this to <see cref='M:Sansar.Script.ScriptBase.WaitFor(System.Func{System.Action{Sansar.Script.EventData},System.Boolean,Sansar.Script.IEventSubscription})' /> in a coroutine.</remarks>
            <param name='position'>The Mono.Simd.Vector4f position desired.</param>
            <param name='handler'>Handler to be called when the event completes.</param>
        </member>
        <member name="M:Sansar.Simulation.AnimationComponent.SetPosition(Sansar.Vector)">
            <summary>
            Asynchronously set the position for this object.
            </summary>
            
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsAnimationComponent.h(55)</sourceLocation>
            <value>Returns an internal event id.</value>
            <remarks>To block until the method returns pass this to <see cref='M:Sansar.Script.ScriptBase.WaitFor(System.Func{System.Action{Sansar.Script.EventData},System.Boolean,Sansar.Script.IEventSubscription})' /> in a coroutine.</remarks>
            <param name='position'>The Mono.Simd.Vector4f position desired.</param>
        </member>
        <member name="M:Sansar.Simulation.AnimationComponent.HasEvent(System.String)">
            <summary>
            Check this component for the existence of the named event.
            </summary>
            
            <returns>true if the event exits.</returns>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsAnimationComponent.h(57)</sourceLocation>
            <remarks>Can be used to check if an event exists.</remarks>
            <param name='eventName'>The name of the event to query.</param>
        </member>
        <member name="M:Sansar.Simulation.AnimationComponent.GetEventId(System.String)">
            <summary>
            Lookup the event id for the named event.
            </summary>
            
            <returns>The id of the named event or -1 if the name is not valid.</returns>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsAnimationComponent.h(58)</sourceLocation>
            <remarks>This can be used to trigger animations with <see cref='M:Sansar.Simulation.AnimationComponent.EnqueueEvent(System.Int32)' />.</remarks>
            <param name='eventName'>The name of the event to query.</param>
        </member>
        <member name="M:Sansar.Simulation.AnimationComponent.EnqueueEvent(System.Int32,System.Action{Sansar.Script.OperationCompleteEvent})">
            <summary>
            Enqueues an event for this component.
            </summary>
            
            <returns>The internal event id for the completion event.</returns>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsAnimationComponent.h(59)</sourceLocation>
            <remarks>Ids can be retrieved with <see cref='M:Sansar.Simulation.AnimationComponent.GetEventId(System.String)'/>.</remarks>
            <param name='internalId'>The id of the animation event, may be looked up by name from <see cref='M:Sansar.Simulation.AnimationComponent.GetEventId(System.String)'/></param>
            <param name='handler'>Handler to be called when the event completes.</param>
        </member>
        <member name="M:Sansar.Simulation.AnimationComponent.EnqueueEvent(System.Int32)">
            <summary>
            Enqueues an event for this component.
            </summary>
            
            <returns>The internal event id for the completion event.</returns>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsAnimationComponent.h(59)</sourceLocation>
            <remarks>Ids can be retrieved with <see cref='M:Sansar.Simulation.AnimationComponent.GetEventId(System.String)'/>.</remarks>
            <param name='internalId'>The id of the animation event, may be looked up by name from <see cref='M:Sansar.Simulation.AnimationComponent.GetEventId(System.String)'/></param>
        </member>
        <member name="M:Sansar.Simulation.AnimationComponent.GetVectorAnimationVariable(System.String)">
            <summary>Get a Vector type variable from the animation by name</summary>
            
            <returns>A Mono.Simd.Vector4f of the value of the named variable</returns>
            <exception cref='T:System.ArgumentException'>Thrown when attempting to get a variable that doesn't exist or is of the wrong type</exception>
            <exception cref='T:System.ArgumentNullException'>If variableName is null</exception>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsAnimationComponent.h(61)</sourceLocation>
            <remarks>Characters have an 'LLCameraForward' variable which can be queried with GetVectorAnimationVariable to determine the forward vector of the camera.</remarks>
            <param name='variableName'>The name of the animation variable</param>
        </member>
        <member name="M:Sansar.Simulation.AnimationComponent.ToString">
            <summary> A string representation of this object. </summary> <returns>A string representation of this object.</returns> <remarks>The format of this string may change between releases.</remarks>
        </member>
        <member name="M:Sansar.Simulation.AnimationComponent.SetPosition(Sansar.Vector,Sansar.Script.ScriptBase.OperationComplete)">
             <summary>
             Asynchronously set the position for this object.
             </summary>
            
             <sourceLocation>C:\p\Sansar\SharedBranches\ServerScript\Code\App\Libraries\SimulationScriptApi/CsAnimationComponent.h(53)</sourceLocation>
             <value>Returns an internal event id.</value>
             <remarks>To block until the method returns pass this to <see cref='M:Sansar.Script.ScriptBase.WaitFor(System.Func{System.Action{Sansar.Script.EventData},System.Boolean,Sansar.Script.IEventSubscription})' /> in a coroutine.</remarks>
             <param name='position'>The Mono.Simd.Vector4f position desired.</param>
             <param name='handler'>Handler to be called when the event completes.</param>
        </member>
        <member name="M:Sansar.Simulation.AnimationComponent.EnqueueEvent(System.Int32,Sansar.Script.ScriptBase.OperationComplete)">
             <summary>
             Enqueues an event for this component.
             </summary>
            
             <returns>The internal event id for the completion event.</returns>
             <sourceLocation>C:\p\Sansar\SharedBranches\ServerScript\Code\App\Libraries\SimulationScriptApi/CsAnimationComponent.h(57)</sourceLocation>
             <remarks>Ids can be retrieved with <see cref='M:Sansar.Simulation.AnimationComponent.GetEventId(System.String)'/>.</remarks>
             <param name='internalId'>The id of the animation event, may be looked up by name from <see cref='M:Sansar.Simulation.AnimationComponent.GetEventId(System.String)'/></param>
             <param name='handler'>Handler to be called when the event completes.</param>
        </member>
        <member name="T:Sansar.Simulation.Chat">
            <summary>The Chat class handles chat subscriptions and sending messages to users and other scripts.</summary>
            <remarks></remarks><sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsChat.h(28)</sourceLocation>
        </member>
        <member name="F:Sansar.Simulation.Chat.AllChannels">
            <summary>Use as the channel argument for <see cref='M:Sansar.Simulation.Chat.Subscribe(System.Int32,System.String,System.Action{Sansar.Simulation.ChatData},System.Boolean)'/> to subscribe to all channels.</summary>
            <sourceLocation>C:\p\Sansar\SharedBranches\ServerScript\Code\App\Libraries\SimulationScriptApi/Chat.h(45)</sourceLocation>
            <remarks>No longer in use, now the same behavior as DefaultChannel</remarks>
        </member>
        <member name="T:Sansar.Simulation.Chat.SubscriptionHandler">
            <summary>Subscribe to receive events on chat messages from the system, users or scripts.</summary><sourceLocation>C:\linden\p\Sansar\SharedBranches\ServerScript\Code\App\Libraries\SimulationScriptApi/Chat.h(62)</sourceLocation><remarks/>
            <param name='Channel'> int channel which the chat occurs on.</param>
            <param name='Source'> string source of the chat: system, user or script.</param>
            <param name='SourceId'> Sansar.Script.SessionId id of the chat source. May be <see cref='F:Sansar.Script.SessionId.Invalid'/> if the source is not an agent.</param>
            <param name='SourceScriptId'> Sansar.Script.ScriptId id of the chat source. May be <see cref='F:Sansar.Script.ScriptId.Invalid'/> if the source is not a script.</param>
            <param name='Message'> string message of the chat event.</param>
        </member>
        <member name="M:Sansar.Simulation.Chat.Subscribe(System.Int32,System.String,Sansar.Script.SessionId,Sansar.Script.ScriptId,Sansar.Simulation.Chat.SubscriptionHandler,System.Boolean)">
            <summary>Subscribes to Chat Events.</summary><sourceLocation>DistributeEvent::writeSubscribe line 198</sourceLocation><remarks/>
            <param name='Channel'> int channel which the chat occurs on.</param>
            <param name='Source'> string source of the chat: system, user or script.</param>
            <param name='SourceId'> Sansar.Script.SessionId id of the chat source. May be <see cref='F:Sansar.Script.SessionId.Invalid'/> if the source is not an agent.</param>
            <param name='SourceScriptId'> Sansar.Script.ScriptId id of the chat source. May be <see cref='F:Sansar.Script.ScriptId.Invalid'/> if the source is not a script.</param>
            <param name='callback'>Callback which is executed when the event completes.</param>
            <param name='persistent'>Optional, set to false to unsubscribe after one event.</param>
        </member>
        <member name="M:Sansar.Simulation.Chat.Subscribe(System.Int32,System.String,Sansar.Script.SessionId,Sansar.Simulation.Chat.SubscriptionHandler,System.Boolean)">
            <summary>Subscribes to Chat Events.</summary><sourceLocation>DistributeEvent::writeSubscribe line 198</sourceLocation><remarks/>
            <param name='Channel'> int channel which the chat occurs on.</param>
            <param name='Source'> string source of the chat: system, user or script.</param>
            <param name='SourceId'> Sansar.Script.SessionId id of the chat source. May be <see cref='F:Sansar.Script.SessionId.Invalid'/> if the source is not an agent.</param>
            <param name='callback'>Callback which is executed when the event completes.</param>
            <param name='persistent'>Optional, set to false to unsubscribe after one event.</param>
        </member>
        <member name="M:Sansar.Simulation.Chat.Subscribe(System.Int32,System.String,Sansar.Script.ScriptId,Sansar.Simulation.Chat.SubscriptionHandler,System.Boolean)">
            <summary>Subscribes to Chat Events.</summary><sourceLocation>DistributeEvent::writeSubscribe line 198</sourceLocation><remarks/>
            <param name='Channel'> int channel which the chat occurs on.</param>
            <param name='Source'> string source of the chat: system, user or script.</param>
            <param name='SourceScriptId'> Sansar.Script.ScriptId id of the chat source. May be <see cref='F:Sansar.Script.ScriptId.Invalid'/> if the source is not a script.</param>
            <param name='callback'>Callback which is executed when the event completes.</param>
            <param name='persistent'>Optional, set to false to unsubscribe after one event.</param>
        </member>
        <member name="M:Sansar.Simulation.Chat.Subscribe(System.Int32,System.String,Sansar.Simulation.Chat.SubscriptionHandler,System.Boolean)">
            <summary>Subscribes to Chat Events.</summary><sourceLocation>DistributeEvent::writeSubscribe line 198</sourceLocation><remarks/>
            <param name='Channel'> int channel which the chat occurs on.</param>
            <param name='Source'> string source of the chat: system, user or script.</param>
            <param name='callback'>Callback which is executed when the event completes.</param>
            <param name='persistent'>Optional, set to false to unsubscribe after one event.</param>
        </member>
        <member name="F:Sansar.Simulation.Chat.User">
            <summary>Indicates that the chat message originated from a user.</summary>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsChat.h(35)</sourceLocation>
            <remarks></remarks>
        </member>
        <member name="F:Sansar.Simulation.Chat.Script">
            <summary>Indicates that the chat message originated from a script.</summary>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsChat.h(40)</sourceLocation>
            <remarks></remarks>
        </member>
        <member name="F:Sansar.Simulation.Chat.Server">
            <summary>Indicates that the chat message originated from the server.</summary>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsChat.h(45)</sourceLocation>
            <remarks></remarks>
        </member>
        <member name="F:Sansar.Simulation.Chat.DefaultChannel">
            <summary>Use as the channel argument for <see cref='M:Sansar.Simulation.Chat.Subscribe(System.Int32,System.String,System.Action{Sansar.Simulation.ChatData},System.Boolean)'/> to subscribe to the default channel</summary>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsChat.h(50)</sourceLocation>
            <remarks></remarks>
        </member>
        <member name="M:Sansar.Simulation.Chat.Subscribe(System.Int32,System.String,Sansar.Script.SessionId,Sansar.Script.ScriptId,System.Action{Sansar.Simulation.ChatData},System.Boolean)">
            <summary>Subscribes to Chat Events.</summary><sourceLocation>DistributeEvent::writeSubscribe line 180</sourceLocation><remarks /><returns>An <see cref='T:Sansar.Script.IEventSubscription' /> that can be used to cancel the subscription.</returns><seealso cref='T:Sansar.Simulation.ChatData'/><seealso cref='T:Sansar.Script.IEventSubscription'/>
            <param name='Channel'> int channel which the chat occurs on.</param>
            <param name='Source'> string source of the chat: system, user or script.</param>
            <param name='SourceId'> Sansar.Script.SessionId id of the chat source. May be <see cref='F:Sansar.Script.SessionId.Invalid'/> if the source is not an agent.</param>
            <param name='SourceScriptId'> Sansar.Script.ScriptId id of the chat source. May be <see cref='F:Sansar.Script.ScriptId.Invalid'/> if the source is not a script.</param>
            <param name='callback'>Callback which is executed when the event completes.</param>
            <param name='persistent'>Optional, set to false to unsubscribe after one event.</param>
        </member>
        <member name="M:Sansar.Simulation.Chat.Subscribe(System.String,Sansar.Script.SessionId,Sansar.Script.ScriptId,System.Action{Sansar.Simulation.ChatData},System.Boolean)">
            <summary>Subscribes to Chat Events.</summary><sourceLocation>DistributeEvent::writeSubscribe line 180</sourceLocation><remarks /><returns>An <see cref='T:Sansar.Script.IEventSubscription' /> that can be used to cancel the subscription.</returns><seealso cref='T:Sansar.Simulation.ChatData'/><seealso cref='T:Sansar.Script.IEventSubscription'/>
            <param name='Source'> string source of the chat: system, user or script.</param>
            <param name='SourceId'> Sansar.Script.SessionId id of the chat source. May be <see cref='F:Sansar.Script.SessionId.Invalid'/> if the source is not an agent.</param>
            <param name='SourceScriptId'> Sansar.Script.ScriptId id of the chat source. May be <see cref='F:Sansar.Script.ScriptId.Invalid'/> if the source is not a script.</param>
            <param name='callback'>Callback which is executed when the event completes.</param>
            <param name='persistent'>Optional, set to false to unsubscribe after one event.</param>
        </member>
        <member name="M:Sansar.Simulation.Chat.Subscribe(Sansar.Script.SessionId,Sansar.Script.ScriptId,System.Action{Sansar.Simulation.ChatData},System.Boolean)">
            <summary>Subscribes to Chat Events.</summary><sourceLocation>DistributeEvent::writeSubscribe line 180</sourceLocation><remarks /><returns>An <see cref='T:Sansar.Script.IEventSubscription' /> that can be used to cancel the subscription.</returns><seealso cref='T:Sansar.Simulation.ChatData'/><seealso cref='T:Sansar.Script.IEventSubscription'/>
            <param name='SourceId'> Sansar.Script.SessionId id of the chat source. May be <see cref='F:Sansar.Script.SessionId.Invalid'/> if the source is not an agent.</param>
            <param name='SourceScriptId'> Sansar.Script.ScriptId id of the chat source. May be <see cref='F:Sansar.Script.ScriptId.Invalid'/> if the source is not a script.</param>
            <param name='callback'>Callback which is executed when the event completes.</param>
            <param name='persistent'>Optional, set to false to unsubscribe after one event.</param>
        </member>
        <member name="M:Sansar.Simulation.Chat.Subscribe(Sansar.Script.ScriptId,System.Action{Sansar.Simulation.ChatData},System.Boolean)">
            <summary>Subscribes to Chat Events.</summary><sourceLocation>DistributeEvent::writeSubscribe line 180</sourceLocation><remarks /><returns>An <see cref='T:Sansar.Script.IEventSubscription' /> that can be used to cancel the subscription.</returns><seealso cref='T:Sansar.Simulation.ChatData'/><seealso cref='T:Sansar.Script.IEventSubscription'/>
            <param name='SourceScriptId'> Sansar.Script.ScriptId id of the chat source. May be <see cref='F:Sansar.Script.ScriptId.Invalid'/> if the source is not a script.</param>
            <param name='callback'>Callback which is executed when the event completes.</param>
            <param name='persistent'>Optional, set to false to unsubscribe after one event.</param>
        </member>
        <member name="M:Sansar.Simulation.Chat.Subscribe(Sansar.Script.SessionId,System.Action{Sansar.Simulation.ChatData},System.Boolean)">
            <summary>Subscribes to Chat Events.</summary><sourceLocation>DistributeEvent::writeSubscribe line 180</sourceLocation><remarks /><returns>An <see cref='T:Sansar.Script.IEventSubscription' /> that can be used to cancel the subscription.</returns><seealso cref='T:Sansar.Simulation.ChatData'/><seealso cref='T:Sansar.Script.IEventSubscription'/>
            <param name='SourceId'> Sansar.Script.SessionId id of the chat source. May be <see cref='F:Sansar.Script.SessionId.Invalid'/> if the source is not an agent.</param>
            <param name='callback'>Callback which is executed when the event completes.</param>
            <param name='persistent'>Optional, set to false to unsubscribe after one event.</param>
        </member>
        <member name="M:Sansar.Simulation.Chat.Subscribe(System.String,Sansar.Script.ScriptId,System.Action{Sansar.Simulation.ChatData},System.Boolean)">
            <summary>Subscribes to Chat Events.</summary><sourceLocation>DistributeEvent::writeSubscribe line 180</sourceLocation><remarks /><returns>An <see cref='T:Sansar.Script.IEventSubscription' /> that can be used to cancel the subscription.</returns><seealso cref='T:Sansar.Simulation.ChatData'/><seealso cref='T:Sansar.Script.IEventSubscription'/>
            <param name='Source'> string source of the chat: system, user or script.</param>
            <param name='SourceScriptId'> Sansar.Script.ScriptId id of the chat source. May be <see cref='F:Sansar.Script.ScriptId.Invalid'/> if the source is not a script.</param>
            <param name='callback'>Callback which is executed when the event completes.</param>
            <param name='persistent'>Optional, set to false to unsubscribe after one event.</param>
        </member>
        <member name="M:Sansar.Simulation.Chat.Subscribe(System.String,System.Action{Sansar.Simulation.ChatData},System.Boolean)">
            <summary>Subscribes to Chat Events.</summary><sourceLocation>DistributeEvent::writeSubscribe line 180</sourceLocation><remarks /><returns>An <see cref='T:Sansar.Script.IEventSubscription' /> that can be used to cancel the subscription.</returns><seealso cref='T:Sansar.Simulation.ChatData'/><seealso cref='T:Sansar.Script.IEventSubscription'/>
            <param name='Source'> string source of the chat: system, user or script.</param>
            <param name='callback'>Callback which is executed when the event completes.</param>
            <param name='persistent'>Optional, set to false to unsubscribe after one event.</param>
        </member>
        <member name="M:Sansar.Simulation.Chat.Subscribe(System.String,Sansar.Script.SessionId,System.Action{Sansar.Simulation.ChatData},System.Boolean)">
            <summary>Subscribes to Chat Events.</summary><sourceLocation>DistributeEvent::writeSubscribe line 180</sourceLocation><remarks /><returns>An <see cref='T:Sansar.Script.IEventSubscription' /> that can be used to cancel the subscription.</returns><seealso cref='T:Sansar.Simulation.ChatData'/><seealso cref='T:Sansar.Script.IEventSubscription'/>
            <param name='Source'> string source of the chat: system, user or script.</param>
            <param name='SourceId'> Sansar.Script.SessionId id of the chat source. May be <see cref='F:Sansar.Script.SessionId.Invalid'/> if the source is not an agent.</param>
            <param name='callback'>Callback which is executed when the event completes.</param>
            <param name='persistent'>Optional, set to false to unsubscribe after one event.</param>
        </member>
        <member name="M:Sansar.Simulation.Chat.Subscribe(System.Int32,Sansar.Script.SessionId,Sansar.Script.ScriptId,System.Action{Sansar.Simulation.ChatData},System.Boolean)">
            <summary>Subscribes to Chat Events.</summary><sourceLocation>DistributeEvent::writeSubscribe line 180</sourceLocation><remarks /><returns>An <see cref='T:Sansar.Script.IEventSubscription' /> that can be used to cancel the subscription.</returns><seealso cref='T:Sansar.Simulation.ChatData'/><seealso cref='T:Sansar.Script.IEventSubscription'/>
            <param name='Channel'> int channel which the chat occurs on.</param>
            <param name='SourceId'> Sansar.Script.SessionId id of the chat source. May be <see cref='F:Sansar.Script.SessionId.Invalid'/> if the source is not an agent.</param>
            <param name='SourceScriptId'> Sansar.Script.ScriptId id of the chat source. May be <see cref='F:Sansar.Script.ScriptId.Invalid'/> if the source is not a script.</param>
            <param name='callback'>Callback which is executed when the event completes.</param>
            <param name='persistent'>Optional, set to false to unsubscribe after one event.</param>
        </member>
        <member name="M:Sansar.Simulation.Chat.Subscribe(System.Int32,Sansar.Script.ScriptId,System.Action{Sansar.Simulation.ChatData},System.Boolean)">
            <summary>Subscribes to Chat Events.</summary><sourceLocation>DistributeEvent::writeSubscribe line 180</sourceLocation><remarks /><returns>An <see cref='T:Sansar.Script.IEventSubscription' /> that can be used to cancel the subscription.</returns><seealso cref='T:Sansar.Simulation.ChatData'/><seealso cref='T:Sansar.Script.IEventSubscription'/>
            <param name='Channel'> int channel which the chat occurs on.</param>
            <param name='SourceScriptId'> Sansar.Script.ScriptId id of the chat source. May be <see cref='F:Sansar.Script.ScriptId.Invalid'/> if the source is not a script.</param>
            <param name='callback'>Callback which is executed when the event completes.</param>
            <param name='persistent'>Optional, set to false to unsubscribe after one event.</param>
        </member>
        <member name="M:Sansar.Simulation.Chat.Subscribe(System.Int32,System.Action{Sansar.Simulation.ChatData},System.Boolean)">
            <summary>Subscribes to Chat Events.</summary><sourceLocation>DistributeEvent::writeSubscribe line 180</sourceLocation><remarks /><returns>An <see cref='T:Sansar.Script.IEventSubscription' /> that can be used to cancel the subscription.</returns><seealso cref='T:Sansar.Simulation.ChatData'/><seealso cref='T:Sansar.Script.IEventSubscription'/>
            <param name='Channel'> int channel which the chat occurs on.</param>
            <param name='callback'>Callback which is executed when the event completes.</param>
            <param name='persistent'>Optional, set to false to unsubscribe after one event.</param>
        </member>
        <member name="M:Sansar.Simulation.Chat.Subscribe(System.Int32,Sansar.Script.SessionId,System.Action{Sansar.Simulation.ChatData},System.Boolean)">
            <summary>Subscribes to Chat Events.</summary><sourceLocation>DistributeEvent::writeSubscribe line 180</sourceLocation><remarks /><returns>An <see cref='T:Sansar.Script.IEventSubscription' /> that can be used to cancel the subscription.</returns><seealso cref='T:Sansar.Simulation.ChatData'/><seealso cref='T:Sansar.Script.IEventSubscription'/>
            <param name='Channel'> int channel which the chat occurs on.</param>
            <param name='SourceId'> Sansar.Script.SessionId id of the chat source. May be <see cref='F:Sansar.Script.SessionId.Invalid'/> if the source is not an agent.</param>
            <param name='callback'>Callback which is executed when the event completes.</param>
            <param name='persistent'>Optional, set to false to unsubscribe after one event.</param>
        </member>
        <member name="M:Sansar.Simulation.Chat.Subscribe(System.Int32,System.String,Sansar.Script.ScriptId,System.Action{Sansar.Simulation.ChatData},System.Boolean)">
            <summary>Subscribes to Chat Events.</summary><sourceLocation>DistributeEvent::writeSubscribe line 180</sourceLocation><remarks /><returns>An <see cref='T:Sansar.Script.IEventSubscription' /> that can be used to cancel the subscription.</returns><seealso cref='T:Sansar.Simulation.ChatData'/><seealso cref='T:Sansar.Script.IEventSubscription'/>
            <param name='Channel'> int channel which the chat occurs on.</param>
            <param name='Source'> string source of the chat: system, user or script.</param>
            <param name='SourceScriptId'> Sansar.Script.ScriptId id of the chat source. May be <see cref='F:Sansar.Script.ScriptId.Invalid'/> if the source is not a script.</param>
            <param name='callback'>Callback which is executed when the event completes.</param>
            <param name='persistent'>Optional, set to false to unsubscribe after one event.</param>
        </member>
        <member name="M:Sansar.Simulation.Chat.Subscribe(System.Int32,System.String,System.Action{Sansar.Simulation.ChatData},System.Boolean)">
            <summary>Subscribes to Chat Events.</summary><sourceLocation>DistributeEvent::writeSubscribe line 180</sourceLocation><remarks /><returns>An <see cref='T:Sansar.Script.IEventSubscription' /> that can be used to cancel the subscription.</returns><seealso cref='T:Sansar.Simulation.ChatData'/><seealso cref='T:Sansar.Script.IEventSubscription'/>
            <param name='Channel'> int channel which the chat occurs on.</param>
            <param name='Source'> string source of the chat: system, user or script.</param>
            <param name='callback'>Callback which is executed when the event completes.</param>
            <param name='persistent'>Optional, set to false to unsubscribe after one event.</param>
        </member>
        <member name="M:Sansar.Simulation.Chat.Subscribe(System.Int32,System.String,Sansar.Script.SessionId,System.Action{Sansar.Simulation.ChatData},System.Boolean)">
            <summary>Subscribes to Chat Events.</summary><sourceLocation>DistributeEvent::writeSubscribe line 180</sourceLocation><remarks /><returns>An <see cref='T:Sansar.Script.IEventSubscription' /> that can be used to cancel the subscription.</returns><seealso cref='T:Sansar.Simulation.ChatData'/><seealso cref='T:Sansar.Script.IEventSubscription'/>
            <param name='Channel'> int channel which the chat occurs on.</param>
            <param name='Source'> string source of the chat: system, user or script.</param>
            <param name='SourceId'> Sansar.Script.SessionId id of the chat source. May be <see cref='F:Sansar.Script.SessionId.Invalid'/> if the source is not an agent.</param>
            <param name='callback'>Callback which is executed when the event completes.</param>
            <param name='persistent'>Optional, set to false to unsubscribe after one event.</param>
        </member>
        <member name="M:Sansar.Simulation.Chat.MessageScript(System.String,Sansar.Script.ScriptId,System.Int32)">
            <summary>Send a string message to a specific script.</summary>
            
            
            
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsChat.h(57)</sourceLocation>
            <remarks>Only the script with the matching id will receive the message.</remarks>
            <param name='message'>The message to send.</param>
            <param name='scriptId'>The id of the script to send the message to.</param>
            <param name='channel'>The channel to send the message on.</param>
        </member>
        <member name="M:Sansar.Simulation.Chat.MessageAllUsers(System.String,System.Action{Sansar.Script.OperationCompleteEvent})">
            <summary>Send a chat message to every user in the Experience.</summary>
            
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsChat.h(59)</sourceLocation>
            <remarks>Messages may be throttled.</remarks>
            <param name='message'>The message to send.</param>
            <param name='handler'>Handler to be called when the event completes.</param>
        </member>
        <member name="M:Sansar.Simulation.Chat.MessageAllUsers(System.String)">
            <summary>Send a chat message to every user in the Experience.</summary>
            <sourceLocation>C:\Source\ServerScript\Code\App\Libraries\SimulationScriptApi/CsChat.h(61)</sourceLocation>
            <remarks>Messages may be throttled.</remarks>
            <param name='message'>The message to send.</param>
        </member>
        <member name="T:Sansar.Simulation.Client">
            <summary>The Client class is used for access to the Client connected to a <see cref='T:Sansar.Simulation.AgentPrivate'/>.</summary><remarks>This class is also used for receiving input events from a client.</remarks><sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsClient.h(114)</sourceLocation>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsClient.h(114)</sourceLocation>
            <remarks></remarks>
        </member>
        <member name="M:Sansar.Simulation.Client.SubscribeToTwitch(System.Action{Sansar.Simulation.TwitchData},System.Boolean)">
            <summary>Subscribes to Twitch Events.</summary><sourceLocation>DistributeEvent::writeSubscribe line 180</sourceLocation><remarks /><returns>An <see cref='T:Sansar.Script.IEventSubscription' /> that can be used to cancel the subscription.</returns><seealso cref='T:Sansar.Simulation.TwitchData'/><seealso cref='T:Sansar.Script.IEventSubscription'/>
            <param name='callback'>Callback which is executed when the event completes.</param>
            <param name='persistent'>Optional, set to false to unsubscribe after one event.</param>
        </member>
        <member name="P:Sansar.Simulation.Client.InVrAndHandsActive">
            <summary>Retrieves whether or not this Client is using a VR headset and using hand tracking controllers currently.</summary>
            <returns>Whether or not this Client is using a VR headset and using hand tracking controllers currently.</returns>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsClient.h(126)</sourceLocation><remarks/>
        </member>
        <member name="P:Sansar.Simulation.Client.UI">
            <summary> Returns the <see cref='T:Sansar.Simulation.UI' /> for this instance. </summary>
            <returns>The <see cref='T:Sansar.Simulation.UI' /> for this instance</returns>
            <remarks>The <see cref='T:Sansar.Simulation.UI' /> for this instance.</remarks>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsClient.h(146)</sourceLocation>
        </member>
        <member name="P:Sansar.Simulation.Client.AgentInfo">
            <summary> Returns the <see cref='T:Sansar.Simulation.AgentInfo' /> for this instance. </summary>
            <returns>The <see cref='T:Sansar.Simulation.AgentInfo' /> for this instance</returns>
            <remarks>The <see cref='T:Sansar.Simulation.AgentInfo' /> holds information about an agent. </remarks>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsClient.h(135)</sourceLocation>
        </member>
        <member name="M:Sansar.Simulation.Client.SubscribeToTwitch(Sansar.Simulation.TwitchEventType,System.Action{Sansar.Simulation.TwitchData},System.Boolean)">
            <summary>Subscribes to Twitch Events.</summary><sourceLocation>DistributeEvent::writeSubscribe line 180</sourceLocation><remarks /><returns>An <see cref='T:Sansar.Script.IEventSubscription' /> that can be used to cancel the subscription.</returns><seealso cref='T:Sansar.Simulation.TwitchData'/><seealso cref='T:Sansar.Script.IEventSubscription'/>
            <param name='EventType'> The event which occurred</param>
            <param name='callback'>Callback which is executed when the event completes.</param>
            <param name='persistent'>Optional, set to false to unsubscribe after one event.</param>
        </member>
        <member name="M:Sansar.Simulation.Client.SubscribeToCommand(System.String,Sansar.Simulation.CommandAction,System.Action{Sansar.Simulation.CommandData},System.Action{Sansar.Script.CancelData},System.Boolean)">
            <summary>Subscribes to Command Events.</summary><sourceLocation>DistributeEvent::writeSubscribe line 180</sourceLocation><remarks /><returns>An <see cref='T:Sansar.Script.IEventSubscription' /> that can be used to cancel the subscription.</returns><seealso cref='T:Sansar.Simulation.CommandData'/><seealso cref='T:Sansar.Script.IEventSubscription'/>
            <param name='Command'> The command which occurred.</param>
            <param name='Action'> The action which occurred.</param>
            <param name='callback'>Callback which is executed when the event completes.</param>
            <param name='canceled'>Callback which is executed when the subscription is canceled.</param>
            <param name='persistent'>Optional, set to false to unsubscribe after one event.</param>
        </member>
        <member name="M:Sansar.Simulation.Client.SubscribeToCommand(System.String,System.Action{Sansar.Simulation.CommandData},System.Action{Sansar.Script.CancelData},System.Boolean)">
            <summary>Subscribes to Command Events.</summary><sourceLocation>DistributeEvent::writeSubscribe line 180</sourceLocation><remarks /><returns>An <see cref='T:Sansar.Script.IEventSubscription' /> that can be used to cancel the subscription.</returns><seealso cref='T:Sansar.Simulation.CommandData'/><seealso cref='T:Sansar.Script.IEventSubscription'/>
            <param name='Command'> The command which occurred.</param>
            <param name='callback'>Callback which is executed when the event completes.</param>
            <param name='canceled'>Callback which is executed when the subscription is canceled.</param>
            <param name='persistent'>Optional, set to false to unsubscribe after one event.</param>
        </member>
        <member name="M:Sansar.Simulation.Client.TeleportTo(Sansar.Vector,Sansar.Vector)">
            <summary>
            Teleports to the position facing the specified direction
            </summary>
            
            
            <remarks>The agent will be set to the specified position facing the given forward direction. Note that avatars always remain upright so the Z component of the forward vector will be ignored.</remarks>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsClient.h(136)</sourceLocation>
            <param name='position'>The teleport destination position.</param>
            <param name='forward'>The teleport destination forward direction.</param>
        </member>
        <member name="M:Sansar.Simulation.Client.TeleportTo(System.String)">
            <summary>
            Teleports to a spawn point in the scene
            </summary>
            
            <remarks>Teleports may be throttled.</remarks>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsClient.h(137)</sourceLocation>
            <param name='spawnPointName'>The name of the target spawn point in the destination.</param>
        </member>
        <member name="M:Sansar.Simulation.Client.TeleportToUri(System.String)">
            <summary>
            Teleports to the specified URI
            </summary>
            
            <remarks>Teleports may be throttled.</remarks>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsClient.h(142)</sourceLocation>
            <param name='sansarUri'>The URI to teleport to.</param>
        </member>
        <member name="M:Sansar.Simulation.Client.TeleportToLocation(System.String,System.String)">
            <summary>
            Teleports the personaHandle to the locationHandle.
            </summary>
            
            
            <remarks>Teleports may be throttled.</remarks>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsClient.h(138)</sourceLocation>
            <param name='avatarId'>The <see cref='P:Sansar.Simulation.SceneInfo.AvatarId'/> of the destination creator.</param>
            <param name='locationHandle'>The <see cref='P:Sansar.Simulation.SceneInfo.LocationHandle'/> of the destination.</param>
        </member>
        <member name="M:Sansar.Simulation.Client.TeleportToLocation(System.String,System.String,System.String)">
            <summary>
            Teleports the personaHandle to the locationHandle.
            </summary>
            
            
            
            <remarks>Teleports may be throttled.</remarks>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsClient.h(139)</sourceLocation>
            <param name='avatarId'>The <see cref='P:Sansar.Simulation.SceneInfo.AvatarId'/> of the destination creator.</param>
            <param name='locationHandle'>The <see cref='P:Sansar.Simulation.SceneInfo.LocationHandle'/> of the destination.</param>
            <param name='spawnPointName'>The name of the target spawn point in the destination.</param>
        </member>
        <member name="M:Sansar.Simulation.Client.TeleportToLookbook(System.String)">
            <summary>
            Teleports to the Lookbook
            </summary>
            
            <remarks>Teleports may be throttled.</remarks>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsClient.h(140)</sourceLocation>
            <param name='returnSpawnPointName'>When returning to the world from the lookbook, this spawn point will be used</param>
        </member>
        <member name="M:Sansar.Simulation.Client.TeleportToLookbook">
            <summary>
            Teleports to the Lookbook
            </summary>
            
            <remarks>Teleports may be throttled.</remarks>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsClient.h(140)</sourceLocation>
        </member>
        <member name="M:Sansar.Simulation.Client.TeleportToCharacterEditor(System.String)">
            <summary>
            Teleports to the Character Editor
            </summary>
            
            <remarks>Teleports may be throttled.</remarks>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsClient.h(141)</sourceLocation>
            <param name='returnSpawnPointName'>When returning to the world from the character editor, this spawn point will be used</param>
        </member>
        <member name="M:Sansar.Simulation.Client.TeleportToCharacterEditor">
            <summary>
            Teleports to the Character Editor
            </summary>
            
            <remarks>Teleports may be throttled.</remarks>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsClient.h(141)</sourceLocation>
        </member>
        <member name="M:Sansar.Simulation.Client.OpenStoreListing(System.Guid)">
            <summary>
            Opens the product's Store page.
            </summary>
            <remarks />
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsClient.h(143)</sourceLocation>
            <param name='productId'>A product ID from a Sansar store listing.</param>
        </member>
        <member name="M:Sansar.Simulation.Client.OpenUserStore(System.String)">
            <summary>
            Opens the user's Store page.
            </summary>
            <remarks />
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsClient.h(144)</sourceLocation>
            <param name='creatorHandle'>Creator handle: Creator's handle Sansar store.</param>
        </member>
        <member name="M:Sansar.Simulation.Client.OpenQuestCharacterDialog(Sansar.Simulation.QuestCharacter)">
            <summary>
            Opens the quest dialog for a character.
            </summary>
            <remarks />
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsClient.h(145)</sourceLocation>
            <param name='character'>The character to open the quest dialog for.</param>
        </member>
        <member name="M:Sansar.Simulation.Client.VibrationPulse(Sansar.Simulation.ControlPointType,System.Single,System.Single)">
            <summary>Pulses the vibration haptic motor for a control point.</summary>
            
            
            
            <param name='type'>See <see cref='T:Sansar.Simulation.ControlPointType' /> </param>
            <param name='intensity'> Intensity of vibration.  Intensity will be clamped to the range [0, 1]. </param>
            <param name='duration'> Duration of the pulse in milliseconds.  Will be clamped to the range [0, 1000]. </param>
        </member>
        <member name="M:Sansar.Simulation.Client.SetActiveCamera(Sansar.Simulation.CameraComponent)">
            <summary>Sets the active camera for this Client.</summary>
            
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsClient.h(150)</sourceLocation>
            <param name='component'>The camera component to set </param>
        </member>
        <member name="M:Sansar.Simulation.Client.SetActiveCamera(Sansar.Simulation.CameraComponent,Sansar.Simulation.ScriptCameraControlMode)">
            <summary>Sets the active camera for this Client.</summary>
            
            
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsClient.h(151)</sourceLocation>
            <param name='component'>The camera component to set </param>
            <param name='controlMode'>The script camera control mode to set </param>
        </member>
        <member name="M:Sansar.Simulation.Client.GetActiveCamera">
            <summary> Returns the active camera for this instance. </summary>
            <returns>The active camera for this instance</returns>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsClient.h(152)</sourceLocation>
        </member>
        <member name="M:Sansar.Simulation.Client.ResetCamera">
            <summary>Resets the active camera for this Client to the system default</summary>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsClient.h(153)</sourceLocation>
        </member>
        <member name="M:Sansar.Simulation.Client.CaptureImage(Sansar.Simulation.CameraComponent)">
            <summary>Take a image from the camera point of view</summary>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsClient.h(154)</sourceLocation>
        </member>
        <member name="M:Sansar.Simulation.Client.ShowTutorialHint(Sansar.Simulation.TutorialHint,System.Action{Sansar.Script.OperationCompleteEvent})">
            <summary>
            Show a tutorial hint to the player
            </summary>
            
            <remarks></remarks>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsClient.h(159)</sourceLocation>
            <param name='hint'>The hint to show.</param>
            <param name='handler'>Handler to be called when the event completes.</param>
        </member>
        <member name="M:Sansar.Simulation.Client.ShowTutorialHint(Sansar.Simulation.TutorialHint)">
            <summary>
            Show a tutorial hint to the player
            </summary>
            
            <remarks></remarks>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsClient.h(159)</sourceLocation>
            <param name='hint'>The hint to show.</param>
        </member>
        <member name="M:Sansar.Simulation.Client.ShowTutorialHint(Sansar.Simulation.TutorialHint,System.Int32,System.Action{Sansar.Script.OperationCompleteEvent})">
            <summary>
            Show a tutorial hint to the player
            </summary>
            
            
            <remarks></remarks>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsClient.h(160)</sourceLocation>
            <param name='hint'>The hint to show.</param>
            <param name='variant'>Optional variant of the hint to show.</param>
            <param name='handler'>Handler to be called when the event completes.</param>
        </member>
        <member name="M:Sansar.Simulation.Client.ShowTutorialHint(Sansar.Simulation.TutorialHint,System.Int32)">
            <summary>
            Show a tutorial hint to the player
            </summary>
            
            
            <remarks></remarks>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsClient.h(160)</sourceLocation>
            <param name='hint'>The hint to show.</param>
            <param name='variant'>Optional variant of the hint to show.</param>
        </member>
        <member name="M:Sansar.Simulation.Client.ClearTutorialHint(System.Action{Sansar.Script.OperationCompleteEvent})">
            <summary>
            Clears any scripted tutorial hint being shown to the player
            </summary>
            <remarks></remarks>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsClient.h(161)</sourceLocation>
            <param name='handler'>Handler to be called when the event completes.</param>
        </member>
        <member name="M:Sansar.Simulation.Client.ClearTutorialHint">
            <summary>
            Clears any scripted tutorial hint being shown to the player
            </summary>
            <remarks></remarks>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsClient.h(161)</sourceLocation>
        </member>
        <member name="M:Sansar.Simulation.Client.EnableAutomaticTutorialHints(System.Boolean,System.Action{Sansar.Script.OperationCompleteEvent})">
            <summary>
            Enables / Disables automatic (non-scripted) tutorial hints.
            </summary>
            
            <remarks> If the user has disabled hints in the settings menu, enabling them from script will have no effect.</remarks>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsClient.h(164)</sourceLocation>
            <param name='enabled'>Enabled state of automatic hints.</param>
            <param name='handler'>Handler to be called when the event completes.</param>
        </member>
        <member name="M:Sansar.Simulation.Client.EnableAutomaticTutorialHints(System.Boolean)">
            <summary>
            Enables / Disables automatic (non-scripted) tutorial hints.
            </summary>
            
            <remarks> If the user has disabled hints in the settings menu, enabling them from script will have no effect.</remarks>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsClient.h(164)</sourceLocation>
            <param name='enabled'>Enabled state of automatic hints.</param>
        </member>
        <member name="M:Sansar.Simulation.Client.ToString">
            <summary> A string representation of this object. </summary> <returns>A string representation of this object.</returns> <remarks>The format of this string may change between releases.</remarks>
        </member>
        <member name="M:Sansar.Simulation.Client.SendChat(System.String)">
            <summary>Sends a <see cref='T:System.String' /> message to the $className$.</summary>
            <param name="message">The message to send. </param>
            <sourceLocation>$sourceLocation$</sourceLocation>
            <remarks>eprecated. Use AgentPrivate.SendChat or AgentPublic.SendChat</remarks>
            <exception cref="T:System.NullReferenceException">If the user is no longer online.</exception>
            <exception cref="T:Sansar.Script.ThrottleException">If the throttle rate is exceeded.</exception>
        </member>
        <member name="T:Sansar.Simulation.ScenePrivate">
            <summary>Interface for Scripts that are part of a Scene. A more complete and less limited API than <see cref="T:Sansar.Simulation.ScenePublic"/></summary><sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsScene.h(86)</sourceLocation><remarks>The ScenePrivate class provides services relating to the Scene.</remarks>
        </member>
        <member name="M:Sansar.Simulation.ScenePrivate.CreateDataStore(System.Guid)">
            <summary>
            Returns a new instance of the <see cref="T:Sansar.Simulation.DataStore"/> class.
            </summary>
            <param name="id">The id of the <see cref="T:Sansar.Simulation.DataStore"/> to create.</param>
            <returns>A new <see cref="T:Sansar.Simulation.DataStore"/> object.</returns>
            <remarks>All <see cref="T:Sansar.Simulation.DataStore"/> objects with a given <see cref="P:Sansar.Simulation.DataStore.Id"/> share the same database.</remarks>
        </member>
        <member name="M:Sansar.Simulation.ScenePrivate.CreateDataStore(System.String)">
            <summary>
            Returns a new instance of the <see cref="T:Sansar.Simulation.DataStore"/> class.
            </summary>
            <param name="id">String used to generate an id. If the id is a valid Guid then it will be used directly.</param>
            <returns>A new <see cref="T:Sansar.Simulation.DataStore"/> object.</returns>
            <remarks>All <see cref="T:Sansar.Simulation.DataStore"/> objects with a given <see cref="P:Sansar.Simulation.DataStore.Id"/> share the same database. Ensure that this value is kept secret and unique.</remarks>
        </member>
        <member name="T:Sansar.Simulation.ScenePrivate.CreateClusterData">
            
            <summary>
            The result of a create cluster request.
            </summary>
            <remarks>See <see cref="M:Sansar.Simulation.ScenePrivate.CreateCluster(Sansar.Simulation.ClusterResource,Sansar.Vector,Sansar.Quaternion,Sansar.Vector,System.Action{Sansar.Simulation.ScenePrivate.CreateClusterData})"/>. </remarks>
        </member>
        <member name="P:Sansar.Simulation.ScenePrivate.CreateClusterData.ClusterReference">
            <summary>The cluster object which was created as a result of the create call.</summary><remarks>Will be null if Success is false.</remarks><value>The cluster created or null if the call failed.</value>
        </member>
        <member name="M:Sansar.Simulation.ScenePrivate.CreateClusterData.ToString">
            <summary> A string representation of this object. </summary> <returns>A string representation of this object.</returns> <remarks>The format of this string may change between releases.</remarks>
        </member>
        <member name="F:Sansar.Simulation.ScenePrivate.MaximumCastRayResults">
            <summary>
            The maximum number of results returned from a <see cref="M:CastRay"/>, <see cref="M:CastSphere"/> or <see cref="M:CastBox"/> call. Anything over this will be truncated.
            </summary><remarks/><sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsScene.h(134)</sourceLocation>
        </member>
        <member name="F:Sansar.Simulation.ScenePrivate.MinimumCastRadius">
            <summary>
            The minimum radius for a <see cref="M:CastSphere"/> call or minimum half extents for <see cref="M:CastBox"/>. Any value smaller than this will use <see cref="M:CastRay"/> instead.
            </summary><remarks/><sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsScene.h(139)</sourceLocation>
        </member>
        <member name="F:Sansar.Simulation.ScenePrivate.GravityMinimum">
            <summary>
            The minimum allowed gravity magnitude in m/s^2, which is equal to zero.
            </summary><remarks>A value less than this will clamp to this value.</remarks>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsScene.h(245)</sourceLocation>
        </member>
        <member name="F:Sansar.Simulation.ScenePrivate.GravityMaximum">
            <summary>
            The maximum gravity magnitude in m/s^2, which is equal to 49.05 or 5 G's.
            </summary><remarks>A value greater than this will clamp to this value.</remarks>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsScene.h(246)</sourceLocation>
        </member>
        <member name="P:Sansar.Simulation.ScenePrivate.SceneInfo">
            <summary>
            Gets the SceneInfo for this Scene
            </summary>
            <returns>The full SceneInfo Api</returns>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsScene.h(97)</sourceLocation>
            <remarks></remarks>
        </member>
        <member name="P:Sansar.Simulation.ScenePrivate.AgentCount">
            <summary>The number of agents in the Scene.</summary><sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsScene.h(127)</sourceLocation>
            <remarks>This number changes when agents join and part.</remarks>
            <value>Unsigned integer count of the number of agents in the Scene.</value>
        </member>
        <member name="P:Sansar.Simulation.ScenePrivate.Chat">
            <summary>
            Gets the Chat interface for this Scene
            </summary>
            <returns>The Chat Api</returns>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsScene.h(102)</sourceLocation>
            <remarks></remarks>
        </member>
        <member name="P:Sansar.Simulation.ScenePrivate.User">
            <summary>
            Gets the User interface for this Scene
            </summary>
            <returns>The User Api</returns>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsScene.h(103)</sourceLocation>
            <remarks></remarks>
        </member>
        <member name="P:Sansar.Simulation.ScenePrivate.HttpClient">
            <summary>
            Gets the HttpClient for this Scene
            </summary>
            <returns>The HttpClient Api</returns>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsScene.h(104)</sourceLocation>
            <remarks></remarks>
        </member>
        <member name="P:Sansar.Simulation.ScenePrivate.DefaultGravity">
            <summary>
            The default gravity magnitude in the scene in m/s^2, which is equal to 9.81 or 1 G.
            </summary>
            <value>The default scene gravity magnitude.</value>
            <remarks>The direction of the gravity vector is constant.</remarks>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsScene.h(255)</sourceLocation>
            <example><code lang="C#">float sansarGravity = ScenePrivate.DefaultGravity; // Get default gravity in m/s^2</code></example>
            <remarks>See GravityExample.cs in the Examples folder for more details.</remarks>
        </member>
        <member name="P:Sansar.Simulation.ScenePrivate.Reactions">
            <summary>
            Gets the Reactions interface for this Scene
            </summary>
            <returns>The Chat Api</returns>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsScene.h(105)</sourceLocation>
            <remarks></remarks>
        </member>
        <member name="M:Sansar.Simulation.ScenePrivate.GetAgents">
            <summary>
            Returns the current list of Agents in the Scene.
            </summary>
            <returns>The current list of agents in the Scene</returns>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsScene.h(128)</sourceLocation>
        </member>
        <member name="M:Sansar.Simulation.ScenePrivate.GetAgent(System.UInt32)">
            <summary>Get an <see cref='T:Sansar.Simulation.AgentPrivate'/> for a specific agent in the Scene.
            </summary><sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsScene.h(125)</sourceLocation>
            
            <remarks>Agents may appear at different indices as they join and part.</remarks>
            <value>Returns null if the index is larger than the number of agents in the Scene, or if the agent is not fully loaded.</value>
            <param name='index'>The index of the agent to get.</param>
        </member>
        <member name="M:Sansar.Simulation.ScenePrivate.FindAgent(System.Guid)">
            <summary>
            Looks up an Agent associated with the given persona id, if they are in the scene.
            </summary>
            
            <returns>The agent, or null if an agent cannot be found with that id in the scene.</returns>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsScene.h(116)</sourceLocation>
            <remarks>Agents may leave at any time. Attempting to use an Agent or AgentInfo interface for an agent no longer in the scene will throw a NullReferenceException.</remarks>
            <param name='personaId'>The object to find.</param>
        </member>
        <member name="M:Sansar.Simulation.ScenePrivate.FindAgent(Sansar.Script.ObjectId)">
            <summary>
            Looks up an Agent associated with the given object id.
            </summary>
            
            <returns>The agent, or null if an agent cannot be found with that id.</returns>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsScene.h(110)</sourceLocation>
            <remarks>Agents may leave at any time.</remarks>
            <param name='objectId'>The object to find.</param>
        </member>
        <member name="M:Sansar.Simulation.ScenePrivate.FindAgent(Sansar.Script.SessionId)">
            <summary>
            Looks up an Agent associated with the given session id if they are in the scene.
            </summary>
            
            <returns>The agent, or null if an agent cannot be found with that id in the scene.</returns>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsScene.h(113)</sourceLocation>
            <remarks>Agents may leave at any time. Attempting to use an Agent or AgentInfo interface for an agent no longer in the scene will throw a NullReferenceException.</remarks>
            <param name='sessionId'>The session id of the agent to find.</param>
        </member>
        <member name="M:Sansar.Simulation.ScenePrivate.FindObject(Sansar.Script.ObjectId)">
            <summary>
            Looks up a Object associated with the given object id.
            </summary>
            
            <returns>The ObjectPrivate, or null if a Object cannot be found with that id.</returns>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsScene.h(107)</sourceLocation><remarks/>
            <param name='objectId'>The object to find.</param>
        </member>
        <member name="M:Sansar.Simulation.ScenePrivate.FindScript(Sansar.Script.ScriptId)">
            <summary>
            Looks up the script object associated with the given scriptId
            </summary>
            
            <returns>The script object, or null if an script cannot be found with that id in the scene.</returns>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsScene.h(119)</sourceLocation>
            <remarks>Objects and their associated scripts may be removed the scene at any time.</remarks>
            <param name='scriptId'>The scriptId of the object to find.</param>
        </member>
        <member name="M:Sansar.Simulation.ScenePrivate.CreateCluster(Sansar.Simulation.ClusterResource,Sansar.Vector,Sansar.Quaternion,Sansar.Vector,System.Action{Sansar.Simulation.ScenePrivate.CreateClusterData})">
            <summary>
            Creates a new cluster and adds it to the Scene.
            </summary>
            
            
            
            
            <returns>The internal event id for the completion event.</returns><sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsScene.h(223)</sourceLocation>
            <remarks>The new object may start simulating before the event is triggered.</remarks>
            
            <param name='asset'>Asset identifier to create.</param>
            <param name='position'>Mono.Simd.Vector4f for the initial position.</param>
            <param name='rotation'>Mono.Simd.Vector4f for the initial rotation.</param>
            <param name='initialVelocity'>Mono.Simd.Vector4f for the initial velocity.</param>
            <param name='handler'>Handler to be called when the event completes.</param>
        </member>
        <member name="M:Sansar.Simulation.ScenePrivate.ResetScene">
            <summary>
            Restarts the Scene.
            </summary>
            <remarks>All clients will be momentarily disconnected.</remarks>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsScene.h(221)</sourceLocation>
        </member>
        <member name="M:Sansar.Simulation.ScenePrivate.GetPortalUri(Sansar.Script.ObjectId)">
            <summary>URI destination for the specified portal.</summary><sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsScene.h(121)</sourceLocation>
            <remarks>The URI of the destination of the portal.</remarks>
            <value>String</value>
        </member>
        <member name="M:Sansar.Simulation.ScenePrivate.GetPortalDescription(Sansar.Script.ObjectId)">
            <summary>Description for the specified portal.</summary><sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsScene.h(122)</sourceLocation>
            <remarks>The description of the portal.</remarks>
            <value>String</value>
        </member>
        <member name="M:Sansar.Simulation.ScenePrivate.GetPortalCreatorName(Sansar.Script.ObjectId)">
            <summary>The name of the user who created the specified portal.</summary><sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsScene.h(123)</sourceLocation>
            <remarks>User who created the portal.</remarks>
            <value>String</value>
        </member>
        <member name="M:Sansar.Simulation.ScenePrivate.PlaySound(Sansar.Simulation.SoundResource,Sansar.Simulation.PlaySettings)">
            <summary>Play sound to direct output.</summary><sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsScene.h(160)</sourceLocation>
            <remarks>Plays for all agents in this scene.</remarks>
            <returns>The play handle for controlling playback.</returns>
            
            
            <param name='soundResource'>The sound resource to play.</param>
            <param name='playSettings'>The play parameters.</param>
        </member>
        <member name="M:Sansar.Simulation.ScenePrivate.PlaySoundAtPosition(Sansar.Simulation.SoundResource,Sansar.Vector,Sansar.Simulation.PlaySettings)">
            <summary>Play sound at specified position.</summary><sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsScene.h(168)</sourceLocation>
            <remarks>Plays for all agents in this scene.  By setting an absolute position, the location of this sound will be static.  If you want the sound to move, you must play the sound on an audio component and move the audio component.</remarks>
            <returns>The play handle for controlling playback.</returns>
            
            
            
            <param name='soundResource'>The sound resource to play.</param>
            <param name='position'>The absolute position.</param>
            <param name='playSettings'>The play parameters.</param>
        </member>
        <member name="M:Sansar.Simulation.ScenePrivate.PlayStream(Sansar.Simulation.StreamChannel,System.Single)">
            <summary>Play web audio stream to direct output.</summary><sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsScene.h(194)</sourceLocation>
            <remarks>Plays for all agents in this scene.</remarks>
            <returns>The play handle for controlling playback.</returns>
            
            
            <param name='streamChannel'>Channel of the audio stream to play.</param>
            <param name='loudness'>Relative loudness in dB.</param>
        </member>
        <member name="M:Sansar.Simulation.ScenePrivate.PlayStreamAtPosition(Sansar.Simulation.StreamChannel,Sansar.Vector,System.Single)">
            <summary>Play web audio stream at specified position.</summary><sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsScene.h(202)</sourceLocation>
            <remarks>Plays for all agents in this scene.  By setting an absolute position, the location of this sound will be static.  If you want the sound to move, you must play the sound on an audio component and move the audio component.</remarks>
            <returns>The play handle for controlling playback.</returns>
            
            
            
            <param name='streamChannel'>Channel of the audio stream to play.</param>
            <param name='position'>The absolute position.</param>
            <param name='loudness'>Relative loudness in dB.</param>
        </member>
        <member name="M:Sansar.Simulation.ScenePrivate.OverrideAudioStream(System.String,System.Action{Sansar.Script.OperationCompleteEvent})">
            <summary>Overrides source of web audio streams.</summary><sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsScene.h(207)</sourceLocation>
            <remarks>Applies to all agents in this scene.  NOTE: this may cause a few seconds of silence while restarting the stream.  To avoid silence, assign URLs in your SceneSettings instead, which will pre-load them.</remarks>
            
            <param name='url'>URL to use.</param>
            <param name='handler'>Handler to be called when the event completes.</param>
        </member>
        <member name="M:Sansar.Simulation.ScenePrivate.OverrideMediaSource(System.String,System.Int32,System.Int32,System.Action{Sansar.Script.OperationCompleteEvent})">
            <summary>Overrides source of media surfaces.</summary><sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsScene.h(214)</sourceLocation>
            <remarks>Applies to all agents in this scene.  NOTE: this will cause a few seconds of silence while restarting the stream.  To avoid silence, assign URLs in your SceneSettings instead, which will pre-load them.</remarks>
            
            
            
            <param name='url'>URL to use.</param>
            <param name='mediaWidth'>(cMediaChannel only) source width.</param>
            <param name='mediaHeight'>(cMediaChannel only) source height.</param>
            <param name='handler'>Handler to be called when the event completes.</param>
        </member>
        <member name="M:Sansar.Simulation.ScenePrivate.PerformMediaAction(Sansar.Simulation.MediaAction,System.Action{Sansar.Script.OperationCompleteEvent})">
            <summary>Performs a specific action on the current media surface.</summary><sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsScene.h(219)</sourceLocation>
            <remarks>Applies to all agents currently in the scene.</remarks>
            
            <param name='action'>The action to perform.</param>
            <param name='handler'>Handler to be called when the event completes.</param>
        </member>
        <member name="M:Sansar.Simulation.ScenePrivate.VoiceBroadcastStartDeprecated(Sansar.Simulation.AgentPrivate)">
            <summary>Start broadcasting agent's voice to the voice broadcast channel.</summary><sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsScene.h(178)</sourceLocation>
            <remarks>Plays for all agents in this scene.</remarks>
            
            <param name='agent'>Agent to broadcast.</param>
        </member>
        <member name="M:Sansar.Simulation.ScenePrivate.VoiceBroadcastStopDeprecated(Sansar.Simulation.AgentPrivate)">
            <summary>Stop broadcasting agent's voice to voice broadcast channel.</summary><sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsScene.h(183)</sourceLocation>
            <remarks>Stops for all agents in this scene.</remarks>
            
            <param name='agent'>Agent to stop broadcasting.</param>
        </member>
        <member name="M:Sansar.Simulation.ScenePrivate.VoiceBroadcastStopAllDeprecated">
            <summary>Stop broadcasting all voices to voice broadcast channel.</summary><sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsScene.h(187)</sourceLocation>
            <remarks>Stops for all agents in this scene.</remarks>
        </member>
        <member name="M:Sansar.Simulation.ScenePrivate.SetMegaphone(Sansar.Simulation.AgentPrivate,System.Boolean,System.Action{Sansar.Script.OperationCompleteEvent})">
            <summary>Sets the megaphone status of the user.</summary><sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsScene.h(173)</sourceLocation>
            
            
            <param name='agent'>Agent to broadcast.</param>
            <param name='enable'>If true, user's voice will be heard by everyone in the scene.  If false, user's voice will be spatialized normally.</param>
            <param name='handler'>Handler to be called when the event completes.</param>
        </member>
        <member name="M:Sansar.Simulation.ScenePrivate.SetMegaphone(Sansar.Simulation.AgentPrivate,System.Boolean)">
            <summary>Sets the megaphone status of the user.</summary><sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsScene.h(173)</sourceLocation>
            
            
            <param name='agent'>Agent to broadcast.</param>
            <param name='enable'>If true, user's voice will be heard by everyone in the scene.  If false, user's voice will be spatialized normally.</param>
        </member>
        <member name="M:Sansar.Simulation.ScenePrivate.GetGravity">
            <summary>Gets the scene's current acceleration of gravity in m/s^2.</summary>
            <remarks>The default gravity for the scene is <see cref='P:Sansar.Simulation.ScenePrivate.DefaultGravity'/></remarks>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsScene.h(256)</sourceLocation>
            <value>Number indicating the magnitude of gravity in the scene.</value>
            <example><code lang='C#'>float currentGravity = ScenePrivate.GetGravity(); // Get the current scene gravity in m/s^2</code></example>
            <remarks>See GravityExample.cs in the Examples folder for more details.</remarks>
        </member>
        <member name="M:Sansar.Simulation.ScenePrivate.SetGravity(System.Single,System.Action{Sansar.Script.OperationCompleteEvent})">
            <summary>Sets the scene's current gravity acceleration in m/s^2.</summary>
            
            <remarks>Set to <see cref='P:Sansar.Simulation.ScenePrivate.DefaultGravity'/> to return to the default. The valid range is from <see cref='F:Sansar.Simulation.ScenePrivate.GravityMinimum'/> to <see cref='F:Sansar.Simulation.ScenePrivate.GravityMaximum'/>. The direction cannot be changed.</remarks>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsScene.h(257)</sourceLocation>
            <value>The return value is an internal event id which can be passed to <see cref='M:Sansar.Script.ScriptBase.WaitFor' /> from a coroutine for synchronous behavior.</value>
            <example><code lang='C#'>ScenePrivate.SetGravity(1.622f); // Set the scene to moon gravity</code></example>
            <remarks>See GravityExample.cs in the Examples folder for more details.</remarks>
            <param name='scale'>The gravity magnitude.</param>
            <param name='handler'>Handler to be called when the event completes.</param>
        </member>
        <member name="M:Sansar.Simulation.ScenePrivate.SetGravity(System.Single)">
            <summary>Sets the scene's current gravity acceleration in m/s^2.</summary>
            
            <remarks>Set to <see cref='P:Sansar.Simulation.ScenePrivate.DefaultGravity'/> to return to the default. The valid range is from <see cref='F:Sansar.Simulation.ScenePrivate.GravityMinimum'/> to <see cref='F:Sansar.Simulation.ScenePrivate.GravityMaximum'/>. The direction cannot be changed.</remarks>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsScene.h(257)</sourceLocation>
            <value>The return value is an internal event id which can be passed to <see cref='M:Sansar.Script.ScriptBase.WaitFor' /> from a coroutine for synchronous behavior.</value>
            <example><code lang='C#'>ScenePrivate.SetGravity(1.622f); // Set the scene to moon gravity</code></example>
            <remarks>See GravityExample.cs in the Examples folder for more details.</remarks>
            <param name='scale'>The gravity magnitude.</param>
        </member>
        <member name="M:Sansar.Simulation.ScenePrivate.CastRay(Sansar.Vector,Sansar.Vector,System.Int32)">
            <summary>Casts a ray from start to end and returns an array of collisions along the path.
            </summary>
            
            
            
            <remarks>maxHits defaults to 1 if unspecified and will return only the nearest hit.</remarks>
            <returns>An array of hit results, ordered from nearest to furthest. If the cast did not hit anything the array will be empty.</returns>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsScene.h(141)</sourceLocation>
            <param name='start'>The initial point of the query.</param>
            <param name='end'>The end point of the query.</param>
            <param name='maxHits'>Limit the number of results returned.</param>
        </member>
        <member name="M:Sansar.Simulation.ScenePrivate.CastRay(Sansar.Vector,Sansar.Vector)">
            <summary>Casts a ray from start to end and returns an array of collisions along the path.
            </summary>
            
            
            
            <remarks>maxHits defaults to 1 if unspecified and will return only the nearest hit.</remarks>
            <returns>An array of hit results, ordered from nearest to furthest. If the cast did not hit anything the array will be empty.</returns>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsScene.h(141)</sourceLocation>
            <param name='start'>The initial point of the query.</param>
            <param name='end'>The end point of the query.</param>
        </member>
        <member name="M:Sansar.Simulation.ScenePrivate.CastSphere(System.Single,Sansar.Vector,Sansar.Vector,System.Int32)">
            <summary>Casts a sphere from start to end and returns an array of collisions along the path.
            </summary>
            
            
            
            
            <remarks>If the radius is less than <see cref='F:Sansar.Simulation.ScenePrivate.MinimumCastRadius'/> the call will be forwarded to <see cref='M:Sansar.Simulation.ScenePrivate.CastRay(Sansar.Vector,Sansar.Vector,System.Int32)'/> instead.
            maxHits defaults to 1 if unspecified and will return only the nearest hit.
            </remarks>
            <returns>An array of hit results, ordered from nearest to furthest. If the cast did not hit anything the array will be empty.</returns>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsScene.h(142)</sourceLocation>
            <param name='radius'>The radius of the sphere.</param>
            <param name='start'>The initial point of the query.</param>
            <param name='end'>The end point of the query.</param>
            <param name='maxHits'>Limit the number of results returned.</param>
        </member>
        <member name="M:Sansar.Simulation.ScenePrivate.CastSphere(System.Single,Sansar.Vector,Sansar.Vector)">
            <summary>Casts a sphere from start to end and returns an array of collisions along the path.
            </summary>
            
            
            
            
            <remarks>If the radius is less than <see cref='F:Sansar.Simulation.ScenePrivate.MinimumCastRadius'/> the call will be forwarded to <see cref='M:Sansar.Simulation.ScenePrivate.CastRay(Sansar.Vector,Sansar.Vector,System.Int32)'/> instead.
            maxHits defaults to 1 if unspecified and will return only the nearest hit.
            </remarks>
            <returns>An array of hit results, ordered from nearest to furthest. If the cast did not hit anything the array will be empty.</returns>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsScene.h(142)</sourceLocation>
            <param name='radius'>The radius of the sphere.</param>
            <param name='start'>The initial point of the query.</param>
            <param name='end'>The end point of the query.</param>
        </member>
        <member name="M:Sansar.Simulation.ScenePrivate.CastBox(Sansar.Vector,Sansar.Quaternion,Sansar.Vector,Sansar.Vector,System.Int32)">
            <summary>Casts a box from start to end and returns an array of collisions along the path.
            </summary>
            
            
            
            
            
            <remarks>If all 3 dimensions are less than <see cref='F:Sansar.Simulation.ScenePrivate.MinimumCastRadius'/> the call will be forwarded to <see cref='M:CastRay'/> instead.
            </remarks>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsScene.h(143)</sourceLocation>
            <param name='halfExtents'>The x,y,z distance from the center of the box to the corresponding face.</param>
            <param name='orientation'>The orientation of the query shape.</param>
            <param name='start'>The initial point of the query.</param>
            <param name='end'>The end point of the query.</param>
            <param name='maxHits'>Limit the number of results returned.</param>
        </member>
        <member name="M:Sansar.Simulation.ScenePrivate.CastBox(Sansar.Vector,Sansar.Quaternion,Sansar.Vector,Sansar.Vector)">
            <summary>Casts a box from start to end and returns an array of collisions along the path.
            </summary>
            
            
            
            
            
            <remarks>If all 3 dimensions are less than <see cref='F:Sansar.Simulation.ScenePrivate.MinimumCastRadius'/> the call will be forwarded to <see cref='M:CastRay'/> instead.
            </remarks>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsScene.h(143)</sourceLocation>
            <param name='halfExtents'>The x,y,z distance from the center of the box to the corresponding face.</param>
            <param name='orientation'>The orientation of the query shape.</param>
            <param name='start'>The initial point of the query.</param>
            <param name='end'>The end point of the query.</param>
        </member>
        <member name="M:Sansar.Simulation.ScenePrivate.CastBox(Sansar.Vector,Sansar.Vector,Sansar.Vector,System.Int32)">
            <summary>Casts a box from start to end and returns an array of collisions along the path.
            </summary>
            
            
            
            
            <remarks>If all 3 dimensions are less than <see cref='F:Sansar.Simulation.ScenePrivate.MinimumCastRadius'/> the call will be forwarded to <see cref='M:CastRay'/> instead.
            maxHits defaults to 1 if unspecified and will return only the nearest hit.</remarks>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsScene.h(150)</sourceLocation>
            <param name='halfExtents'>The x,y,z distance from the center of the box to the corresponding face.</param>
            <param name='start'>The initial point of the query.</param>
            <param name='end'>The end point of the query.</param>
            <param name='maxHits'>Limit the number of results returned.</param>
        </member>
        <member name="M:Sansar.Simulation.ScenePrivate.CastBox(Sansar.Vector,Sansar.Vector,Sansar.Vector)">
            <summary>Casts a box from start to end and returns an array of collisions along the path.
            </summary>
            
            
            
            
            <remarks>If all 3 dimensions are less than <see cref='F:Sansar.Simulation.ScenePrivate.MinimumCastRadius'/> the call will be forwarded to <see cref='M:CastRay'/> instead.
            maxHits defaults to 1 if unspecified and will return only the nearest hit.</remarks>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsScene.h(150)</sourceLocation>
            <param name='halfExtents'>The x,y,z distance from the center of the box to the corresponding face.</param>
            <param name='start'>The initial point of the query.</param>
            <param name='end'>The end point of the query.</param>
        </member>
        <member name="M:Sansar.Simulation.ScenePrivate.CastCapsule(Sansar.Vector,Sansar.Vector,System.Single,Sansar.Quaternion,Sansar.Vector,Sansar.Vector,System.Int32)">
            <summary>Casts a capsule from start to end and returns an array of collisions along the path.
            </summary>
            
            
            
            
            
            
            
            <remarks>If the radius and capsule length are less than <see cref='F:Sansar.Simulation.ScenePrivate.MinimumCastRadius'/> the call will be forwarded to <see cref='M:CastRay'/> instead.
            </remarks>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsScene.h(146)</sourceLocation>
            <param name='capsuleStart'>The base point of the capsule.</param>
            <param name='capsuleEnd'>The end point of the capsule.</param>
            <param name='capsuleRadius'>The radius of the capsule to query.</param>
            <param name='orientation'>The orientation of the query shape.</param>
            <param name='start'>The initial point of the query.</param>
            <param name='end'>The end point of the query.</param>
            <param name='maxHits'>Limit the number of results returned.</param>
        </member>
        <member name="M:Sansar.Simulation.ScenePrivate.CastCapsule(Sansar.Vector,Sansar.Vector,System.Single,Sansar.Quaternion,Sansar.Vector,Sansar.Vector)">
            <summary>Casts a capsule from start to end and returns an array of collisions along the path.
            </summary>
            
            
            
            
            
            
            
            <remarks>If the radius and capsule length are less than <see cref='F:Sansar.Simulation.ScenePrivate.MinimumCastRadius'/> the call will be forwarded to <see cref='M:CastRay'/> instead.
            </remarks>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsScene.h(146)</sourceLocation>
            <param name='capsuleStart'>The base point of the capsule.</param>
            <param name='capsuleEnd'>The end point of the capsule.</param>
            <param name='capsuleRadius'>The radius of the capsule to query.</param>
            <param name='orientation'>The orientation of the query shape.</param>
            <param name='start'>The initial point of the query.</param>
            <param name='end'>The end point of the query.</param>
        </member>
        <member name="M:Sansar.Simulation.ScenePrivate.CastCapsule(Sansar.Vector,Sansar.Vector,System.Single,Sansar.Vector,Sansar.Vector,System.Int32)">
            <summary>Casts a capsule from start to end and returns an array of collisions along the path.
            </summary>
            
            
            
            
            
            
            <remarks>If the radius and capsule length are less than <see cref='F:Sansar.Simulation.ScenePrivate.MinimumCastRadius'/> the call will be forwarded to <see cref='M:CastRay'/> instead.
            </remarks>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsScene.h(151)</sourceLocation>
            <param name='capsuleStart'>The base point of the capsule.</param>
            <param name='capsuleEnd'>The end point of the capsule.</param>
            <param name='capsuleRadius'>The radius of the capsule to query.</param>
            <param name='start'>The initial point of the query.</param>
            <param name='end'>The end point of the query.</param>
            <param name='maxHits'>Limit the number of results returned.</param>
        </member>
        <member name="M:Sansar.Simulation.ScenePrivate.CastCapsule(Sansar.Vector,Sansar.Vector,System.Single,Sansar.Vector,Sansar.Vector)">
            <summary>Casts a capsule from start to end and returns an array of collisions along the path.
            </summary>
            
            
            
            
            
            
            <remarks>If the radius and capsule length are less than <see cref='F:Sansar.Simulation.ScenePrivate.MinimumCastRadius'/> the call will be forwarded to <see cref='M:CastRay'/> instead.
            </remarks>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsScene.h(151)</sourceLocation>
            <param name='capsuleStart'>The base point of the capsule.</param>
            <param name='capsuleEnd'>The end point of the capsule.</param>
            <param name='capsuleRadius'>The radius of the capsule to query.</param>
            <param name='start'>The initial point of the query.</param>
            <param name='end'>The end point of the query.</param>
        </member>
        <member name="M:Sansar.Simulation.ScenePrivate.GetSphereClosestPoints(System.Single,Sansar.Vector,System.Single,System.Int32)">
            <summary>Extends a sphere with the given radius the maximum distance and returns any hits.
            </summary>
            
            
            
            
            <remarks>
            </remarks>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsScene.h(144)</sourceLocation>
            <param name='radius'>The radius of the sphere to query.</param>
            <param name='origin'>The center of the query.</param>
            <param name='maximumDistance'>the maximum distance from the origin to check.</param>
            <param name='maxHits'>Limit the number of results returned.</param>
        </member>
        <member name="M:Sansar.Simulation.ScenePrivate.GetSphereClosestPoints(System.Single,Sansar.Vector,System.Single)">
            <summary>Extends a sphere with the given radius the maximum distance and returns any hits.
            </summary>
            
            
            
            
            <remarks>
            </remarks>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsScene.h(144)</sourceLocation>
            <param name='radius'>The radius of the sphere to query.</param>
            <param name='origin'>The center of the query.</param>
            <param name='maximumDistance'>the maximum distance from the origin to check.</param>
        </member>
        <member name="M:Sansar.Simulation.ScenePrivate.GetBoxClosestPoints(Sansar.Vector,Sansar.Vector,Sansar.Quaternion,System.Single,System.Int32)">
            <summary>Extends a box with the given half extents the maximum distance and returns any hits.
            </summary>
            
            
            
            
            
            <remarks>
            </remarks>
            <returns>An array of hit results, ordered from nearest to furthest. If the cast did not hit anything the array will be empty.</returns>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsScene.h(147)</sourceLocation>
            <param name='halfExtents'>The x,y,z distance from the center of the box to the corresponding face.</param>
            <param name='origin'>The center of the query.</param>
            <param name='orientation'>The orientation of the query shape.</param>
            <param name='maximumDistance'>the maximum distance from the origin to check.</param>
            <param name='maxHits'>Limit the number of results returned.</param>
        </member>
        <member name="M:Sansar.Simulation.ScenePrivate.GetBoxClosestPoints(Sansar.Vector,Sansar.Vector,Sansar.Quaternion,System.Single)">
            <summary>Extends a box with the given half extents the maximum distance and returns any hits.
            </summary>
            
            
            
            
            
            <remarks>
            </remarks>
            <returns>An array of hit results, ordered from nearest to furthest. If the cast did not hit anything the array will be empty.</returns>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsScene.h(147)</sourceLocation>
            <param name='halfExtents'>The x,y,z distance from the center of the box to the corresponding face.</param>
            <param name='origin'>The center of the query.</param>
            <param name='orientation'>The orientation of the query shape.</param>
            <param name='maximumDistance'>the maximum distance from the origin to check.</param>
        </member>
        <member name="M:Sansar.Simulation.ScenePrivate.GetBoxClosestPoints(Sansar.Vector,Sansar.Vector,System.Single,System.Int32)">
            <summary>Extends a box with the given half extents the maximum distance and returns any hits.
            </summary>
            
            
            
            
            <remarks>
            </remarks>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsScene.h(152)</sourceLocation>
            <param name='halfExtents'>The x,y,z distance from the center of the box to the corresponding face.</param>
            <param name='origin'>The center of the query.</param>
            <param name='maximumDistance'>the maximum distance from the origin to check.</param>
            <param name='maxHits'>Limit the number of results returned.</param>
        </member>
        <member name="M:Sansar.Simulation.ScenePrivate.GetBoxClosestPoints(Sansar.Vector,Sansar.Vector,System.Single)">
            <summary>Extends a box with the given half extents the maximum distance and returns any hits.
            </summary>
            
            
            
            
            <remarks>
            </remarks>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsScene.h(152)</sourceLocation>
            <param name='halfExtents'>The x,y,z distance from the center of the box to the corresponding face.</param>
            <param name='origin'>The center of the query.</param>
            <param name='maximumDistance'>the maximum distance from the origin to check.</param>
        </member>
        <member name="M:Sansar.Simulation.ScenePrivate.GetCapsuleClosestPoints(Sansar.Vector,Sansar.Vector,System.Single,Sansar.Vector,Sansar.Quaternion,System.Single,System.Int32)">
            <summary>Extends a capsule with the given parameters the maximum distance and returns any hits.
            </summary>
            
            
            
            
            
            
            
            <remarks>
            </remarks>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsScene.h(148)</sourceLocation>
            <param name='capsuleStart'>The base point of the capsule.</param>
            <param name='capsuleEnd'>The end point of the capsule.</param>
            <param name='capsuleRadius'>The radius of the capsule to query.</param>
            <param name='origin'>The base of the capsule.</param>
            <param name='orientation'>The orientation of the query shape.</param>
            <param name='maximumDistance'>the maximum distance from the origin to check.</param>
            <param name='maxHits'>Limit the number of results returned.</param>
        </member>
        <member name="M:Sansar.Simulation.ScenePrivate.GetCapsuleClosestPoints(Sansar.Vector,Sansar.Vector,System.Single,Sansar.Vector,Sansar.Quaternion,System.Single)">
            <summary>Extends a capsule with the given parameters the maximum distance and returns any hits.
            </summary>
            
            
            
            
            
            
            
            <remarks>
            </remarks>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsScene.h(148)</sourceLocation>
            <param name='capsuleStart'>The base point of the capsule.</param>
            <param name='capsuleEnd'>The end point of the capsule.</param>
            <param name='capsuleRadius'>The radius of the capsule to query.</param>
            <param name='origin'>The base of the capsule.</param>
            <param name='orientation'>The orientation of the query shape.</param>
            <param name='maximumDistance'>the maximum distance from the origin to check.</param>
        </member>
        <member name="M:Sansar.Simulation.ScenePrivate.GetCapsuleClosestPoints(Sansar.Vector,Sansar.Vector,System.Single,Sansar.Vector,System.Single,System.Int32)">
            <summary>Extends a capsule with the given parameters the maximum distance and returns any hits.
            </summary>
            
            
            
            
            
            
            <remarks>
            </remarks>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsScene.h(153)</sourceLocation>
            <param name='capsuleStart'>The base point of the capsule.</param>
            <param name='capsuleEnd'>The end point of the capsule.</param>
            <param name='capsuleRadius'>The radius of the capsule to query.</param>
            <param name='origin'>The base of the capsule.</param>
            <param name='maximumDistance'>the maximum distance from the origin to check.</param>
            <param name='maxHits'>Limit the number of results returned.</param>
        </member>
        <member name="M:Sansar.Simulation.ScenePrivate.GetCapsuleClosestPoints(Sansar.Vector,Sansar.Vector,System.Single,Sansar.Vector,System.Single)">
            <summary>Extends a capsule with the given parameters the maximum distance and returns any hits.
            </summary>
            
            
            
            
            
            
            <remarks>
            </remarks>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsScene.h(153)</sourceLocation>
            <param name='capsuleStart'>The base point of the capsule.</param>
            <param name='capsuleEnd'>The end point of the capsule.</param>
            <param name='capsuleRadius'>The radius of the capsule to query.</param>
            <param name='origin'>The base of the capsule.</param>
            <param name='maximumDistance'>the maximum distance from the origin to check.</param>
        </member>
        <member name="M:Sansar.Simulation.ScenePrivate.ToString">
            <summary> A string representation of this object. </summary> <returns>A string representation of this object.</returns> <remarks>The format of this string may change between releases.</remarks>
        </member>
        <member name="M:Sansar.Simulation.ScenePrivate.FindReflective``1(System.String)">
            <summary>
            Looks up Reflective objects in the scene that match the interface type by class name.
            </summary>
            <param name="name">The type name of the object's class to find.</param>
            <typeparam name="TInterface">The interface type to find.</typeparam>
            <returns>An IEnumerable which contains all objects of the given type name that match the given interface.</returns>
            <remarks>The name given corresponds to the <see cref="P:Type.FullName"/> of the object. Multiple scripts may define unrelated types of the same name, but only registered objects that match the interface of TInterface will be returned.</remarks>
        </member>
        <member name="M:Sansar.Simulation.ScenePrivate.OverrideMediaSource(System.String)">
            <summary>Sets stream channel source.</summary>
            <param name='url'>URL to use.</param>
        </member>
        <member name="M:Sansar.Simulation.ScenePrivate.VoiceBroadcastStart(Sansar.Simulation.AgentPrivate)">
            <summary>Start broadcasting agent's voice to the voice broadcast channel.</summary><sourceLocation>C:\p4\editworld\Code\App\Libraries\SimulationScriptApi/CsScene.h(163)</sourceLocation>
            <remarks>Plays for all agents in this scene.</remarks>
            
            <param name='agent'>Agent to broadcast.</param>
        </member>
        <member name="M:Sansar.Simulation.ScenePrivate.VoiceBroadcastStop(Sansar.Simulation.AgentPrivate)">
            <summary>Stop broadcasting agent's voice to voice broadcast channel.</summary><sourceLocation>C:\p4\editworld\Code\App\Libraries\SimulationScriptApi/CsScene.h(168)</sourceLocation>
            <remarks>Stops for all agents in this scene.</remarks>
            
            <param name='agent'>Agent to stop broadcasting.</param>
        </member>
        <member name="M:Sansar.Simulation.ScenePrivate.VoiceBroadcastStopAll">
            <summary>Stop broadcasting all voices to voice broadcast channel.</summary><sourceLocation>C:\p4\editworld\Code\App\Libraries\SimulationScriptApi/CsScene.h(172)</sourceLocation>
            <remarks>Stops for all agents in this scene.</remarks>
        </member>
        <member name="M:Sansar.Simulation.ScenePrivate.OverrideAudioStream(System.String)">
            <summary>Overrides source of web audio streams.</summary><sourceLocation>$sourceLocation$</sourceLocation>
            <remarks>Applies to all agents in this scene.  NOTE: this may cause a few seconds of silence while restarting the stream.  To avoid silence, assign URLs in your SceneSettings instead, which will pre-load them.</remarks>
            <param name='url'>URL to use.</param>
        </member>
        <member name="M:Sansar.Simulation.ScenePrivate.OverrideMediaSource(System.String,System.Int32,System.Int32)">
            <summary>Overrides source of media surfaces.</summary><sourceLocation>C:\Source\ServerScript\Code\App\Libraries\SimulationScriptApi/CsAgent.h(136)</sourceLocation>
            <remarks>Applies to all agents in this scene.  NOTE: this will cause a few seconds of silence while restarting starting the stream.  To avoid silence, assign URLs in your SceneSettings instead, which will pre-load them.</remarks>
            <param name='url'>URL to use.</param>
            <param name='mediaWidth'>(cMediaChannel only) source width.</param>
            <param name='mediaHeight'>(cMediaChannel only) source height.</param>
        </member>
        <member name="M:Sansar.Simulation.ScenePrivate.PerformMediaAction(Sansar.Simulation.MediaAction)">
            <summary>Performs a specific action on the current media surface.</summary><sourceLocation>D:\p4\ftue\Code\App\Libraries\SimulationScriptApi/CsAgent.h(145)</sourceLocation>
            <remarks>Applies to this agent only.</remarks>
            
            <param name='action'>The action to perform.</param>
        </member>
        <member name="M:Sansar.Simulation.ScenePrivate.CreateCluster(Sansar.Simulation.ClusterResource,Sansar.Vector,Sansar.Quaternion,Sansar.Vector)">
            <summary>
            Creates a new cluster and adds it to the Scene.
            </summary>
            <returns>The internal event id for the completion event.</returns><sourceLocation>C:\Source\ServerScript\Code\App\Libraries\SimulationScriptApi/CsScene.h(165)</sourceLocation>
            <remarks>The new object may start simulating before the event is triggered.</remarks>
            <param name='asset'>Asset identifier to create.</param>
            <param name='position'>Mono.Simd.Vector4f for the initial position.</param>
            <param name='rotation'>Mono.Simd.Vector4f for the initial rotation.</param>
            <param name='initialVelocity'>Mono.Simd.Vector4f for the initial velocity.</param>
        </member>
        <member name="T:Sansar.Simulation.ScenePrivate.CreateClusterHandler">
            <summary>Handler for CreateCluster</summary><remarks/>
            <param name='Success'>Indicates if the operation was successful</param>
            <param name='Message'>Additional information about the result, usually null or empty if Success is true.</param>
            <param name='ClusterReference'><summary>The cluster object which was created as a result of the create call.</summary><remarks>Will be null if Success is false.</remarks><value></value></param>
        </member>
        <member name="M:Sansar.Simulation.ScenePrivate.CreateCluster(Sansar.Simulation.ClusterResource,Sansar.Vector,Sansar.Quaternion,Sansar.Vector,Sansar.Simulation.ScenePrivate.CreateClusterHandler)">
             <summary>
             Creates a new cluster and adds it to the Scene.
             </summary>
            
            
            
            
             <returns>The internal event id for the completion event.</returns><sourceLocation>C:\p\Sansar\SharedBranches\ServerScript\Code\App\Libraries\SimulationScriptApi/CsScene.h(168)</sourceLocation>
             <remarks>The new object may start simulating before the event is triggered.</remarks>
            
             <param name='asset'>Asset identifier to create.</param>
             <param name='position'>Mono.Simd.Vector4f for the initial position.</param>
             <param name='rotation'>Mono.Simd.Vector4f for the initial rotation.</param>
             <param name='initialVelocity'>Mono.Simd.Vector4f for the initial velocity.</param>
             <param name='handler'>Handler to be called when the event completes.</param>
        </member>
        <member name="M:Sansar.Simulation.ScenePrivate.SetGravity(System.Single,Sansar.Script.ScriptBase.OperationComplete)">
             <summary>Sets the scene's current gravity acceleration in m/s^2.</summary>
            
             <remarks>Set to <see cref='P:Sansar.Simulation.ScenePrivate.DefaultGravity'/> to return to the default. The valid range is from <see cref='F:Sansar.Simulation.ScenePrivate.GravityMinimum'/> to <see cref='F:Sansar.Simulation.ScenePrivate.GravityMaximum'/>. The direction cannot be changed.</remarks>
             <sourceLocation>C:\p\Sansar\SharedBranches\ServerScript\Code\App\Libraries\SimulationScriptApi/CsScene.h(191)</sourceLocation>
             <value>The return value is an internal event id which can be passed to <see cref='M:Sansar.Script.ScriptBase.WaitFor' /> from a coroutine for synchronous behavior.</value>
             <example><code lang='C#'>ScenePrivate.SetGravity(1.622f); // Set the scene to moon gravity</code></example>
             <remarks>See GravityExample.cs in the Examples folder for more details.</remarks>
             <param name='scale'>The gravity magnitude.</param>
             <param name='handler'>Handler to be called when the event completes.</param>
        </member>
        <member name="T:Sansar.Simulation.DataStore">
            <summary>
            The <see cref="T:Sansar.Simulation.DataStore"/> class provides access to a persistent data store that can be accessed by scripts from any experience.
            </summary>
            <remarks>All <see cref="T:Sansar.Simulation.DataStore"/> objects with a given <see cref="P:Sansar.Simulation.DataStore.Id"/> share the same database.</remarks>
        </member>
        <member name="P:Sansar.Simulation.DataStore.Id">
            <summary>
            The Id of this <see cref="T:Sansar.Simulation.DataStore"/>.
            </summary>
            <remarks>All <see cref="T:Sansar.Simulation.DataStore"/> objects with a given <see cref="P:Sansar.Simulation.DataStore.Id"/> share the same database.</remarks>
        </member>
        <member name="T:Sansar.Simulation.DataStore.Result`1">
            <summary>Holds the result of operations on a <see cref="T:Sansar.Simulation.DataStore"/>.</summary>
            <remarks>Properties used my depend on the method called and options.
            The type used must be able to be serialized with the <see cref="T:Sansar.Utility.JsonSerializer"/>.</remarks>
            <typeparam name="T">The type of the result.</typeparam>
        </member>
        <member name="P:Sansar.Simulation.DataStore.Result`1.Version">
            <summary>Version of the value for the key used for this operation.</summary>
            <remarks>Each write to a given key will update this value, even if the same value is written. To ensure that one script is not clobbering writes
            by another script the <see cref="F:Sansar.Simulation.DataStore.Options.Version"/> can verify that the data has not changed.</remarks>
            <value>An integer version number for the data in the store.</value>
        </member>
        <member name="M:Sansar.Simulation.DataStore.Result`1.ToString">
            <summary> A string representation of this object. </summary> <returns>A string representation of this object.</returns> <remarks>The format of this string may change between releases.</remarks>
        </member>
        <member name="M:Sansar.Simulation.DataStore.Store``1(System.String,``0,Sansar.Simulation.DataStore.Options,System.Action{Sansar.Simulation.DataStore.Result{``0}})">
            <summary>
            Serializes the given object to the data store
            </summary>
            <param name="key">The key to save the data under.</param>
            <param name="value">The object to be converted.</param>
            <param name="options">Controls how the operation proceeds.</param>
            <param name="done">The action to call when the conversion is complete.</param>
            <remarks><see cref="F:Sansar.Simulation.DataStore.Options.Version"/> can be specified to conditionally store only if the version matches. If the version number does not match, <see cref="T:Sansar.Simulation.DataStore.Result`1"/> will have Success == false and the current value in the Version and Object fields.
            If <see cref="F:Sansar.Simulation.DataStore.Options.RetrieveData"/> false and the write is successful, the response will not include the value written to the store and will simply pass back the value parameter. 
            </remarks>
        </member>
        <member name="M:Sansar.Simulation.DataStore.Store``1(System.String,``0,System.Action{Sansar.Simulation.DataStore.Result{``0}})">
            <summary>
            Serializes the given object to the data store
            </summary>
            <param name="key">The key to store the data under.</param>
            <param name="value">The object to be converted</param>
            <param name="done">The action to call when the store is complete.</param>
            <remarks>The specified key and value will always overwrite any existing data in the store. For a conditional store, 
            use <see cref="M:Sansar.Simulation.DataStore.Store``1(System.String,``0,Sansar.Simulation.DataStore.Options,System.Action{Sansar.Simulation.DataStore.Result{``0}})"/> with <see cref="F:Sansar.Simulation.DataStore.Options.Version"/> set to a value from a previous operation.</remarks>
        </member>
        <member name="M:Sansar.Simulation.DataStore.Restore``1(System.String,System.Action{Sansar.Simulation.DataStore.Result{``0}})">
            <summary>
            Retrieves the value associated with the given key.
            </summary>
            <typeparam name="T">The type of the data stored.</typeparam>
            <param name="key">They key the data is stored under.</param>
            <param name="done">The action to call when the restore is complete.</param>
            <remarks>If the done action is null, this method will fail without making a call to the data store.</remarks>
        </member>
        <member name="M:Sansar.Simulation.DataStore.Delete``1(System.String,Sansar.Simulation.DataStore.Options,System.Action{Sansar.Simulation.DataStore.Result{``0}})">
            <summary>
            Deletes the value associated with the given key
            </summary>
            <typeparam name="T">The type of the data stored.</typeparam>
            <param name="key">They key the data is stored under.</param>
            <param name="done">The action to call when the delete is complete.</param>
            <param name="options">Controls how the operation proceeds.</param>
            <remarks><see cref="F:Sansar.Simulation.DataStore.Options.Version"/> can be specified to conditionally delete only if the version matches. If the version number does not match, <see cref="T:Sansar.Simulation.DataStore.Result`1"/> will have Success == false and the current value in the Version and Object fields.
            </remarks>
        </member>
        <member name="M:Sansar.Simulation.DataStore.Delete(System.String,System.Action{Sansar.Script.OperationCompleteEvent})">
            <summary>
            Deletes the value associated with the given key
            </summary>
            <param name="key">They key the data is stored under.</param>
            <param name="done">The action to call when the delete is complete.</param>
            <remarks>Unconditionally deletes the value associated with the given key. For a conditional delete, use <see cref="M:Sansar.Simulation.DataStore.Delete``1(System.String,Sansar.Simulation.DataStore.Options,System.Action{Sansar.Simulation.DataStore.Result{``0}})"/>.</remarks>
        </member>
        <member name="T:Sansar.Simulation.DataStore.Options">
            <summary>
            Controls how various <see cref="T:Sansar.Simulation.DataStore"/> operations proceed.
            </summary>
        </member>
        <member name="F:Sansar.Simulation.DataStore.Options.Version">
            <summary>
            When set, DataStore.Store and DataStore.Delete 
            will only proceed if the version of the data in the store matches this value. If the version does not match then the existing value and version will be returned.
            </summary>
        </member>
        <member name="F:Sansar.Simulation.DataStore.Options.SerializerOptions">
            <summary>
            Options to control json serialization
            </summary>
        </member>
        <member name="F:Sansar.Simulation.DataStore.Options.RetrieveData">
            <summary>
            DataStore.Store and DataStore.Delete will retrieve the existing data if this value is true, or if <see cref="F:Sansar.Simulation.DataStore.Options.Version"/> is set and is not matched.
            Leaving this false will provide quicker responses and the value does not need to be returned or parsed.
            </summary>
        </member>
        <member name="T:Sansar.Simulation.ClusterId">
            <summary>
            Encapsulates an Cluster Id.
            </summary><remarks/>
        </member>
        <member name="M:Sansar.Simulation.ClusterId.op_Implicit(System.UInt32)~Sansar.Simulation.ClusterId">
            <summary>
            Internal explicit conversion from a uint.
            </summary>
            <param name="id">A uint representation of an ClusterId</param><remarks/><value/>
        </member>
        <member name="M:Sansar.Simulation.ClusterId.Equals(System.Object)">
            <summary>
            Value comparison for ClusterId.
            </summary>
            <param name="obj">The object to compare.</param>
            <returns>true if the argument is an ClusterId and has the same value.</returns><remarks/>
        </member>
        <member name="M:Sansar.Simulation.ClusterId.GetHashCode">
            <summary>
            Retrieves the hash code for this instance.
            </summary>
            <returns>The hash code for this instance.</returns><remarks/>
        </member>
        <member name="M:Sansar.Simulation.ClusterId.op_Equality(Sansar.Simulation.ClusterId,Sansar.Simulation.ClusterId)">
            <summary>
            ClusterId equality operator.
            </summary>
            <param name="a">First ClusterId to compare.</param>
            <param name="b">Second ClusterId to compare.</param>
            <returns>true if the ClusterIds have the same value.</returns><remarks/>
        </member>
        <member name="M:Sansar.Simulation.ClusterId.op_Inequality(Sansar.Simulation.ClusterId,Sansar.Simulation.ClusterId)">
            <summary>
            ClusterId inequality operator.
            </summary>
            <param name="a">First ClusterId to compare.</param>
            <param name="b">Second ClusterId to compare.</param>
            <returns>true if the ClusterIds have a different value.</returns><remarks/>
        </member>
        <member name="M:Sansar.Simulation.ClusterId.ToString">
            <summary>
            Converts the id to a hexadecimal string representation. 
            </summary>
            <returns>The hexadecimal string representation.</returns><remarks/>
        </member>
        <member name="F:Sansar.Simulation.ClusterId.Invalid">
            <summary>
            The invalid id object.
            </summary><remarks/>
        </member>
        <member name="T:Sansar.Simulation.User">
            <summary>The User class handles interactions user logins and logoffs.</summary>
            <remarks></remarks><sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsUser.h(28)</sourceLocation>
        </member>
        <member name="T:Sansar.Simulation.User.SubscriptionHandler">
            <summary>Subscribe to receive events when users enter or leave the experience, or change their chat name.</summary><sourceLocation>C:\linden\p\Sansar\SharedBranches\ServerScript\Code\App\Libraries\SimulationScriptApi/User.h(52)</sourceLocation><remarks/>
            <param name='Action'> string action of the event: AddUser, RemoveUser</param>
            <param name='User'> Sansar.Script.SessionId for the user.</param>
            <param name='Data'> Deprecated. </param>
        </member>
        <member name="M:Sansar.Simulation.User.Subscribe(System.String,Sansar.Script.SessionId,Sansar.Simulation.User.SubscriptionHandler,System.Boolean)">
            <summary>Subscribes to User Events.</summary><sourceLocation>DistributeEvent::writeSubscribe line 198</sourceLocation><remarks/>
            <param name='Action'> string action of the event: AddUser, RemoveUser</param>
            <param name='User'> Sansar.Script.SessionId for the user.</param>
            <param name='callback'>Callback which is executed when the event completes.</param>
            <param name='persistent'>Optional, set to false to unsubscribe after one event.</param>
        </member>
        <member name="M:Sansar.Simulation.User.Subscribe(System.String,Sansar.Simulation.User.SubscriptionHandler,System.Boolean)">
            <summary>Subscribes to User Events.</summary><sourceLocation>DistributeEvent::writeSubscribe line 198</sourceLocation><remarks/>
            <param name='Action'> string action of the event: AddUser, RemoveUser</param>
            <param name='callback'>Callback which is executed when the event completes.</param>
            <param name='persistent'>Optional, set to false to unsubscribe after one event.</param>
        </member>
        <member name="F:Sansar.Simulation.User.AddUser">
            <summary>
            For subscribing to events for users entering the scene
            </summary><remarks/>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsUser.h(41)</sourceLocation>
        </member>
        <member name="F:Sansar.Simulation.User.RemoveUser">
            <summary>
            For subscribing to events for users leaving the scene
            </summary><remarks/>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsUser.h(46)</sourceLocation>
        </member>
        <member name="M:Sansar.Simulation.User.Subscribe(System.String,Sansar.Script.SessionId,System.Action{Sansar.Simulation.UserData},System.Boolean)">
            <summary>Subscribes to User Events.</summary><sourceLocation>DistributeEvent::writeSubscribe line 180</sourceLocation><remarks /><returns>An <see cref='T:Sansar.Script.IEventSubscription' /> that can be used to cancel the subscription.</returns><seealso cref='T:Sansar.Simulation.UserData'/><seealso cref='T:Sansar.Script.IEventSubscription'/>
            <param name='Action'> string action of the event: AddUser, RemoveUser</param>
            <param name='User'> Sansar.Script.SessionId for the user.</param>
            <param name='callback'>Callback which is executed when the event completes.</param>
            <param name='persistent'>Optional, set to false to unsubscribe after one event.</param>
        </member>
        <member name="M:Sansar.Simulation.User.Subscribe(System.String,System.Action{Sansar.Simulation.UserData},System.Boolean)">
            <summary>Subscribes to User Events.</summary><sourceLocation>DistributeEvent::writeSubscribe line 180</sourceLocation><remarks /><returns>An <see cref='T:Sansar.Script.IEventSubscription' /> that can be used to cancel the subscription.</returns><seealso cref='T:Sansar.Simulation.UserData'/><seealso cref='T:Sansar.Script.IEventSubscription'/>
            <param name='Action'> string action of the event: AddUser, RemoveUser</param>
            <param name='callback'>Callback which is executed when the event completes.</param>
            <param name='persistent'>Optional, set to false to unsubscribe after one event.</param>
        </member>
        <member name="T:Sansar.Simulation.RigidBodyComponent">
            <summary>The RigidBodyComponent handles interactions with rigid body physics.</summary><sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsRigidBodyComponent.h(158)</sourceLocation><remarks/>
        </member>
        <member name="T:Sansar.Simulation.RigidBodyComponent.SubscriptionHandler">
            <summary>Handler for rigid body events.</summary><sourceLocation>C:\linden\p\Sansar\SharedBranches\ServerScript\Code\App\Libraries\SimulationScriptApi/RigidBodyComponent.h(210)</sourceLocation><remarks/>
            <param name='EventType'> The type of collision which occurred.</param>
            <param name='ComponentId'> The id of the rigid body component.</param>
            <param name='HitComponentId'> The id of the rigid body component or character that was hit.</param>
            <param name='HitObject'> The <see cref='T:Sansar.Simulation.ObjectPublic'/> that was hit.</param>
            <param name='Phase'> used by trigger events to determine if trigger enter or exit occurred</param>
            <param name='HitControlPoint'> The specific control point hit, if any</param>
        </member>
        <member name="M:Sansar.Simulation.RigidBodyComponent.Subscribe(Sansar.Simulation.CollisionEventType,Sansar.Script.ComponentId,Sansar.Simulation.RigidBodyComponent.SubscriptionHandler,System.Boolean)">
            <summary>Subscribes to Collision Events.</summary><sourceLocation>DistributeEvent::writeSubscribe line 198</sourceLocation><remarks/>
            <param name='EventType'> The type of collision which occurred.</param>
            <param name='HitComponentId'> The id of the rigid body component or character that was hit.</param>
            <param name='callback'>Callback which is executed when the event completes.</param>
            <param name='persistent'>Optional, set to false to unsubscribe after one event.</param>
        </member>
        <member name="M:Sansar.Simulation.RigidBodyComponent.Subscribe(Sansar.Simulation.CollisionEventType,Sansar.Simulation.RigidBodyComponent.SubscriptionHandler,System.Boolean)">
            <summary>Subscribes to Collision Events.</summary><sourceLocation>DistributeEvent::writeSubscribe line 198</sourceLocation><remarks/>
            <param name='EventType'> The type of collision which occurred.</param>
            <param name='callback'>Callback which is executed when the event completes.</param>
            <param name='persistent'>Optional, set to false to unsubscribe after one event.</param>
        </member>
        <member name="M:Sansar.Simulation.RigidBodyComponent.IsDynamic">
            <summary>Whether this rigidbody is dynamic.</summary>
            <returns>True if this is a dynamic object.</returns>
            <sourceLocation>$sourceLocation$</sourceLocation>
            <remarks>Deprecated. Use GetMotionType() instead.</remarks>
        </member>
        <member name="M:Sansar.Simulation.RigidBodyComponent.SetOrientation(Sansar.Vector)">
            <summary>Sets the orientation of this $className$.</summary>
            <param name='orientation'>The orientation.</param>
            <sourceLocation>$sourceLocation$</sourceLocation>
            <remarks>Deprecated. Use SetOrientation(Quaternion) instead.</remarks>
            <value>The return value is an internal event id.</value>
        </member>
        <member name="M:Sansar.Simulation.RigidBodyComponent.SetOrientation(Sansar.Vector,Sansar.Script.ScriptBase.OperationComplete)">
            <summary>Sets the orientation of this $className$.</summary>
            <param name='orientation'>The orientation.</param>
            <param name='handler'>Handler to be called when the event completes.</param>
            <sourceLocation>$sourceLocation$</sourceLocation>
            <remarks>Deprecated. Use SetOrientation(Quaternion) instead.</remarks>
            <value>The return value is an internal event id.</value>
        </member>
        <member name="M:Sansar.Simulation.RigidBodyComponent.SetOrientation(Sansar.Vector,System.Action{Sansar.Script.OperationCompleteEvent})">
            <summary>Sets the orientation of this $className$.</summary>
            <param name='orientation'>The orientation.</param>
            <param name='handler'>Handler to be called when the event completes.</param>
            <sourceLocation>$sourceLocation$</sourceLocation>
            <remarks>Deprecated. Use SetOrientation(Quaternion) instead.</remarks>
            <value>The return value is an internal event id.</value>
        </member>
        <member name="F:Sansar.Simulation.RigidBodyComponent.ComponentType">
            <summary>The <see cref='F:Sansar.Simulation.RigidBodyComponent.ComponentType' /> of this component</summary>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsRigidBodyComponent.h(164)</sourceLocation>
            <remarks></remarks>
        </member>
        <member name="P:Sansar.Simulation.RigidBodyComponent.ComponentId">
            <summary>Retrieves the component id for this RigidBodyComponent.</summary>
            <returns>The id.</returns>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsRigidBodyComponent.h(175)</sourceLocation><remarks/>
        </member>
        <member name="P:Sansar.Simulation.RigidBodyComponent.Name">
            <summary>This RigidBodyComponent name, as specified in the editor.</summary><sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsRigidBodyComponent.h(183)</sourceLocation>
            <remarks></remarks>
            <value></value>
        </member>
        <member name="M:Sansar.Simulation.RigidBodyComponent.Subscribe(Sansar.Simulation.CollisionEventType,Sansar.Script.ComponentId,System.Action{Sansar.Simulation.CollisionData},System.Boolean)">
            <summary>Subscribes to Collision Events.</summary><sourceLocation>DistributeEvent::writeSubscribe line 180</sourceLocation><remarks /><returns>An <see cref='T:Sansar.Script.IEventSubscription' /> that can be used to cancel the subscription.</returns><seealso cref='T:Sansar.Simulation.CollisionData'/><seealso cref='T:Sansar.Script.IEventSubscription'/>
            <param name='EventType'> The type of collision which occurred.</param>
            <param name='HitComponentId'> The id of the rigid body component or character that was hit.</param>
            <param name='callback'>Callback which is executed when the event completes.</param>
            <param name='persistent'>Optional, set to false to unsubscribe after one event.</param>
        </member>
        <member name="M:Sansar.Simulation.RigidBodyComponent.Subscribe(Sansar.Simulation.CollisionEventType,System.Action{Sansar.Simulation.CollisionData},System.Boolean)">
            <summary>Subscribes to Collision Events.</summary><sourceLocation>DistributeEvent::writeSubscribe line 180</sourceLocation><remarks /><returns>An <see cref='T:Sansar.Script.IEventSubscription' /> that can be used to cancel the subscription.</returns><seealso cref='T:Sansar.Simulation.CollisionData'/><seealso cref='T:Sansar.Script.IEventSubscription'/>
            <param name='EventType'> The type of collision which occurred.</param>
            <param name='callback'>Callback which is executed when the event completes.</param>
            <param name='persistent'>Optional, set to false to unsubscribe after one event.</param>
        </member>
        <member name="M:Sansar.Simulation.RigidBodyComponent.SubscribeToHeldObject(Sansar.Simulation.HeldObjectEventType,System.Action{Sansar.Simulation.HeldObjectData},System.Boolean)">
            <summary>Subscribes to HeldObject Events.</summary><sourceLocation>DistributeEvent::writeSubscribe line 180</sourceLocation><remarks /><returns>An <see cref='T:Sansar.Script.IEventSubscription' /> that can be used to cancel the subscription.</returns><seealso cref='T:Sansar.Simulation.HeldObjectData'/><seealso cref='T:Sansar.Script.IEventSubscription'/>
            <param name='HeldObjectEvent'> The type of held object event which occurred.</param>
            <param name='callback'>Callback which is executed when the event completes.</param>
            <param name='persistent'>Optional, set to false to unsubscribe after one event.</param>
        </member>
        <member name="M:Sansar.Simulation.RigidBodyComponent.SubscribeToSitObject(Sansar.Simulation.SitEventType,System.Action{Sansar.Simulation.SitObjectData},System.Boolean)">
            <summary>Subscribes to SitObject Events.</summary><sourceLocation>DistributeEvent::writeSubscribe line 180</sourceLocation><remarks /><returns>An <see cref='T:Sansar.Script.IEventSubscription' /> that can be used to cancel the subscription.</returns><seealso cref='T:Sansar.Simulation.SitObjectData'/><seealso cref='T:Sansar.Script.IEventSubscription'/>
            <param name='SitObjectEvent'> The type of sit event which occurred.</param>
            <param name='callback'>Callback which is executed when the event completes.</param>
            <param name='persistent'>Optional, set to false to unsubscribe after one event.</param>
        </member>
        <member name="M:Sansar.Simulation.RigidBodyComponent.GetLinearVelocity">
            <summary>Retrieves the linear velocity for this RigidBodyComponent.</summary>
            <returns>The velocity.</returns>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsRigidBodyComponent.h(314)</sourceLocation><remarks/>
        </member>
        <member name="M:Sansar.Simulation.RigidBodyComponent.SetLinearVelocity(Sansar.Vector,System.Action{Sansar.Script.OperationCompleteEvent})">
            <summary>Sets the linear velocity for this RigidBodyComponent. Linear velocity is clamped between -200m/s and 200m/s.</summary>
            
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsRigidBodyComponent.h(322)</sourceLocation>
            <remarks>This asynchronous method queues the write then returns. Subsequent calls to <see cref='M:Sansar.Simulation.RigidBodyComponent.GetLinearVelocity' /> will return the previous velocity until the write occurs.
            To block until the write has occurred, pass this method to <see cref='M:Sansar.Script.ScriptBase.WaitFor' /> while in a coroutine.</remarks>
            <value>The return value is an internal event id.</value>
            <param name='velocity'>The velocity.</param>
            <param name='handler'>Handler to be called when the event completes.</param>
        </member>
        <member name="M:Sansar.Simulation.RigidBodyComponent.SetLinearVelocity(Sansar.Vector)">
            <summary>Sets the linear velocity for this RigidBodyComponent. Linear velocity is clamped between -200m/s and 200m/s.</summary>
            
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsRigidBodyComponent.h(322)</sourceLocation>
            <remarks>This asynchronous method queues the write then returns. Subsequent calls to <see cref='M:Sansar.Simulation.RigidBodyComponent.GetLinearVelocity' /> will return the previous velocity until the write occurs.
            To block until the write has occurred, pass this method to <see cref='M:Sansar.Script.ScriptBase.WaitFor' /> while in a coroutine.</remarks>
            <value>The return value is an internal event id.</value>
            <param name='velocity'>The velocity.</param>
        </member>
        <member name="M:Sansar.Simulation.RigidBodyComponent.GetAngularVelocity">
            <summary>Retrieves the angular velocity for this RigidBodyComponent.</summary>
            <returns>The velocity.</returns>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsRigidBodyComponent.h(337)</sourceLocation><remarks/>
        </member>
        <member name="M:Sansar.Simulation.RigidBodyComponent.SetAngularVelocity(Sansar.Vector,System.Action{Sansar.Script.OperationCompleteEvent})">
            <summary>Sets the angular velocity for this RigidBodyComponent. Angular velocity is clamped between -100m/s and 100m/s.</summary>
            
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsRigidBodyComponent.h(331)</sourceLocation>
            <remarks>This asynchronous method queues the write then returns. Subsequent calls to <see cref='M:Sansar.Simulation.RigidBodyComponent.GetAngularVelocity' /> will return the previous velocity until the write occurs.
            To block until the write has occurred, pass this method to <see cref='M:Sansar.Script.ScriptBase.WaitFor' /> while in a coroutine.</remarks>
            <value>The return value is an internal event id.</value>
            <param name='velocity'>The velocity.</param>
            <param name='handler'>Handler to be called when the event completes.</param>
        </member>
        <member name="M:Sansar.Simulation.RigidBodyComponent.SetAngularVelocity(Sansar.Vector)">
            <summary>Sets the angular velocity for this RigidBodyComponent. Angular velocity is clamped between -100m/s and 100m/s.</summary>
            
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsRigidBodyComponent.h(331)</sourceLocation>
            <remarks>This asynchronous method queues the write then returns. Subsequent calls to <see cref='M:Sansar.Simulation.RigidBodyComponent.GetAngularVelocity' /> will return the previous velocity until the write occurs.
            To block until the write has occurred, pass this method to <see cref='M:Sansar.Script.ScriptBase.WaitFor' /> while in a coroutine.</remarks>
            <value>The return value is an internal event id.</value>
            <param name='velocity'>The velocity.</param>
        </member>
        <member name="M:Sansar.Simulation.RigidBodyComponent.GetPosition">
            <summary>Retrieves the position of this RigidBodyComponent.</summary>
            <returns>The position.</returns>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsRigidBodyComponent.h(369)</sourceLocation><remarks/>
        </member>
        <member name="M:Sansar.Simulation.RigidBodyComponent.SetPosition(Sansar.Vector,System.Action{Sansar.Script.OperationCompleteEvent})">
            <summary>Sets the position of this RigidBodyComponent.</summary>
            
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsRigidBodyComponent.h(363)</sourceLocation>
            <remarks>This asynchronous method queues the write then returns.
            To block until the write has occurred, pass this method to <see cref='M:Sansar.Script.ScriptBase.WaitFor' /> while in a coroutine.</remarks>
            <value>The return value is an internal event id.</value>
            <param name='position'>The position.</param>
            <param name='handler'>Handler to be called when the event completes.</param>
        </member>
        <member name="M:Sansar.Simulation.RigidBodyComponent.SetPosition(Sansar.Vector)">
            <summary>Sets the position of this RigidBodyComponent.</summary>
            
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsRigidBodyComponent.h(363)</sourceLocation>
            <remarks>This asynchronous method queues the write then returns.
            To block until the write has occurred, pass this method to <see cref='M:Sansar.Script.ScriptBase.WaitFor' /> while in a coroutine.</remarks>
            <value>The return value is an internal event id.</value>
            <param name='position'>The position.</param>
        </member>
        <member name="M:Sansar.Simulation.RigidBodyComponent.GetOrientation">
            <summary>Retrieves the orientation of this RigidBodyComponent.</summary>
            <returns>The orientation.</returns>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsRigidBodyComponent.h(383)</sourceLocation><remarks/>
        </member>
        <member name="M:Sansar.Simulation.RigidBodyComponent.SetOrientation(Sansar.Quaternion,System.Action{Sansar.Script.OperationCompleteEvent})">
            <summary>Sets the orientation of this RigidBodyComponent.</summary>
            
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsRigidBodyComponent.h(377)</sourceLocation>
            <remarks>This asynchronous method queues the write then returns.
            To block until the write has occurred, pass this method to <see cref='M:Sansar.Script.ScriptBase.WaitFor' /> while in a coroutine.</remarks>
            <value>The return value is an internal event id.</value>
            <param name='orientation'>The orientation.</param>
            <param name='handler'>Handler to be called when the event completes.</param>
        </member>
        <member name="M:Sansar.Simulation.RigidBodyComponent.SetOrientation(Sansar.Quaternion)">
            <summary>Sets the orientation of this RigidBodyComponent.</summary>
            
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsRigidBodyComponent.h(377)</sourceLocation>
            <remarks>This asynchronous method queues the write then returns.
            To block until the write has occurred, pass this method to <see cref='M:Sansar.Script.ScriptBase.WaitFor' /> while in a coroutine.</remarks>
            <value>The return value is an internal event id.</value>
            <param name='orientation'>The orientation.</param>
        </member>
        <member name="M:Sansar.Simulation.RigidBodyComponent.GetMass">
            <summary>Retrieves the mass of this RigidBodyComponent.</summary>
            <returns>The mass.</returns>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsRigidBodyComponent.h(397)</sourceLocation><remarks/>
        </member>
        <member name="M:Sansar.Simulation.RigidBodyComponent.SetMass(System.Single,System.Action{Sansar.Script.OperationCompleteEvent})">
            <summary>Sets the mass of this RigidBodyComponent.</summary>
            
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsRigidBodyComponent.h(391)</sourceLocation>
            <remarks>This asynchronous method queues the write then returns.
            To block until the write has occurred, pass this method to <see cref='M:Sansar.Script.ScriptBase.WaitFor' /> while in a coroutine.</remarks>
            <value>The return value is an internal event id.</value>
            <param name='mass'>The mass.</param>
            <param name='handler'>Handler to be called when the event completes.</param>
        </member>
        <member name="M:Sansar.Simulation.RigidBodyComponent.SetMass(System.Single)">
            <summary>Sets the mass of this RigidBodyComponent.</summary>
            
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsRigidBodyComponent.h(391)</sourceLocation>
            <remarks>This asynchronous method queues the write then returns.
            To block until the write has occurred, pass this method to <see cref='M:Sansar.Script.ScriptBase.WaitFor' /> while in a coroutine.</remarks>
            <value>The return value is an internal event id.</value>
            <param name='mass'>The mass.</param>
        </member>
        <member name="M:Sansar.Simulation.RigidBodyComponent.GetBounce">
            <summary>Retrieves the bounce of this RigidBodyComponent.</summary>
            <returns>The bounce factor.</returns>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsRigidBodyComponent.h(411)</sourceLocation><remarks/>
        </member>
        <member name="M:Sansar.Simulation.RigidBodyComponent.SetBounce(System.Single,System.Action{Sansar.Script.OperationCompleteEvent})">
            <summary>Sets the bounce of this RigidBodyComponent.</summary>
            
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsRigidBodyComponent.h(405)</sourceLocation>
            <remarks>This asynchronous method queues the write then returns.
            To block until the write has occurred, pass this method to <see cref='M:Sansar.Script.ScriptBase.WaitFor' /> while in a coroutine.</remarks>
            <value>The return value is an internal event id.</value>
            <param name='bounce'>The bounce factor. Value should be between 0 and 1 (inclusive)</param>
            <param name='handler'>Handler to be called when the event completes.</param>
        </member>
        <member name="M:Sansar.Simulation.RigidBodyComponent.SetBounce(System.Single)">
            <summary>Sets the bounce of this RigidBodyComponent.</summary>
            
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsRigidBodyComponent.h(405)</sourceLocation>
            <remarks>This asynchronous method queues the write then returns.
            To block until the write has occurred, pass this method to <see cref='M:Sansar.Script.ScriptBase.WaitFor' /> while in a coroutine.</remarks>
            <value>The return value is an internal event id.</value>
            <param name='bounce'>The bounce factor. Value should be between 0 and 1 (inclusive)</param>
        </member>
        <member name="M:Sansar.Simulation.RigidBodyComponent.GetDynamicFriction">
            <summary>Retrieves the dynamic friction of this RigidBodyComponent.</summary>
            <returns>The dynamic friction.</returns>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsRigidBodyComponent.h(425)</sourceLocation><remarks/>
        </member>
        <member name="M:Sansar.Simulation.RigidBodyComponent.SetDynamicFriction(System.Single,System.Action{Sansar.Script.OperationCompleteEvent})">
            <summary>Sets the dynamic friction of this RigidBodyComponent.</summary>
            
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsRigidBodyComponent.h(419)</sourceLocation>
            <remarks>This asynchronous method queues the write then returns.
            To block until the write has occurred, pass this method to <see cref='M:Sansar.Script.ScriptBase.WaitFor' /> while in a coroutine.</remarks>
            <value>The return value is an internal event id.</value>
            <param name='dynamicFriction'>The dynamic friction. Value should be between 0 and 1 (inclusive)</param>
            <param name='handler'>Handler to be called when the event completes.</param>
        </member>
        <member name="M:Sansar.Simulation.RigidBodyComponent.SetDynamicFriction(System.Single)">
            <summary>Sets the dynamic friction of this RigidBodyComponent.</summary>
            
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsRigidBodyComponent.h(419)</sourceLocation>
            <remarks>This asynchronous method queues the write then returns.
            To block until the write has occurred, pass this method to <see cref='M:Sansar.Script.ScriptBase.WaitFor' /> while in a coroutine.</remarks>
            <value>The return value is an internal event id.</value>
            <param name='dynamicFriction'>The dynamic friction. Value should be between 0 and 1 (inclusive)</param>
        </member>
        <member name="M:Sansar.Simulation.RigidBodyComponent.GetStaticFriction">
            <summary>Retrieves the static friction of this RigidBodyComponent.</summary>
            <returns>The static friction.</returns>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsRigidBodyComponent.h(439)</sourceLocation><remarks/>
        </member>
        <member name="M:Sansar.Simulation.RigidBodyComponent.SetStaticFriction(System.Single,System.Action{Sansar.Script.OperationCompleteEvent})">
            <summary>Sets the static friction of this RigidBodyComponent.</summary>
            
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsRigidBodyComponent.h(433)</sourceLocation>
            <remarks>This asynchronous method queues the write then returns.
            To block until the write has occurred, pass this method to <see cref='M:Sansar.Script.ScriptBase.WaitFor' /> while in a coroutine.</remarks>
            <value>The return value is an internal event id.</value>
            <param name='staticFriction'>The static friction. Value should be between 0 and 1 (inclusive)</param>
            <param name='handler'>Handler to be called when the event completes.</param>
        </member>
        <member name="M:Sansar.Simulation.RigidBodyComponent.SetStaticFriction(System.Single)">
            <summary>Sets the static friction of this RigidBodyComponent.</summary>
            
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsRigidBodyComponent.h(433)</sourceLocation>
            <remarks>This asynchronous method queues the write then returns.
            To block until the write has occurred, pass this method to <see cref='M:Sansar.Script.ScriptBase.WaitFor' /> while in a coroutine.</remarks>
            <value>The return value is an internal event id.</value>
            <param name='staticFriction'>The static friction. Value should be between 0 and 1 (inclusive)</param>
        </member>
        <member name="M:Sansar.Simulation.RigidBodyComponent.GetGravityFactor">
            <summary>Retrieves what factor of the world's gravity is applied to this object.</summary>
            <returns>The gravity factor.</returns>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsRigidBodyComponent.h(453)</sourceLocation><remarks/>
        </member>
        <member name="M:Sansar.Simulation.RigidBodyComponent.SetGravityFactor(System.Single,System.Action{Sansar.Script.OperationCompleteEvent})">
            <summary>Sets what factor of the world's gravity is applied to this object.</summary>
            
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsRigidBodyComponent.h(447)</sourceLocation>
            <remarks>This asynchronous method queues the write then returns.
            To block until the write has occurred, pass this method to <see cref='M:Sansar.Script.ScriptBase.WaitFor' /> while in a coroutine.</remarks>
            <value>The return value is an internal event id.</value>
            <param name='gravityFactor'>The gravityFactor. Default value is 1, range is -2 to 2</param>
            <param name='handler'>Handler to be called when the event completes.</param>
        </member>
        <member name="M:Sansar.Simulation.RigidBodyComponent.SetGravityFactor(System.Single)">
            <summary>Sets what factor of the world's gravity is applied to this object.</summary>
            
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsRigidBodyComponent.h(447)</sourceLocation>
            <remarks>This asynchronous method queues the write then returns.
            To block until the write has occurred, pass this method to <see cref='M:Sansar.Script.ScriptBase.WaitFor' /> while in a coroutine.</remarks>
            <value>The return value is an internal event id.</value>
            <param name='gravityFactor'>The gravityFactor. Default value is 1, range is -2 to 2</param>
        </member>
        <member name="M:Sansar.Simulation.RigidBodyComponent.GetLinearDamping">
            <summary>Retrieves the amount of damping applied to this object's linear motion.</summary>
            <returns>The linear damping factor.</returns>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsRigidBodyComponent.h(467)</sourceLocation><remarks/>
        </member>
        <member name="M:Sansar.Simulation.RigidBodyComponent.SetLinearDamping(System.Single,System.Action{Sansar.Script.OperationCompleteEvent})">
            <summary>Sets the amount of damping to apply to this object's linear motion.</summary>
            
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsRigidBodyComponent.h(461)</sourceLocation>
            <remarks>This asynchronous method queues the write then returns.
            To block until the write has occurred, pass this method to <see cref='M:Sansar.Script.ScriptBase.WaitFor' /> while in a coroutine.</remarks>
            <value>The return value is an internal event id.</value>
            <param name='linearDamping'>The linear damping factor. Default value is 0.</param>
            <param name='handler'>Handler to be called when the event completes.</param>
        </member>
        <member name="M:Sansar.Simulation.RigidBodyComponent.SetLinearDamping(System.Single)">
            <summary>Sets the amount of damping to apply to this object's linear motion.</summary>
            
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsRigidBodyComponent.h(461)</sourceLocation>
            <remarks>This asynchronous method queues the write then returns.
            To block until the write has occurred, pass this method to <see cref='M:Sansar.Script.ScriptBase.WaitFor' /> while in a coroutine.</remarks>
            <value>The return value is an internal event id.</value>
            <param name='linearDamping'>The linear damping factor. Default value is 0.</param>
        </member>
        <member name="M:Sansar.Simulation.RigidBodyComponent.GetAngularDamping">
            <summary>Retrieves the amount of damping applied to this object's angular motion.</summary>
            <returns>The angular damping factor.</returns>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsRigidBodyComponent.h(480)</sourceLocation><remarks/>
        </member>
        <member name="M:Sansar.Simulation.RigidBodyComponent.SetAngularDamping(System.Single,System.Action{Sansar.Script.OperationCompleteEvent})">
            <summary>Sets the amount of damping to apply to this object's angular motion.</summary>
            
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsRigidBodyComponent.h(475)</sourceLocation>
            <remarks>This asynchronous method queues the write then returns.
            To block until the write has occurred, pass this method to <see cref='M:Sansar.Script.ScriptBase.WaitFor' /> while in a coroutine.</remarks>
            <value>The return value is an internal event id.</value>
            <param name='angularDamping'>The angular damping factor. Default value is 0.</param>
            <param name='handler'>Handler to be called when the event completes.</param>
        </member>
        <member name="M:Sansar.Simulation.RigidBodyComponent.SetAngularDamping(System.Single)">
            <summary>Sets the amount of damping to apply to this object's angular motion.</summary>
            
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsRigidBodyComponent.h(475)</sourceLocation>
            <remarks>This asynchronous method queues the write then returns.
            To block until the write has occurred, pass this method to <see cref='M:Sansar.Script.ScriptBase.WaitFor' /> while in a coroutine.</remarks>
            <value>The return value is an internal event id.</value>
            <param name='angularDamping'>The angular damping factor. Default value is 0.</param>
        </member>
        <member name="M:Sansar.Simulation.RigidBodyComponent.GetCenterOfMass">
            <summary>Retrieves the center of mass of this object in local space.</summary>
            <returns>A Vector to the center of mass of this object, in the objects local space.</returns>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsRigidBodyComponent.h(493)</sourceLocation><remarks/>
        </member>
        <member name="M:Sansar.Simulation.RigidBodyComponent.SetCenterOfMass(Sansar.Vector,System.Action{Sansar.Script.OperationCompleteEvent})">
            <summary>Sets the center of mass of this object in local space.</summary>
            
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsRigidBodyComponent.h(488)</sourceLocation>
            <remarks>This asynchronous method queues the write then returns.
            To block until the write has occurred, pass this method to <see cref='M:Sansar.Script.ScriptBase.WaitFor' /> while in a coroutine.</remarks>
            <value>The return value is an internal event id.</value>
            <param name='centerOfMass'>A Vector to the center of mass of this object, in the objects local space.</param>
            <param name='handler'>Handler to be called when the event completes.</param>
        </member>
        <member name="M:Sansar.Simulation.RigidBodyComponent.SetCenterOfMass(Sansar.Vector)">
            <summary>Sets the center of mass of this object in local space.</summary>
            
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsRigidBodyComponent.h(488)</sourceLocation>
            <remarks>This asynchronous method queues the write then returns.
            To block until the write has occurred, pass this method to <see cref='M:Sansar.Script.ScriptBase.WaitFor' /> while in a coroutine.</remarks>
            <value>The return value is an internal event id.</value>
            <param name='centerOfMass'>A Vector to the center of mass of this object, in the objects local space.</param>
        </member>
        <member name="M:Sansar.Simulation.RigidBodyComponent.GetColliderCenter">
            <summary>Retrieves the center of the collision shape for this object in local space.</summary>
            <returns>The center of the collision shape.</returns>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsRigidBodyComponent.h(498)</sourceLocation><remarks/>
        </member>
        <member name="M:Sansar.Simulation.RigidBodyComponent.GetColliderExtents">
            <summary>Retrieves the extents of the collision shape for this object in local space.</summary>
            <returns>The extents of the collision shape.</returns>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsRigidBodyComponent.h(503)</sourceLocation><remarks/>
        </member>
        <member name="M:Sansar.Simulation.RigidBodyComponent.IsTriggerVolume">
            <summary>Whether this RigidBodyComponent is a TriggerVolume.</summary>
            <returns>True if this RigidBodyComponent is a TriggerVolume.</returns>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsRigidBodyComponent.h(510)</sourceLocation><remarks/>
            <remarks>TriggerVolumes can be moved through and generate <see cref='F:Sansar.Simulation.CollisionEventType.cTrigger' /> collision events instead of normal collision events.</remarks>
        </member>
        <member name="M:Sansar.Simulation.RigidBodyComponent.GetMotionType">
            <summary>The motion type for this RigidBodyComponent.</summary>
            <returns>A RigidBodyMotionType enum for the motion type.</returns>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsRigidBodyComponent.h(524)</sourceLocation><remarks/>
        </member>
        <member name="M:Sansar.Simulation.RigidBodyComponent.SetMotionType(Sansar.Simulation.RigidBodyMotionType,System.Action{Sansar.Script.OperationCompleteEvent})">
            <summary>Sets the motion type for this rigidbody.</summary>
            
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsRigidBodyComponent.h(518)</sourceLocation>
            <remarks>This asynchronous method queues the write then returns.
            To block until the write has occurred, pass this method to <see cref='M:Sansar.Script.ScriptBase.WaitFor' /> while in a coroutine.</remarks>
            <value>The return value is an internal event id.</value>
            <param name='motionType'>The motion type.</param>
            <param name='handler'>Handler to be called when the event completes.</param>
        </member>
        <member name="M:Sansar.Simulation.RigidBodyComponent.SetMotionType(Sansar.Simulation.RigidBodyMotionType)">
            <summary>Sets the motion type for this rigidbody.</summary>
            
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsRigidBodyComponent.h(518)</sourceLocation>
            <remarks>This asynchronous method queues the write then returns.
            To block until the write has occurred, pass this method to <see cref='M:Sansar.Script.ScriptBase.WaitFor' /> while in a coroutine.</remarks>
            <value>The return value is an internal event id.</value>
            <param name='motionType'>The motion type.</param>
        </member>
        <member name="M:Sansar.Simulation.RigidBodyComponent.GetCanGrab">
            <summary>The can grab state for this RigidBodyComponent.</summary>
            <returns>A bool indicating if the object can be picked up.</returns>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsRigidBodyComponent.h(548)</sourceLocation><remarks/>
        </member>
        <member name="M:Sansar.Simulation.RigidBodyComponent.SetCanGrab(System.Boolean,System.Action{Sansar.Script.OperationCompleteEvent})">
            <summary>Sets the can grab state for this rigidbody.</summary>
            
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsRigidBodyComponent.h(542)</sourceLocation>
            <remarks>This method will throw an exception if the rigid body has the static motion type.  This asynchronous method queues the write then returns.
            To block until the write has occurred, pass this method to <see cref='M:Sansar.Script.ScriptBase.WaitFor' /> while in a coroutine.</remarks>
            <value>The return value is an internal event id.</value>
            <param name='canGrab'>Boolean value to indicate if the rigid body can be grabbed.</param>
            <param name='handler'>Handler to be called when the event completes.</param>
        </member>
        <member name="M:Sansar.Simulation.RigidBodyComponent.SetCanGrab(System.Boolean)">
            <summary>Sets the can grab state for this rigidbody.</summary>
            
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsRigidBodyComponent.h(542)</sourceLocation>
            <remarks>This method will throw an exception if the rigid body has the static motion type.  This asynchronous method queues the write then returns.
            To block until the write has occurred, pass this method to <see cref='M:Sansar.Script.ScriptBase.WaitFor' /> while in a coroutine.</remarks>
            <value>The return value is an internal event id.</value>
            <param name='canGrab'>Boolean value to indicate if the rigid body can be grabbed.</param>
        </member>
        <member name="M:Sansar.Simulation.RigidBodyComponent.GetInverseInertia">
            <summary>Retrieves the moment of inertia for this object.</summary>
            <returns>A Vector representation of the inverse moment of inertia.</returns>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsRigidBodyComponent.h(568)</sourceLocation><remarks/>
        </member>
        <member name="M:Sansar.Simulation.RigidBodyComponent.SetInverseInertia(Sansar.Vector,System.Action{Sansar.Script.OperationCompleteEvent})">
            <summary>Sets the moment of inertia for this object.</summary>
            
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsRigidBodyComponent.h(562)</sourceLocation>
            <remarks>Setting this to zero in the x and y components, for example, will give this object
            infinite inertia on the x and y axes and only permit it to rotate around the z axis.
            This asynchronous method queues the write then returns.
            To block until the write has occurred, pass this method to <see cref='M:Sansar.Script.ScriptBase.WaitFor' /> while in a coroutine.</remarks>
            <value>The return value is an internal event id.</value>
            <param name='inverseInertia'>A Vector representation of the inverse moment of inertia for this object in world space.</param>
            <param name='handler'>Handler to be called when the event completes.</param>
        </member>
        <member name="M:Sansar.Simulation.RigidBodyComponent.SetInverseInertia(Sansar.Vector)">
            <summary>Sets the moment of inertia for this object.</summary>
            
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsRigidBodyComponent.h(562)</sourceLocation>
            <remarks>Setting this to zero in the x and y components, for example, will give this object
            infinite inertia on the x and y axes and only permit it to rotate around the z axis.
            This asynchronous method queues the write then returns.
            To block until the write has occurred, pass this method to <see cref='M:Sansar.Script.ScriptBase.WaitFor' /> while in a coroutine.</remarks>
            <value>The return value is an internal event id.</value>
            <param name='inverseInertia'>A Vector representation of the inverse moment of inertia for this object in world space.</param>
        </member>
        <member name="M:Sansar.Simulation.RigidBodyComponent.AddLinearImpulse(Sansar.Vector,System.Action{Sansar.Script.OperationCompleteEvent})">
            <summary>Adds a linear impulse the the center of mass of this RigidBodyComponent.</summary>
            
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsRigidBodyComponent.h(345)</sourceLocation>
            <remarks>This asynchronous method queues the write then returns.
            To block until the write has occurred, pass this method to <see cref='M:Sansar.Script.ScriptBase.WaitFor' /> while in a coroutine.</remarks>
            <value>The return value is an internal event id.</value>
            <param name='impulse'>The impulse.</param>
            <param name='handler'>Handler to be called when the event completes.</param>
        </member>
        <member name="M:Sansar.Simulation.RigidBodyComponent.AddLinearImpulse(Sansar.Vector)">
            <summary>Adds a linear impulse the the center of mass of this RigidBodyComponent.</summary>
            
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsRigidBodyComponent.h(345)</sourceLocation>
            <remarks>This asynchronous method queues the write then returns.
            To block until the write has occurred, pass this method to <see cref='M:Sansar.Script.ScriptBase.WaitFor' /> while in a coroutine.</remarks>
            <value>The return value is an internal event id.</value>
            <param name='impulse'>The impulse.</param>
        </member>
        <member name="M:Sansar.Simulation.RigidBodyComponent.AddAngularImpulse(Sansar.Vector,System.Action{Sansar.Script.OperationCompleteEvent})">
            <summary>Adds an angular impulse to this RigidBodyComponent.</summary>
            
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsRigidBodyComponent.h(354)</sourceLocation>
            <remarks>This asynchronous method queues the write then returns.
            To block until the write has occurred, pass this method to <see cref='M:Sansar.Script.ScriptBase.WaitFor' /> while in a coroutine.</remarks>
            <value>The return value is an internal event id.</value>
            <param name='impulse'>The impulse.</param>
            <param name='handler'>Handler to be called when the event completes.</param>
        </member>
        <member name="M:Sansar.Simulation.RigidBodyComponent.AddAngularImpulse(Sansar.Vector)">
            <summary>Adds an angular impulse to this RigidBodyComponent.</summary>
            
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsRigidBodyComponent.h(354)</sourceLocation>
            <remarks>This asynchronous method queues the write then returns.
            To block until the write has occurred, pass this method to <see cref='M:Sansar.Script.ScriptBase.WaitFor' /> while in a coroutine.</remarks>
            <value>The return value is an internal event id.</value>
            <param name='impulse'>The impulse.</param>
        </member>
        <member name="M:Sansar.Simulation.RigidBodyComponent.GetHeldObjectInfo">
            <summary>Data about who is holding this RigidBodyComponent.</summary>
            <returns>A <see cref='T:Sansar.Simulation.HeldObjectInfo' /> struct.</returns>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsRigidBodyComponent.h(529)</sourceLocation><remarks/>
        </member>
        <member name="M:Sansar.Simulation.RigidBodyComponent.GetSitObjectInfo">
            <summary>Data about who is sitting on this RigidBodyComponent.</summary>
            <returns>A <see cref='T:Sansar.Simulation.SitObjectInfo' /> struct.</returns>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsRigidBodyComponent.h(534)</sourceLocation><remarks/>
        </member>
        <member name="M:Sansar.Simulation.RigidBodyComponent.ReleaseHeldObject(System.Action{Sansar.Script.OperationCompleteEvent})">
            <summary>Force any agent holding this object to drop it.</summary>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsRigidBodyComponent.h(552)</sourceLocation><remarks/>
            <param name='handler'>Handler to be called when the event completes.</param>
        </member>
        <member name="M:Sansar.Simulation.RigidBodyComponent.ReleaseHeldObject">
            <summary>Force any agent holding this object to drop it.</summary>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsRigidBodyComponent.h(552)</sourceLocation><remarks/>
        </member>
        <member name="M:Sansar.Simulation.RigidBodyComponent.ToString">
            <summary> A string representation of this object. </summary> <returns>A string representation of this object.</returns> <remarks>The format of this string may change between releases.</remarks>
        </member>
        <member name="M:Sansar.Simulation.RigidBodyComponent.SetLinearVelocity(Sansar.Vector,Sansar.Script.ScriptBase.OperationComplete)">
             <summary>Sets the linear velocity for this RigidBodyComponent.</summary>
            
             <sourceLocation>C:\p\Sansar\SharedBranches\ServerScript\Code\App\Libraries\SimulationScriptApi/CsRigidBodyComponent.h(128)</sourceLocation>
             <remarks>This asynchronous method queues the write then returns. Subsequent calls to <see cref='M:Sansar.Simulation.RigidBodyComponent.GetLinearVelocity' /> will return the previous velocity until the write occurs.
             To block until the write has occurred, pass this method to <see cref='M:Sansar.Script.ScriptBase.WaitFor' /> while in a coroutine.</remarks>
             <value>The return value is an internal event id.</value>
             <param name='velocity'>The velocity.</param>    
             <param name='handler'>Handler to be called when the event completes.</param>
        </member>
        <member name="M:Sansar.Simulation.RigidBodyComponent.SetAngularVelocity(Sansar.Vector,Sansar.Script.ScriptBase.OperationComplete)">
             <summary>Sets the angular velocity for this RigidBodyComponent.</summary>
            
             <sourceLocation>C:\p\Sansar\SharedBranches\ServerScript\Code\App\Libraries\SimulationScriptApi/CsRigidBodyComponent.h(137)</sourceLocation>
             <remarks>This asynchronous method queues the write then returns. Subsequent calls to <see cref='M:Sansar.Simulation.RigidBodyComponent.GetAngularVelocity' /> will return the previous velocity until the write occurs.
             To block until the write has occurred, pass this method to <see cref='M:Sansar.Script.ScriptBase.WaitFor' /> while in a coroutine.</remarks>
             <value>The return value is an internal event id.</value>
             <param name='velocity'>The velocity.</param>
             <param name='handler'>Handler to be called when the event completes.</param>
        </member>
        <member name="M:Sansar.Simulation.RigidBodyComponent.SetPosition(Sansar.Vector,Sansar.Script.ScriptBase.OperationComplete)">
             <summary>Sets the position of this RigidBodyComponent.</summary>
            
             <sourceLocation>C:\p\Sansar\SharedBranches\ServerScript\Code\App\Libraries\SimulationScriptApi/CsRigidBodyComponent.h(169)</sourceLocation>
             <remarks>This asynchronous method queues the write then returns.
             To block until the write has occurred, pass this method to <see cref='M:Sansar.Script.ScriptBase.WaitFor' /> while in a coroutine.</remarks>
             <value>The return value is an internal event id.</value>
             <param name='position'>The position.</param>
             <param name='handler'>Handler to be called when the event completes.</param>
        </member>
        <member name="M:Sansar.Simulation.RigidBodyComponent.SetOrientation(Sansar.Quaternion,Sansar.Script.ScriptBase.OperationComplete)">
             <summary>Sets the orientation of this RigidBodyComponent.</summary>
            
             <sourceLocation>C:\p\Sansar\SharedBranches\ServerScript\Code\App\Libraries\SimulationScriptApi/CsRigidBodyComponent.h(183)</sourceLocation>
             <remarks>This asynchronous method queues the write then returns.
             To block until the write has occurred, pass this method to <see cref='M:Sansar.Script.ScriptBase.WaitFor' /> while in a coroutine.</remarks>
             <value>The return value is an internal event id.</value>
             <param name='orientation'>The orientation.</param>
             <param name='handler'>Handler to be called when the event completes.</param>
        </member>
        <member name="M:Sansar.Simulation.RigidBodyComponent.SetMass(System.Single,Sansar.Script.ScriptBase.OperationComplete)">
             <summary>Sets the mass of this RigidBodyComponent.</summary>
            
             <sourceLocation>C:\p\Sansar\SharedBranches\ServerScript\Code\App\Libraries\SimulationScriptApi/CsRigidBodyComponent.h(197)</sourceLocation>
             <remarks>This asynchronous method queues the write then returns.
             To block until the write has occurred, pass this method to <see cref='M:Sansar.Script.ScriptBase.WaitFor' /> while in a coroutine.</remarks>
             <value>The return value is an internal event id.</value>
             <param name='mass'>The mass.</param>
             <param name='handler'>Handler to be called when the event completes.</param>
        </member>
        <member name="M:Sansar.Simulation.RigidBodyComponent.SetBounce(System.Single,Sansar.Script.ScriptBase.OperationComplete)">
             <summary>Sets the bounce of this RigidBodyComponent.</summary>
            
             <sourceLocation>C:\p\Sansar\SharedBranches\ServerScript\Code\App\Libraries\SimulationScriptApi/CsRigidBodyComponent.h(211)</sourceLocation>
             <remarks>This asynchronous method queues the write then returns.
             To block until the write has occurred, pass this method to <see cref='M:Sansar.Script.ScriptBase.WaitFor' /> while in a coroutine.</remarks>
             <value>The return value is an internal event id.</value>
             <param name='bounce'>The bounce factor. Value should be between 0 and 1 (inclusive)</param>
             <param name='handler'>Handler to be called when the event completes.</param>
        </member>
        <member name="M:Sansar.Simulation.RigidBodyComponent.SetDynamicFriction(System.Single,Sansar.Script.ScriptBase.OperationComplete)">
             <summary>Sets the dynamic friction of this RigidBodyComponent.</summary>
            
             <sourceLocation>C:\p\Sansar\SharedBranches\ServerScript\Code\App\Libraries\SimulationScriptApi/CsRigidBodyComponent.h(225)</sourceLocation>
             <remarks>This asynchronous method queues the write then returns.
             To block until the write has occurred, pass this method to <see cref='M:Sansar.Script.ScriptBase.WaitFor' /> while in a coroutine.</remarks>
             <value>The return value is an internal event id.</value>
             <param name='dynamicFriction'>The dynamic friction. Value should be between 0 and 1 (inclusive)</param>
             <param name='handler'>Handler to be called when the event completes.</param>
        </member>
        <member name="M:Sansar.Simulation.RigidBodyComponent.SetStaticFriction(System.Single,Sansar.Script.ScriptBase.OperationComplete)">
             <summary>Sets the static friction of this RigidBodyComponent.</summary>
            
             <sourceLocation>C:\p\Sansar\SharedBranches\ServerScript\Code\App\Libraries\SimulationScriptApi/CsRigidBodyComponent.h(239)</sourceLocation>
             <remarks>This asynchronous method queues the write then returns.
             To block until the write has occurred, pass this method to <see cref='M:Sansar.Script.ScriptBase.WaitFor' /> while in a coroutine.</remarks>
             <value>The return value is an internal event id.</value>
             <param name='staticFriction'>The static friction. Value should be between 0 and 1 (inclusive)</param>
             <param name='handler'>Handler to be called when the event completes.</param>
        </member>
        <member name="M:Sansar.Simulation.RigidBodyComponent.SetGravityFactor(System.Single,Sansar.Script.ScriptBase.OperationComplete)">
             <summary>Sets what factor of the world's gravity is applied to this object.</summary>
            
             <sourceLocation>C:\p\Sansar\SharedBranches\ServerScript\Code\App\Libraries\SimulationScriptApi/CsRigidBodyComponent.h(253)</sourceLocation>
             <remarks>This asynchronous method queues the write then returns.
             To block until the write has occurred, pass this method to <see cref='M:Sansar.Script.ScriptBase.WaitFor' /> while in a coroutine.</remarks>
             <value>The return value is an internal event id.</value>
             <param name='gravityFactor'>The gravityFactor. Default value is 1, range is -2 to 2</param>      
             <param name='handler'>Handler to be called when the event completes.</param>
        </member>
        <member name="M:Sansar.Simulation.RigidBodyComponent.SetLinearDamping(System.Single,Sansar.Script.ScriptBase.OperationComplete)">
             <summary>Sets the amount of damping to apply to this object's linear motion.</summary>
            
             <sourceLocation>C:\p\Sansar\SharedBranches\ServerScript\Code\App\Libraries\SimulationScriptApi/CsRigidBodyComponent.h(267)</sourceLocation>
             <remarks>This asynchronous method queues the write then returns.
             To block until the write has occurred, pass this method to <see cref='M:Sansar.Script.ScriptBase.WaitFor' /> while in a coroutine.</remarks>
             <value>The return value is an internal event id.</value>
             <param name='linearDamping'>The linear damping factor. Default value is 0.</param>
             <param name='handler'>Handler to be called when the event completes.</param>
        </member>
        <member name="M:Sansar.Simulation.RigidBodyComponent.SetAngularDamping(System.Single,Sansar.Script.ScriptBase.OperationComplete)">
             <summary>Sets the amount of damping to apply to this object's angular motion.</summary>
            
             <sourceLocation>C:\p\Sansar\SharedBranches\ServerScript\Code\App\Libraries\SimulationScriptApi/CsRigidBodyComponent.h(281)</sourceLocation>
             <remarks>This asynchronous method queues the write then returns.
             To block until the write has occurred, pass this method to <see cref='M:Sansar.Script.ScriptBase.WaitFor' /> while in a coroutine.</remarks>
             <value>The return value is an internal event id.</value>
             <param name='angularDamping'>The angular damping factor. Default value is 0.</param>
             <param name='handler'>Handler to be called when the event completes.</param>
        </member>
        <member name="M:Sansar.Simulation.RigidBodyComponent.SetCenterOfMass(Sansar.Vector,Sansar.Script.ScriptBase.OperationComplete)">
             <summary>Sets the center of mass of this object in local space.</summary>
            
             <sourceLocation>C:\p\Sansar\SharedBranches\ServerScript\Code\App\Libraries\SimulationScriptApi/CsRigidBodyComponent.h(294)</sourceLocation>
             <remarks>This asynchronous method queues the write then returns.
             To block until the write has occurred, pass this method to <see cref='M:Sansar.Script.ScriptBase.WaitFor' /> while in a coroutine.</remarks>
             <value>The return value is an internal event id.</value>
             <param name='centerOfMass'>A Vector to the center of mass of this object, in the objects local space.</param>
             <param name='handler'>Handler to be called when the event completes.</param>
        </member>
        <member name="M:Sansar.Simulation.RigidBodyComponent.SetMotionType(Sansar.Simulation.RigidBodyMotionType,Sansar.Script.ScriptBase.OperationComplete)">
             <summary>Sets the motion type for this rigidbody.</summary>
            
             <sourceLocation>C:\p\Sansar\SharedBranches\ServerScript\Code\App\Libraries\SimulationScriptApi/CsRigidBodyComponent.h(324)</sourceLocation>
             <remarks>This asynchronous method queues the write then returns.
             To block until the write has occurred, pass this method to <see cref='M:Sansar.Script.ScriptBase.WaitFor' /> while in a coroutine.</remarks>
             <value>The return value is an internal event id.</value>
             <param name='motionType'>The motion type.</param>
             <param name='handler'>Handler to be called when the event completes.</param>
        </member>
        <member name="M:Sansar.Simulation.RigidBodyComponent.AddLinearImpulse(Sansar.Vector,Sansar.Script.ScriptBase.OperationComplete)">
             <summary>Adds a linear impulse the the center of mass of this RigidBodyComponent.</summary>
            
             <sourceLocation>C:\p\Sansar\SharedBranches\ServerScript\Code\App\Libraries\SimulationScriptApi/CsRigidBodyComponent.h(151)</sourceLocation>
             <remarks>This asynchronous method queues the write then returns.
             To block until the write has occurred, pass this method to <see cref='M:Sansar.Script.ScriptBase.WaitFor' /> while in a coroutine.</remarks>
             <value>The return value is an internal event id.</value>
             <param name='impulse'>The impulse.</param>
             <param name='handler'>Handler to be called when the event completes.</param>
        </member>
        <member name="M:Sansar.Simulation.RigidBodyComponent.AddAngularImpulse(Sansar.Vector,Sansar.Script.ScriptBase.OperationComplete)">
             <summary>Adds an angular impulse to this RigidBodyComponent.</summary>
            
             <sourceLocation>C:\p\Sansar\SharedBranches\ServerScript\Code\App\Libraries\SimulationScriptApi/CsRigidBodyComponent.h(160)</sourceLocation>
             <remarks>This asynchronous method queues the write then returns.
             To block until the write has occurred, pass this method to <see cref='M:Sansar.Script.ScriptBase.WaitFor' /> while in a coroutine.</remarks>
             <value>The return value is an internal event id.</value>
             <param name='impulse'>The impulse.</param>
             <param name='handler'>Handler to be called when the event completes.</param>
        </member>
        <member name="T:Sansar.Simulation.StreamChannel">
            <summary>For playing a stream from the scene.</summary><sourceLocation>App/Libraries\SimulationScriptApi/SimulationScriptTypes.h(50)</sourceLocation><remarks/>
        </member>
        <member name="F:Sansar.Simulation.StreamChannel.MediaChannel">
            <summary>The Media Surface.  See Scene Settings in Layout Editor for the URL.</summary><sourceLocation>App/Libraries\SimulationScriptApi/SimulationScriptTypes.h(50)</sourceLocation><remarks/>
        </member>
        <member name="F:Sansar.Simulation.StreamChannel.AudioChannel">
            <summary>Audio Stream 1.  See Scene Settings in Layout Editor for the URL.</summary><sourceLocation>App/Libraries\SimulationScriptApi/SimulationScriptTypes.h(50)</sourceLocation><remarks/>
        </member>
        <member name="T:Sansar.Simulation.AnimationPlaybackMode">
            <summary>
            Enumeration for the different animation playback modes
            </summary>
            <remarks></remarks>
            <sourceLocation>App/Libraries\SimulationScriptApi/SimulationScriptTypes.h(103)</sourceLocation>
        </member>
        <member name="F:Sansar.Simulation.AnimationPlaybackMode.PlayOnce">
            <summary>Play once then stop.</summary>
        </member>
        <member name="F:Sansar.Simulation.AnimationPlaybackMode.Loop">
            <summary>Loop indefinitely.</summary>
        </member>
        <member name="F:Sansar.Simulation.AnimationPlaybackMode.PingPong">
            <summary>Play indefinitely, alternating between forwards and backwards.</summary>
        </member>
        <member name="T:Sansar.Simulation.AnimationBoneSubset">
            <summary>
            Enumeration for different animation skeleton subsets
            </summary>
            <remarks></remarks>
            <sourceLocation>App/Libraries\SimulationScriptApi/SimulationScriptTypes.h(118)</sourceLocation>
        </member>
        <member name="F:Sansar.Simulation.AnimationBoneSubset.Full">
            <summary>The full set of bones in the skeleton.</summary>
        </member>
        <member name="F:Sansar.Simulation.AnimationBoneSubset.Subset1">
            <summary>The first bone subset. This may not be defined for all animations.
            For agent animations this represents the upper body subset of bones.</summary>
        </member>
        <member name="T:Sansar.Simulation.InterpolationMode">
            <summary>Type of interpolation to use for various interfaces</summary>
            <remarks>
            <para>The output value is computed according to the interpolation type with a parametric parameter 't' that varies from zero to one.</para>
            <list type="bullet">
            <item><term>Linear is directly proportional to 't'.</term></item>
            <item><term>Ease-in is proportional to 't^2'.</term></item>
            <item><term>Ease-out is computed with 't*(2-t)'.</term></item>
            <item><term>Smoothstep interpolation uses '(3-2t)*t^2'.</term></item>
            <item><term>Step interpolation uses '0' for 't&lt;0.5' and '1' for 't&gt;=0.5'.</term></item>
            </list></remarks>
        </member>
        <member name="F:Sansar.Simulation.InterpolationMode.Linear">
            <summary>Linear Interpolation. The value will change at a constant rate.</summary>
        </member>
        <member name="F:Sansar.Simulation.InterpolationMode.Smoothstep">
            <summary>Smoothstep Interpolation. The value will speed up gradually and slow down to smoothly reach the goal.</summary>
        </member>
        <member name="F:Sansar.Simulation.InterpolationMode.EaseIn">
            <summary>Ease In. The value will gradually speed up and continue quickly at the end.</summary>
        </member>
        <member name="F:Sansar.Simulation.InterpolationMode.EaseOut">
            <summary>Ease Out. The value will change quickly at first and slow down to smoothly reach the goal.</summary>
        </member>
        <member name="F:Sansar.Simulation.InterpolationMode.Step">
            <summary>Step. The value will step abruptly from the initial value to the final value half-way through.</summary>
        </member>
        <member name="T:Sansar.Simulation.ObjectiveState">
            <summary>State of a quest objective for a user.</summary><sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/QuestApis/CsObjective.h(25)</sourceLocation><remarks/>
        </member>
        <member name="F:Sansar.Simulation.ObjectiveState.Active">
            <summary>The objective is currently active and available to complete for this user.</summary><sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/QuestApis/CsObjective.h(25)</sourceLocation>
        </member>
        <member name="F:Sansar.Simulation.ObjectiveState.Completed">
            <summary>The objective has been completed for this user.</summary><sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/QuestApis/CsObjective.h(25)</sourceLocation>
        </member>
        <member name="F:Sansar.Simulation.ObjectiveState.Locked">
            <summary>The objective is locked for this user and can not be completed.</summary><sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/QuestApis/CsObjective.h(25)</sourceLocation>
        </member>
        <member name="F:Sansar.Simulation.ObjectiveState.None">
            <summary>The objective state is not set, probably the user is not on the quest.</summary><sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/QuestApis/CsObjective.h(25)</sourceLocation>
        </member>
        <member name="T:Sansar.Simulation.QuestState">
            <summary>State of a quest for a user.</summary><sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/QuestApis/CsQuest.h(26)</sourceLocation><remarks/>
        </member>
        <member name="F:Sansar.Simulation.QuestState.Offered">
            <summary>The user has been offered the quest.</summary><sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/QuestApis/CsQuest.h(26)</sourceLocation>
        </member>
        <member name="F:Sansar.Simulation.QuestState.Active">
            <summary>The user is on the quest.</summary><sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/QuestApis/CsQuest.h(26)</sourceLocation>
        </member>
        <member name="F:Sansar.Simulation.QuestState.Completed">
            <summary>The user has completed the quest.</summary><sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/QuestApis/CsQuest.h(26)</sourceLocation>
        </member>
        <member name="F:Sansar.Simulation.QuestState.ObjectivesCompleted">
            <summary>The user has completed all the objectives for this quest.</summary><sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/QuestApis/CsQuest.h(26)</sourceLocation>
        </member>
        <member name="F:Sansar.Simulation.QuestState.SelectReward">
            <summary>The user has completed all the objectives for this quest, and turned it in, but still has to select rewards</summary><sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/QuestApis/CsQuest.h(26)</sourceLocation>
        </member>
        <member name="F:Sansar.Simulation.QuestState.None">
            <summary>The quest has not yet been offered to the user.</summary><sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/QuestApis/CsQuest.h(26)</sourceLocation>
        </member>
        <member name="T:Sansar.Simulation.ControlPointType">
            <summary>Control points are a representation of some spatial inputs, primarily VR controllers.</summary>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/QuestApis/../CsAgent.h(55)</sourceLocation>
            <remarks>See: <para><see cref='M:Sansar.Simulation.AgentPrivate.GetControlPointPosition(Sansar.Simulation.ControlPointType)'/> to get a control point's position.</para>
            <para><see cref='M:Sansar.Simulation.AgentPrivate.GetControlPointOrientation(Sansar.Simulation.ControlPointType)'/> to get a control point's orientation</para>
            <para><see cref='M:Sansar.Simulation.AgentPrivate.GetControlPointEnabled(Sansar.Simulation.ControlPointType)'/> to see if a control point is enabled.</para></remarks>
        </member>
        <member name="F:Sansar.Simulation.ControlPointType.GazeTarget">
            <summary>A VR head mounted display (HMD) control point, for the position and direction of the HMD.</summary><sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/QuestApis/../CsAgent.h(55)</sourceLocation>
        </member>
        <member name="F:Sansar.Simulation.ControlPointType.LeftTool">
            <summary>Left hand VR controller.</summary><sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/QuestApis/../CsAgent.h(55)</sourceLocation>
        </member>
        <member name="F:Sansar.Simulation.ControlPointType.RightTool">
            <summary>Right hand VR controller.</summary><sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/QuestApis/../CsAgent.h(55)</sourceLocation>
        </member>
        <member name="F:Sansar.Simulation.ControlPointType.DesktopGrab">
            <summary>Used when grabbing objects in desktop mode, follows the characters right hand</summary><sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/QuestApis/../CsAgent.h(55)</sourceLocation>
        </member>
        <member name="F:Sansar.Simulation.ControlPointType.Count">
            <summary>Count of total possible control point types. Control points from 0 to (cCount - 1) are valid, however not all have meaningful data on the server for scripts.</summary><sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/QuestApis/../CsAgent.h(55)</sourceLocation>
        </member>
        <member name="F:Sansar.Simulation.ControlPointType.Invalid">
            <summary>An invalid control point.</summary><sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/QuestApis/../CsAgent.h(55)</sourceLocation>
        </member>
        <member name="T:Sansar.Simulation.MediaAction">
            <summary>Special actions to perform on media surfaces with SetMediaAction</summary><sourceLocation>App/Libraries\RegionCommon/ScriptInterfaces.h(64)</sourceLocation><remarks/>
        </member>
        <member name="F:Sansar.Simulation.MediaAction.Invalid">
            <summary>Invalid action.</summary>
        </member>
        <member name="F:Sansar.Simulation.MediaAction.TwitchMaturityClick">
            <summary>Click the maturity link on twitch streams.</summary>
        </member>
        <member name="T:Sansar.Simulation.MoveMode">
            <summary>Type of interpolation to use for movement</summary>
            <remarks>
            <para>Movement is computed according to the movement type with a parametric parameter 't' that varies from zero to one.</para>
            <list type="bullet">
            <item><term>Linear movement is directly proportional to 't'.</term></item>
            <item><term>Ease-in movement is proportional to 't^2'.</term></item>
            <item><term>Ease-out movement is computed with 't*(2-t)'.</term></item>
            <item><term>Smoothstep interpolation uses '(3-2t)*t^2'.</term></item>
            </list></remarks>
        </member>
        <member name="F:Sansar.Simulation.MoveMode.Linear">
            <summary>Linear Interpolation. The object will move at a constant velocity.</summary>
        </member>
        <member name="F:Sansar.Simulation.MoveMode.Smoothstep">
            <summary>Smoothstep Interpolation. The object with speed up and slow down smoothly when moving.</summary>
        </member>
        <member name="F:Sansar.Simulation.MoveMode.EaseIn">
            <summary>Ease In. The object with move slowly at first and quickly at the end.</summary>
        </member>
        <member name="F:Sansar.Simulation.MoveMode.EaseOut">
            <summary>Ease Out. The object with move quickly at first and slow down at the end.</summary>
        </member>
        <member name="T:Sansar.Simulation.ComponentType">
            <summary>Type of component. See <see cref='M:Sansar.Simulation.ObjectPrivate.GetComponent(Sansar.Simulation.ComponentType,System.UInt32)'/></summary><sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsObject.h(30)</sourceLocation><remarks/>
        </member>
        <member name="F:Sansar.Simulation.ComponentType.AnimationComponent">
            <summary><see cref='T:Sansar.Simulation.AnimationComponent'/></summary><sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsObject.h(30)</sourceLocation>
        </member>
        <member name="F:Sansar.Simulation.ComponentType.RigidBodyComponent">
            <summary><see cref='T:Sansar.Simulation.RigidBodyComponent'/></summary><sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsObject.h(30)</sourceLocation>
        </member>
        <member name="F:Sansar.Simulation.ComponentType.AudioComponent">
            <summary><see cref='T:Sansar.Simulation.AudioComponent'/></summary><sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsObject.h(30)</sourceLocation>
        </member>
        <member name="F:Sansar.Simulation.ComponentType.LightComponent">
            <summary><see cref='T:Sansar.Simulation.LightComponent'/></summary><sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsObject.h(30)</sourceLocation>
        </member>
        <member name="F:Sansar.Simulation.ComponentType.MeshComponent">
            <summary><see cref='T:Sansar.Simulation.MeshComponent'/></summary><sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsObject.h(30)</sourceLocation>
        </member>
        <member name="F:Sansar.Simulation.ComponentType.CameraComponent">
            <summary><see cref='T:Sansar.Simulation.CameraComponent'/></summary><sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsObject.h(30)</sourceLocation>
        </member>
        <member name="F:Sansar.Simulation.ComponentType.CharacterComponent">
            <summary><see cref='T:Sansar.Simulation.CameraComponent'/></summary><sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsObject.h(30)</sourceLocation>
        </member>
        <member name="T:Sansar.Simulation.CommandAction">
            <summary>
            Specifies a command action.
            </summary>
            <remarks>See <see cref='M:Sansar.Simulation.Client.SubscribeToCommand(System.String,Sansar.Simulation.CommandAction,System.Action{Sansar.Simulation.CommandData},System.Action{Sansar.Script.CancelData},System.Boolean)'/>. </remarks><sourceLocation>App/Libraries\RegionCommon/ScriptInterfaces.h(46)</sourceLocation>
        </member>
        <member name="F:Sansar.Simulation.CommandAction.Invalid">
            <summary> An invalid command action. </summary>
        </member>
        <member name="F:Sansar.Simulation.CommandAction.Pressed">
            <summary> Fired when the command is pressed. </summary>
        </member>
        <member name="F:Sansar.Simulation.CommandAction.Released">
            <summary> Fired when the command is released. </summary>
        </member>
        <member name="F:Sansar.Simulation.CommandAction.All">
            <summary> A combination of all other values. </summary>
        </member>
        <member name="T:Sansar.Simulation.CameraControlMode">
            <summary>Type of camera mode a user is in.</summary><sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsClient.h(40)</sourceLocation><remarks/>
        </member>
        <member name="F:Sansar.Simulation.CameraControlMode.None">
            <summary>Invalid camera control mode.</summary>
        </member>
        <member name="F:Sansar.Simulation.CameraControlMode.FlyCam">
            <summary>A camera mode detached from the avatar. Also referred to as Free Cam.</summary>
        </member>
        <member name="F:Sansar.Simulation.CameraControlMode.ThirdPerson">
            <summary>Over the shoulder 3rd person camera mode.</summary>
        </member>
        <member name="F:Sansar.Simulation.CameraControlMode.FirstPerson">
            <summary>First person camera mode, looking out from your avatar's position.</summary>
        </member>
        <member name="F:Sansar.Simulation.CameraControlMode.Script">
            <summary>Camera is being set by a script.</summary>
        </member>
        <member name="T:Sansar.Simulation.ScriptCameraControlMode">
            <summary>Type of control mode to use for a script camera.</summary>
        </member>
        <member name="F:Sansar.Simulation.ScriptCameraControlMode.NoControl">
            <summary>No control. Agent and camera will ignore user input. </summary>
        </member>
        <member name="F:Sansar.Simulation.ScriptCameraControlMode.AgentControlOnly">
            <summary>The agent will move and respond to user input.</summary>
        </member>
        <member name="F:Sansar.Simulation.ScriptCameraControlMode.CameraControlOnly">
            <summary>The camera will move and respond to user input (Rotation only).</summary>
        </member>
        <member name="F:Sansar.Simulation.ScriptCameraControlMode.FullControl">
            <summary>Both agent and camera will respond to user input.</summary>
        </member>
        <member name="T:Sansar.Simulation.TutorialHint">
            <summary>Tutorial hint types.</summary><sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsClient.h(73)</sourceLocation><remarks/>
        </member>
        <member name="F:Sansar.Simulation.TutorialHint.ClearHint">
            <summary>No Tutorial hint.</summary>
        </member>
        <member name="F:Sansar.Simulation.TutorialHint.WalkHint">
            <summary>Walk input hint.</summary>
        </member>
        <member name="F:Sansar.Simulation.TutorialHint.WalkRunToggleHint">
            <summary>Walk/Run toggle input hint.</summary>
        </member>
        <member name="F:Sansar.Simulation.TutorialHint.TeleportHint">
            <summary>Teleport input hint.</summary>
        </member>
        <member name="F:Sansar.Simulation.TutorialHint.InteractionHint">
            <summary>Interaction hint.</summary>
        </member>
        <member name="F:Sansar.Simulation.TutorialHint.GrabHint">
            <summary>Grab Object input hint.</summary>
        </member>
        <member name="F:Sansar.Simulation.TutorialHint.DropStickyHint">
            <summary>Drop sticky held object hint.</summary>
        </member>
        <member name="F:Sansar.Simulation.TutorialHint.MicrophoneToggleHint">
            <summary>Enable/Disable microphone menu hint.</summary>
        </member>
        <member name="F:Sansar.Simulation.TutorialHint.StyleAvatarHint">
            <summary>Go to Avatar customization menu hint.</summary>
        </member>
        <member name="F:Sansar.Simulation.TutorialHint.PrimePortalHint">
            <summary>Use Prime Portal hint.</summary>
        </member>
        <member name="F:Sansar.Simulation.TutorialHint.CodexHint">
            <summary>Open Codex hint.</summary>
        </member>
        <member name="F:Sansar.Simulation.TutorialHint.EmoteHint">
            <summary>Open Emote hint.</summary>
        </member>
        <member name="F:Sansar.Simulation.TutorialHint.BackpackHint">
            <summary>Open Backpack hint.</summary>
        </member>
        <member name="F:Sansar.Simulation.TutorialHint.StoreHint">
            <summary>Open Store hint.</summary>
        </member>
        <member name="T:Sansar.Simulation.TwitchEventType">
            <summary>Enumerates the types of twitch events that scripts can subscribe to.</summary><sourceLocation>App/Libraries\Twitch/TwitchEvents.h(17)</sourceLocation><remarks/>
        </member>
        <member name="F:Sansar.Simulation.TwitchEventType.ViewerLove">
            <summary>Viewer Love event</summary><remarks/>
        </member>
        <member name="F:Sansar.Simulation.TwitchEventType.AllEvents">
            <summary>Viewer Love event</summary><remarks/>
        </member>
        <member name="T:Sansar.Simulation.PlayStatus">
            <summary>Current status of the PlayStatus.</summary><sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsPlayHandle.h(33)</sourceLocation><remarks/>
        </member>
        <member name="F:Sansar.Simulation.PlayStatus.PlayingOnce">
            <summary>Currently playing once.</summary><sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsPlayHandle.h(33)</sourceLocation><remarks/>
        </member>
        <member name="F:Sansar.Simulation.PlayStatus.cPlayingOnce">
            <summary>Currently playing once.</summary><sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsPlayHandle.h(33)</sourceLocation><remarks/>
        </member>
        <member name="F:Sansar.Simulation.PlayStatus.Looping">
            <summary>Currently looping.</summary><sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsPlayHandle.h(33)</sourceLocation><remarks/>
        </member>
        <member name="F:Sansar.Simulation.PlayStatus.cLooping">
            <summary>Currently looping.</summary><sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsPlayHandle.h(33)</sourceLocation><remarks/>
        </member>
        <member name="F:Sansar.Simulation.PlayStatus.FinishedPlaying">
            <summary>(one-shots only) Finished playing to the end.</summary><sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsPlayHandle.h(33)</sourceLocation><remarks/>
        </member>
        <member name="F:Sansar.Simulation.PlayStatus.cFinishedPlaying">
            <summary>(one-shots only) Finished playing to the end.</summary><sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsPlayHandle.h(33)</sourceLocation><remarks/>
        </member>
        <member name="F:Sansar.Simulation.PlayStatus.Stopped">
            <summary>Was stopped during playback.</summary><sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsPlayHandle.h(33)</sourceLocation><remarks/>
        </member>
        <member name="F:Sansar.Simulation.PlayStatus.cStopped">
            <summary>Was stopped during playback.</summary><sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsPlayHandle.h(33)</sourceLocation><remarks/>
        </member>
        <member name="T:Sansar.Simulation.CollisionEventType">
            <summary>Type of collision event.</summary><sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsRigidBodyComponent.h(41)</sourceLocation><remarks/>
        </member>
        <member name="F:Sansar.Simulation.CollisionEventType.RigidBodyContact">
            <summary>0 or more collision events may appear between a sequence start and end.</summary><sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsRigidBodyComponent.h(41)</sourceLocation>
        </member>
        <member name="F:Sansar.Simulation.CollisionEventType.cRigidBodyContact">
            <summary>0 or more collision events may appear between a sequence start and end.</summary><sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsRigidBodyComponent.h(41)</sourceLocation>
        </member>
        <member name="F:Sansar.Simulation.CollisionEventType.CharacterContact">
            <summary>A character collision</summary><sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsRigidBodyComponent.h(41)</sourceLocation>
        </member>
        <member name="F:Sansar.Simulation.CollisionEventType.cCharacterContact">
            <summary>A character collision</summary><sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsRigidBodyComponent.h(41)</sourceLocation>
        </member>
        <member name="F:Sansar.Simulation.CollisionEventType.Trigger">
            <summary>A trigger volume has been entered or exited</summary>
        </member>
        <member name="F:Sansar.Simulation.CollisionEventType.cTrigger">
            <summary>A trigger volume has been entered or exited</summary>
        </member>
        <member name="F:Sansar.Simulation.CollisionEventType.AllCollisions">
            <summary>Combination of all flags.</summary><sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsRigidBodyComponent.h(41)</sourceLocation>
        </member>
        <member name="F:Sansar.Simulation.CollisionEventType.cAllCollisions">
            <summary>Combination of all flags.</summary><sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsRigidBodyComponent.h(41)</sourceLocation>
        </member>
        <member name="T:Sansar.Simulation.CollisionEventPhase">
            <summary>Phase for events that encapsulate sequence of occurrences</summary>
        </member>
        <member name="F:Sansar.Simulation.CollisionEventPhase.Invalid">
            <summary> No phase specified</summary>
        </member>
        <member name="F:Sansar.Simulation.CollisionEventPhase.cInvalid">
            <summary> No phase specified</summary>
        </member>
        <member name="F:Sansar.Simulation.CollisionEventPhase.TriggerEnter">
            <summary> Trigger volume was entered by a detected object</summary>
        </member>
        <member name="F:Sansar.Simulation.CollisionEventPhase.cTriggerEnter">
            <summary> Trigger volume was entered by a detected object</summary>
        </member>
        <member name="F:Sansar.Simulation.CollisionEventPhase.TriggerExit">
            <summary> Detected object has exited the trigger volume</summary>
        </member>
        <member name="F:Sansar.Simulation.CollisionEventPhase.cTriggerExit">
            <summary> Detected object has exited the trigger volume</summary>
        </member>
        <member name="T:Sansar.Simulation.HeldObjectEventType">
            <summary>Type of held object event.</summary><sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsRigidBodyComponent.h(66)</sourceLocation><remarks/>
        </member>
        <member name="F:Sansar.Simulation.HeldObjectEventType.Grab">
            <summary>Grabbed by a player avatar.</summary><sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsRigidBodyComponent.h(66)</sourceLocation>
        </member>
        <member name="F:Sansar.Simulation.HeldObjectEventType.Release">
            <summary>Released by a player avatar.</summary><sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsRigidBodyComponent.h(66)</sourceLocation>
        </member>
        <member name="T:Sansar.Simulation.SitEventType">
            <summary>Type of sit event.</summary><sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsRigidBodyComponent.h(101)</sourceLocation><remarks/>
        </member>
        <member name="F:Sansar.Simulation.SitEventType.Start">
            <summary>Player avatar starts sitting on object</summary><sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsRigidBodyComponent.h(101)</sourceLocation>
        </member>
        <member name="F:Sansar.Simulation.SitEventType.End">
            <summary>Player avatar stands after sitting on object.</summary><sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsRigidBodyComponent.h(101)</sourceLocation>
        </member>
        <member name="F:Sansar.Simulation.SitEventType.All">
            <summary>All sit event types.</summary><sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsRigidBodyComponent.h(101)</sourceLocation>
        </member>
        <member name="T:Sansar.Simulation.RigidBodyMotionType">
            <summary>Type of motion that can be applied to a rigid body. </summary>
        </member>
        <member name="F:Sansar.Simulation.RigidBodyMotionType.MotionTypeStatic">
            <summary>Static. This object never moves.</summary>
        </member>
        <member name="F:Sansar.Simulation.RigidBodyMotionType.MotionTypeDynamic">
            <summary>Dynamic. This object is fully affected by the physics simulation.</summary>
        </member>
        <member name="F:Sansar.Simulation.RigidBodyMotionType.MotionTypeKeyframed">
            <summary>Keyframed. This object has its position and velocity directly controlled by scripts.</summary>
        </member>
        <member name="T:Sansar.Simulation.HttpRequestMethod">
            <summary>
            Enumerates the possible Http Request Methods
            </summary>
            <remarks></remarks>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsHttpClient.h(33)</sourceLocation>
        </member>
        <member name="F:Sansar.Simulation.HttpRequestMethod.GET">
            <summary>Perform a GET request</summary><sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsHttpClient.h(33)</sourceLocation>
        </member>
        <member name="F:Sansar.Simulation.HttpRequestMethod.POST">
            <summary>Perform a POST request</summary><sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsHttpClient.h(33)</sourceLocation>
        </member>
        <member name="F:Sansar.Simulation.HttpRequestMethod.HEAD">
            <summary>Perform a HEAD request</summary><sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsHttpClient.h(33)</sourceLocation>
        </member>
        <member name="F:Sansar.Simulation.HttpRequestMethod.PUT">
            <summary>Perform a PUT request</summary><sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsHttpClient.h(33)</sourceLocation>
        </member>
        <member name="F:Sansar.Simulation.HttpRequestMethod.DELETE">
            <summary>Perform a DELETE request</summary><sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsHttpClient.h(33)</sourceLocation>
        </member>
        <member name="F:Sansar.Simulation.HttpRequestMethod.PATCH">
            <summary>Perform a PATCH request</summary><sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsHttpClient.h(33)</sourceLocation>
        </member>
        <member name="T:Sansar.Simulation.LightType">
            <summary>
            Enumeration for the different types of lights
            </summary>
            <remarks></remarks>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsLightComponent.h(23)</sourceLocation>
        </member>
        <member name="F:Sansar.Simulation.LightType.Directional">
            <summary>Lights that illuminate in a single direction across the entire scene.</summary>
        </member>
        <member name="F:Sansar.Simulation.LightType.Point">
            <summary>Lights that illuminate from a point outward in all directions.</summary>
        </member>
        <member name="F:Sansar.Simulation.LightType.Spot">
            <summary>Lights that illuminate from a point outward in a cone shape.</summary>
        </member>
        <member name="T:Sansar.Simulation.PlaySettings">
            <summary>
            The PlaySettings class contains settings for playing sounds.
            </summary>
            <remarks>See <see cref='M:Sansar.Simulation.AudioComponent.PlaySoundOnComponent(Sansar.Simulation.SoundResource,Sansar.PlaySettings)'/>
            and <see cref='M:Sansar.Simulation.AgentPrivate.PlaySound(Sansar.Simulation.SoundResource,Sansar.PlaySettings)'/></remarks>
            <sourceLocation>App/Libraries\SimulationScriptApi/SimulationScriptTypes.h(65)</sourceLocation>
        </member>
        <member name="F:Sansar.Simulation.PlaySettings.Loudness">
            <summary>
            Loudness in dB.
            </summary>
            <remarks>Default is 0.</remarks>
        </member>
        <member name="F:Sansar.Simulation.PlaySettings.PitchShift">
            <summary>
            Relative pitch, in semitones. Changing a sound's pitch also affects its duration. For example, if you raise the pitch by 12 semitones (an octave), it plays twice as quickly.
            </summary>
            <remarks>The default is 0.</remarks>
        </member>
        <member name="F:Sansar.Simulation.PlaySettings.Offset">
            <summary>
            Play from time offset (in seconds).  Use DontSync if you want everyone to hear the sound from this offset regardless of when they join.
            </summary>
            <remarks>The default is 0.</remarks>
        </member>
        <member name="F:Sansar.Simulation.PlaySettings.Looping">
            <summary>
            false = play once, true = sound will loop.
            </summary>
            <remarks>The default value is false.</remarks>
        </member>
        <member name="F:Sansar.Simulation.PlaySettings.DontSync">
            <summary>
            false = we adjust the offset per Agent so that the sound is synchronized to everyone.  This means late-joining Agents will hear sound at a greater offset.  true = turn this off, let everyone hear sound from start / your offset
            </summary>
            <remarks>The default value is false.</remarks>
        </member>
        <member name="F:Sansar.Simulation.PlaySettings.PlayOnce">
            <summary>
            The default play parameters for sounds that play once.
            </summary>
            <remarks/>
        </member>
        <member name="F:Sansar.Simulation.PlaySettings.Looped">
            <summary>
            The default play parameters for looped sounds.
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:Sansar.Simulation.AnimationParameters">
            <summary>
            The AnimationParameters struct contains settings for playing animations.
            </summary>
            <remarks></remarks>
            <sourceLocation>App/Libraries\SimulationScriptApi/SimulationScriptTypes.h(132)</sourceLocation>
        </member>
        <member name="F:Sansar.Simulation.AnimationParameters.PlaybackMode">
            <summary>
            Animation playback mode.
            </summary>
            <remarks>Default is Looping.</remarks>
        </member>
        <member name="F:Sansar.Simulation.AnimationParameters.PlaybackSpeed">
            <summary>
            Animation playback speed. Negative values will play the animation backwards.
            </summary>
            <remarks>The default is 1.0.</remarks>
        </member>
        <member name="F:Sansar.Simulation.AnimationParameters.ClampToRange">
            <summary>
            If true, clamp the animation frames to the range specified by rangeStartFrame and rangeLength. If false, play the whole animation.
            </summary>
            <remarks>The default is false.</remarks>
        </member>
        <member name="F:Sansar.Simulation.AnimationParameters.RangeStartFrame">
            <summary>
            Start frame to use when clamping animation range.
            </summary>
            <remarks>The default value is 0.</remarks>
        </member>
        <member name="F:Sansar.Simulation.AnimationParameters.RangeEndFrame">
            <summary>
            End frame to use when clamping animation range. This should always be greater or equal to the range start frame.
            </summary>
            <remarks>The default value is 0.</remarks>
        </member>
        <member name="F:Sansar.Simulation.AnimationParameters.BlendDuration">
            <summary>
            Time in seconds taken to blend to this animation.
            </summary>
            <remarks>The default value is 0.</remarks>
        </member>
        <member name="T:Sansar.Simulation.Objective">
            <summary>The Objective is the interface for a user's Quest Objective</summary>
            <remarks></remarks>
            <seealso cref="T:Sansar.Simulation.QuestDefinition" />
            <seealso cref="T:Sansar.Simulation.ObjectiveDefinition" />
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/QuestApis/CsObjective.h(45)</sourceLocation>
        </member>
        <member name="P:Sansar.Simulation.Objective.DefinitionId">
            <summary>The unique id of the objective definition for this objective.</summary>
            <remarks></remarks>
        </member>
        <member name="P:Sansar.Simulation.Objective.Definition">
            <summary>
            The <see cref="T:Sansar.Simulation.QuestDefinition"/> for this quest.
            </summary>
        </member>
        <member name="P:Sansar.Simulation.Objective.Agent">
            <summary>The session Id for the user on this quest.</summary>
            <remarks></remarks>
        </member>
        <member name="P:Sansar.Simulation.Objective.Count">
            <summary>Get the number of objectives collected for this user.</summary>
            <remarks>Returns -1 if the Objective is not Ready.</remarks>
        </member>
        <member name="P:Sansar.Simulation.Objective.Ready">
            <summary>If the Objective data is ready.</summary>
            <remarks>Returns false until the data has been fetched from the quest service. Once it returns true it will always return true.</remarks>
        </member>
        <member name="M:Sansar.Simulation.Objective.Subscribe(Sansar.Simulation.ObjectiveState,System.Action{Sansar.Simulation.ObjectiveData},System.Boolean)">
            <summary>Subscribes to Objective Events.</summary><sourceLocation>DistributeEvent::writeSubscribe line 180</sourceLocation><remarks /><returns>An <see cref='T:Sansar.Script.IEventSubscription' /> that can be used to cancel the subscription.</returns><seealso cref='T:Sansar.Simulation.ObjectiveData'/><seealso cref='T:Sansar.Script.IEventSubscription'/>
            <param name='State'> The state of the objective</param>
            <param name='callback'>Callback which is executed when the event completes.</param>
            <param name='persistent'>Optional, set to false to unsubscribe after one event.</param>
        </member>
        <member name="M:Sansar.Simulation.Objective.GetState">
            <summary>The <see cref='T:Sansar.Simulation.ObjectiveState'/> representing the user's progress in the quest</summary>
            <remarks></remarks>
        </member>
        <member name="M:Sansar.Simulation.Objective.SetState(Sansar.Simulation.ObjectiveState,System.Action{Sansar.Script.OperationCompleteEvent})">
            <summary>Set the state of the objective.</summary>
            <remarks>Some state changes may not be permitted, in these cases <see cref='T:Sansar.Script.OperationCompleteEvent'/> success will be false.</remarks>
            
            <param name='state'>The state to transition to.</param>
            <param name='handler'>Handler to be called when the event completes.</param>
        </member>
        <member name="M:Sansar.Simulation.Objective.SetState(Sansar.Simulation.ObjectiveState)">
            <summary>Set the state of the objective.</summary>
            <remarks>Some state changes may not be permitted, in these cases <see cref='T:Sansar.Script.OperationCompleteEvent'/> success will be false.</remarks>
            
            <param name='state'>The state to transition to.</param>
        </member>
        <member name="M:Sansar.Simulation.Objective.Update(System.Action{Sansar.Script.OperationCompleteEvent})">
            <summary>Update the ObjectiveDefinition data.</summary>
            <remarks>Use in a WaitFor to wait for the data for the QuestDefinition to be ready. Once data is retrieved and Ready is true it will never again be false.</remarks>
            <param name='handler'>Handler to be called when the event completes.</param>
        </member>
        <member name="M:Sansar.Simulation.Objective.Update">
            <summary>Update the ObjectiveDefinition data.</summary>
            <remarks>Use in a WaitFor to wait for the data for the QuestDefinition to be ready. Once data is retrieved and Ready is true it will never again be false.</remarks>
        </member>
        <member name="M:Sansar.Simulation.Objective.ToString">
            <summary> A string representation of this object. </summary> <returns>A string representation of this object.</returns> <remarks>The format of this string may change between releases.</remarks>
        </member>
        <member name="T:Sansar.Simulation.ObjectiveData">
            <summary>Handler for Objective state change events.</summary><sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/QuestApis/CsObjective.h(112)</sourceLocation><remarks></remarks>
        </member>
        <member name="P:Sansar.Simulation.ObjectiveData.State">
            <summary> The state of the objective</summary><value/><remarks/>
        </member>
        <member name="P:Sansar.Simulation.ObjectiveData.AgentId">
            <summary> <summary>The SessionId of the agent on the quest.</summary></summary><value/><remarks/>
        </member>
        <member name="P:Sansar.Simulation.ObjectiveData.DefinitionId">
            <summary> The id of the quest definition from which the quest was created.</summary><value/><remarks/>
        </member>
        <member name="M:Sansar.Simulation.ObjectiveData.ToString">
            <summary> A string representation of this object. </summary> <returns>A string representation of this object.</returns> <remarks>The format of this string may change between releases.</remarks>
        </member>
        <member name="T:Sansar.Simulation.Quest">
            <summary>The Quest is the interface for a user's progress in a Quest.</summary>
            <remarks>Each instance of Quest is generated from a <see cref='T:Sansar.Simulation.QuestDefinition'/> and is associated with a specific user, represented by a <see cref='T:Sansar.Script.SessionId'/>. It can be used to offer the quest to that user, and to track and control their progress through the quest.</remarks>
            <seealso href="QuestDefinition" />
            <seealso href="ObjectiveDefinition" />
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/QuestApis/CsQuest.h(48)</sourceLocation>
        </member>
        <member name="P:Sansar.Simulation.Quest.DefinitionId">
            <summary>The unique id of the quest definition for this quest.</summary>
            <remarks></remarks>
        </member>
        <member name="P:Sansar.Simulation.Quest.Definition">
            <summary>The <see cref="T:Sansar.Simulation.QuestDefinition"/> for this quest.</summary>
            <remarks></remarks>
        </member>
        <member name="P:Sansar.Simulation.Quest.Objectives">
            <summary>Returns a list of the objectives for this quest.</summary>
            <remarks></remarks>
        </member>
        <member name="P:Sansar.Simulation.Quest.Agent">
            <summary>The session Id for the user on this quest.</summary>
            <remarks></remarks>
        </member>
        <member name="P:Sansar.Simulation.Quest.Ready">
            <summary>If the Quest data is ready.</summary>
            <remarks>Returns false until the data has been fetched from the quest service. Once it returns true it will always return true.</remarks>
        </member>
        <member name="M:Sansar.Simulation.Quest.Subscribe(Sansar.Simulation.QuestState,System.Action{Sansar.Simulation.QuestData},System.Boolean)">
            <summary>Subscribes to Quest Events.</summary><sourceLocation>DistributeEvent::writeSubscribe line 180</sourceLocation><remarks /><returns>An <see cref='T:Sansar.Script.IEventSubscription' /> that can be used to cancel the subscription.</returns><seealso cref='T:Sansar.Simulation.QuestData'/><seealso cref='T:Sansar.Script.IEventSubscription'/>
            <param name='State'> The state of the quest</param>
            <param name='callback'>Callback which is executed when the event completes.</param>
            <param name='persistent'>Optional, set to false to unsubscribe after one event.</param>
        </member>
        <member name="M:Sansar.Simulation.Quest.GetState">
            <summary>The <see cref='T:Sansar.Simulation.QuestState'/> representing the user's progress in the quest.</summary>
            <remarks></remarks>
        </member>
        <member name="M:Sansar.Simulation.Quest.SetState(Sansar.Simulation.QuestState,System.Action{Sansar.Script.OperationCompleteEvent})">
            <summary>Set the state of the quest</summary>
            <remarks></remarks>
            
            <param name='state'>The state to transition to.</param>
            <param name='handler'>Handler to be called when the event completes.</param>
        </member>
        <member name="M:Sansar.Simulation.Quest.SetState(Sansar.Simulation.QuestState)">
            <summary>Set the state of the quest</summary>
            <remarks></remarks>
            
            <param name='state'>The state to transition to.</param>
        </member>
        <member name="M:Sansar.Simulation.Quest.Offer(System.Action{Sansar.Script.OperationCompleteEvent})">
            <summary>Offer the quest to a user.</summary>
            <remarks></remarks>
            <param name='handler'>Handler to be called when the event completes.</param>
        </member>
        <member name="M:Sansar.Simulation.Quest.Offer">
            <summary>Offer the quest to a user.</summary>
            <remarks></remarks>
        </member>
        <member name="M:Sansar.Simulation.Quest.Update(System.Action{Sansar.Script.OperationCompleteEvent})">
            <summary>Update the ObjectiveDefinition data.</summary>
            <remarks>Use in a WaitFor to wait for the data for the QuestDefinition to be ready. Once data is retrieved and Ready is true it will never again be false.</remarks>
            <param name='handler'>Handler to be called when the event completes.</param>
        </member>
        <member name="M:Sansar.Simulation.Quest.Update">
            <summary>Update the ObjectiveDefinition data.</summary>
            <remarks>Use in a WaitFor to wait for the data for the QuestDefinition to be ready. Once data is retrieved and Ready is true it will never again be false.</remarks>
        </member>
        <member name="M:Sansar.Simulation.Quest.ToString">
            <summary> A string representation of this object. </summary> <returns>A string representation of this object.</returns> <remarks>The format of this string may change between releases.</remarks>
        </member>
        <member name="T:Sansar.Simulation.QuestData">
            <summary>Handler for Quest state change events.</summary><sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/QuestApis/CsQuest.h(124)</sourceLocation><remarks></remarks>
        </member>
        <member name="P:Sansar.Simulation.QuestData.State">
            <summary> The state of the quest</summary><value/><remarks/>
        </member>
        <member name="P:Sansar.Simulation.QuestData.AgentId">
            <summary> <summary>The SessionId of the agent on the quest.</summary></summary><value/><remarks/>
        </member>
        <member name="P:Sansar.Simulation.QuestData.DefinitionId">
            <summary> The id of the quest definition from which the quest was created.</summary><value/><remarks/>
        </member>
        <member name="M:Sansar.Simulation.QuestData.ToString">
            <summary> A string representation of this object. </summary> <returns>A string representation of this object.</returns> <remarks>The format of this string may change between releases.</remarks>
        </member>
        <member name="T:Sansar.Simulation.AgentPrivate">
            <summary>The AgentPrivate class is the full interface for interactions with avatars.</summary>
            <remarks>Use via <see cref='P:Sansar.Simulation.AgentScript.AgentPrivate' />  to access APIs for the agent the script is on.</remarks>
            <remarks>Agents may leave at any time. Attempting to use an Agent interface for an agent no longer in the scene will throw a NullReferenceException.</remarks>
            <exception cref='T:System.NullReferenceException'>Thrown when using an AgentPrivate for a user who is no longer in the region.</exception>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/QuestApis/../CsAgent.h(92)</sourceLocation>
        </member>
        <member name="P:Sansar.Simulation.AgentPrivate.Client">
            <summary> Returns the <see cref='T:Sansar.Simulation.Client' /> for this instance. </summary>
            <returns>The <see cref='T:Sansar.Simulation.Client' /> for this instance</returns>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/QuestApis/../CsAgent.h(258)</sourceLocation>
            <remarks>The <see cref='T:Sansar.Simulation.Client' /> manages interactions with a client. </remarks>
        </member>
        <member name="P:Sansar.Simulation.AgentPrivate.AgentInfo">
            <summary> Returns the <see cref='T:Sansar.Simulation.AgentInfo' /> for this instance. </summary>
            <returns>The <see cref='T:Sansar.Simulation.AgentInfo' /> for this instance</returns>
            <remarks>The <see cref='T:Sansar.Simulation.AgentInfo' /> holds information about an agent. </remarks>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/QuestApis/../CsAgent.h(256)</sourceLocation>
        </member>
        <member name="M:Sansar.Simulation.AgentPrivate.SendChat(System.String,System.Action{Sansar.Script.OperationCompleteEvent})">
            <summary>Sends a <see cref='T:System.String' /> message to the AgentPrivate.</summary>
            
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/QuestApis/../CsAgent.h(253)</sourceLocation>
            <remarks>Messages may be throttled and ignored.</remarks>
            <param name='message'>The message to send. </param>
            <param name='handler'>Handler to be called when the event completes.</param>
        </member>
        <member name="M:Sansar.Simulation.AgentPrivate.GetControlPointPosition(Sansar.Simulation.ControlPointType)">
            <summary>Retrieves the position in character relative space of the specified control point.</summary>
            
            <returns>The position of the control point.</returns>
            <exception cref = 'T:System.ArgumentException'>Thrown if an invalid control point is specified.</exception>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/QuestApis/../CsAgent.h(171)</sourceLocation>
            <remarks>Control points are a representation of some spatial inputs, primarily VR controllers.</remarks>
            <param name='type'>The control point to get the position of. See <see cref='T:Sansar.Simulation.ControlPointType' />.</param>
        </member>
        <member name="M:Sansar.Simulation.AgentPrivate.GetControlPointOrientation(Sansar.Simulation.ControlPointType)">
            <summary>Retrieves the orientation in character relative space of the specified control point.</summary>
            
            <returns>The orientation of the control point.</returns>
            <exception cref = 'T:System.ArgumentException'>Thrown if an invalid control point is specified.</exception>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/QuestApis/../CsAgent.h(179)</sourceLocation><remarks/>
            <remarks>Control points are a representation of some spatial inputs, primarily VR controllers.</remarks>
            <param name='type'>See <see cref='T:Sansar.Simulation.ControlPointType' />.</param>
        </member>
        <member name="M:Sansar.Simulation.AgentPrivate.GetControlPointEnabled(Sansar.Simulation.ControlPointType)">
            <summary>Retrieves whether the control point is enabled.</summary>
            
            <returns>True if the control point is enabled. Control points are enabled when used.</returns>
            <exception cref = 'T:System.ArgumentException'>Thrown if an invalid control point is specified.</exception>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/QuestApis/../CsAgent.h(187)</sourceLocation><remarks/>
            <remarks>Control points are a representation of some spatial inputs, primarily VR controllers.</remarks>
            <param name='type'>See <see cref='T:Sansar.Simulation.ControlPointType' />.</param>
        </member>
        <member name="M:Sansar.Simulation.AgentPrivate.GetHeldRigidBodies">
            <summary>Retrieves a list of <see cref='T:Sansar.Simulation.RigidBodyComponent' /> that this agent is currently holding.</summary>
            <returns> a list of <see cref='T:Sansar.Simulation.RigidBodyComponent' /></returns>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/QuestApis/../CsAgent.h(193)</sourceLocation><remarks/>
            <remarks></remarks>
        </member>
        <member name="M:Sansar.Simulation.AgentPrivate.IgnoreCollisionWith(Sansar.Simulation.RigidBodyComponent,System.Boolean,System.Action{Sansar.Script.OperationCompleteEvent})">
            <summary>Sets whether this agent will ignore collisions with a specific <see cref='T:Sansar.Simulation.RigidBodyComponent' /></summary>
            
            
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/QuestApis/../CsAgent.h(201)</sourceLocation>
            <remarks>This asynchronous method queues the write then returns.
            To block until the write has occurred, pass this method to <see cref='M:Sansar.Script.ScriptBase.WaitFor' /> while in a coroutine.</remarks>
            <param name='rigidBodyComponent'>The RigidBodyComponent with which to change collision behavior.</param>
            <param name='ignoreBody'>When true, collision will be added to the ignore list. When false, collision will removed from the ignore list.</param>
            <param name='handler'>Handler to be called when the event completes.</param>
        </member>
        <member name="M:Sansar.Simulation.AgentPrivate.IgnoreCollisionWith(Sansar.Simulation.RigidBodyComponent,System.Boolean)">
            <summary>Sets whether this agent will ignore collisions with a specific <see cref='T:Sansar.Simulation.RigidBodyComponent' /></summary>
            
            
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/QuestApis/../CsAgent.h(201)</sourceLocation>
            <remarks>This asynchronous method queues the write then returns.
            To block until the write has occurred, pass this method to <see cref='M:Sansar.Script.ScriptBase.WaitFor' /> while in a coroutine.</remarks>
            <param name='rigidBodyComponent'>The RigidBodyComponent with which to change collision behavior.</param>
            <param name='ignoreBody'>When true, collision will be added to the ignore list. When false, collision will removed from the ignore list.</param>
        </member>
        <member name="M:Sansar.Simulation.AgentPrivate.IsCollisionIgnoredWith(Sansar.Simulation.RigidBodyComponent)">
            <summary>Checks whether an agent is ignoring collisions with a specific <see cref='T:Sansar.Simulation.RigidBodyComponent' />.</summary>
            
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/QuestApis/../CsAgent.h(206)</sourceLocation>
            <param name='rigidBodyComponent'>The RigidBodyComponent that could possibly be ignored.</param>
        </member>
        <member name="M:Sansar.Simulation.AgentPrivate.SetGravityFactor(System.Single,System.Action{Sansar.Script.OperationCompleteEvent})">
            <summary>Sets what factor of the world's gravity is applied to this agent.</summary>
            
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/QuestApis/../CsAgent.h(214)</sourceLocation>
            <remarks>This asynchronous method queues the write then returns.
            To block until the write has occurred, pass this method to <see cref='M:Sansar.Script.ScriptBase.WaitFor' /> while in a coroutine.</remarks>
            <value>The return value is an internal event id.</value>
            <param name='gravityFactor'>The gravityFactor. Default value is 1, range is clamped between -2 to 2</param>
            <param name='handler'>Handler to be called when the event completes.</param>
        </member>
        <member name="M:Sansar.Simulation.AgentPrivate.SetGravityFactor(System.Single)">
            <summary>Sets what factor of the world's gravity is applied to this agent.</summary>
            
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/QuestApis/../CsAgent.h(214)</sourceLocation>
            <remarks>This asynchronous method queues the write then returns.
            To block until the write has occurred, pass this method to <see cref='M:Sansar.Script.ScriptBase.WaitFor' /> while in a coroutine.</remarks>
            <value>The return value is an internal event id.</value>
            <param name='gravityFactor'>The gravityFactor. Default value is 1, range is clamped between -2 to 2</param>
        </member>
        <member name="M:Sansar.Simulation.AgentPrivate.GetGravityFactor">
            <summary>Retrieves what factor of the world's gravity is applied to this agent.</summary>
            <returns>The gravity factor.</returns>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/QuestApis/../CsAgent.h(219)</sourceLocation><remarks/>
        </member>
        <member name="M:Sansar.Simulation.AgentPrivate.SetSpeedFactor(System.Single,System.Action{Sansar.Script.OperationCompleteEvent})">
            <summary>Sets what factor of the base speed to apply to this agent.</summary>
            
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/QuestApis/../CsAgent.h(226)</sourceLocation>
            <remarks>This asynchronous method queues the write then returns.
            To block until the write has occurred, pass this method to <see cref='M:Sansar.Script.ScriptBase.WaitFor' /> while in a coroutine.</remarks>
            <param name='speedFactor'>The speedFactor. Default value is 1, range is clamped between 0.1 to 4</param>
            <param name='handler'>Handler to be called when the event completes.</param>
        </member>
        <member name="M:Sansar.Simulation.AgentPrivate.SetSpeedFactor(System.Single)">
            <summary>Sets what factor of the base speed to apply to this agent.</summary>
            
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/QuestApis/../CsAgent.h(226)</sourceLocation>
            <remarks>This asynchronous method queues the write then returns.
            To block until the write has occurred, pass this method to <see cref='M:Sansar.Script.ScriptBase.WaitFor' /> while in a coroutine.</remarks>
            <param name='speedFactor'>The speedFactor. Default value is 1, range is clamped between 0.1 to 4</param>
        </member>
        <member name="M:Sansar.Simulation.AgentPrivate.GetSpeedFactor">
            <summary>Retrieves what factor of the base speed to apply to this agent.</summary>
            <returns>The speed factor.</returns>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/QuestApis/../CsAgent.h(231)</sourceLocation><remarks/>
        </member>
        <member name="M:Sansar.Simulation.AgentPrivate.PlaySound(Sansar.Simulation.SoundResource,Sansar.Simulation.PlaySettings)">
            <summary>Play sound to direct output.</summary><sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/QuestApis/../CsAgent.h(107)</sourceLocation>
            <remarks>Plays for this agent only.</remarks>
            <returns>The play handle for controlling playback.</returns>
            
            
            <param name='soundResource'>The sound resource to play.</param>
            <param name='playSettings'>The play parameters.</param>
        </member>
        <member name="M:Sansar.Simulation.AgentPrivate.PlaySoundAtPosition(Sansar.Simulation.SoundResource,Sansar.Vector,Sansar.Simulation.PlaySettings)">
            <summary>Play sound at specified position.</summary><sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/QuestApis/../CsAgent.h(115)</sourceLocation>
            <remarks>Plays for this agent only.  By setting an absolute position, the location of this sound will be static.  If you want the sound to move, you must play the sound on an audio component and move the audio component.</remarks>
            <returns>The play handle for controlling playback.</returns>
            
            
            
            <param name='soundResource'>The sound resource to play.</param>
            <param name='position'>The absolute position.</param>
            <param name='playSettings'>The play parameters.</param>
        </member>
        <member name="M:Sansar.Simulation.AgentPrivate.PlaySoundOnComponent(Sansar.Simulation.SoundResource,Sansar.Simulation.AudioComponent,Sansar.Simulation.PlaySettings)">
            <summary>Play sound on a component (and follows its position).</summary>
            <remarks>Plays for this agent only.  As the component moves, this sound will follow the component's location.</remarks>
            <returns>The play handle for controlling playback.</returns>
            
            
            
            <param name='soundResource'>The sound resource to play.</param>
            <param name='audioComponent'>The audio component to play this on.</param>
            <param name='playSettings'>The play parameters.</param>
        </member>
        <member name="M:Sansar.Simulation.AgentPrivate.PlayStream(Sansar.Simulation.StreamChannel,System.Single)">
            <summary>Play audio stream to direct output.</summary><sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/QuestApis/../CsAgent.h(130)</sourceLocation>
            <remarks>Plays for this agent only.</remarks>
            <returns>The play handle for controlling playback.</returns>
            
            
            <param name='streamChannel'>Channel of the audio stream to play.</param>
            <param name='loudness'>Relative loudness in dB.</param>
        </member>
        <member name="M:Sansar.Simulation.AgentPrivate.PlayStreamAtPosition(Sansar.Simulation.StreamChannel,Sansar.Vector,System.Single)">
            <summary>Play web audio stream at specified position.</summary><sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/QuestApis/../CsAgent.h(138)</sourceLocation>
            <remarks>Plays for this agent only.  By setting an absolute position, the location of this sound will be static.  If you want the sound to move, you must play the sound on an audio component and move the audio component.</remarks>
            <returns>The play handle for controlling playback.</returns>
            
            
            
            <param name='streamChannel'>Channel of the audio stream to play.</param>
            <param name='position'>The absolute position.</param>
            <param name='loudness'>Relative loudness in dB.</param>
        </member>
        <member name="M:Sansar.Simulation.AgentPrivate.PlayStreamOnComponent(Sansar.Simulation.StreamChannel,Sansar.Simulation.AudioComponent,System.Single)">
            <summary>Play web audio stream on this component (and follow its position).</summary>
            <remarks>Plays for this agent only.  As the component moves, this sound will follow the component's location.</remarks>
            <returns>The play handle for controlling playback.</returns>
            
            
            
            <param name='streamChannel'>Channel of the audio stream to play.</param>
            <param name='audioComponent'>The audio component to play this on.</param>
            <param name='loudness'>Relative loudness in dB.</param>
        </member>
        <member name="M:Sansar.Simulation.AgentPrivate.OverrideAudioStream(System.String,System.Action{Sansar.Script.OperationCompleteEvent})">
            <summary>Overrides source of web audio streams.</summary><sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/QuestApis/../CsAgent.h(151)</sourceLocation>
            <remarks>Applies to this agent only.  NOTE: this may cause a few seconds of silence while restarting the stream.  To avoid silence, assign URLs in your SceneSettings instead, which will pre-load them.</remarks>
            
            <param name='url'>URL to use.</param>
            <param name='handler'>Handler to be called when the event completes.</param>
        </member>
        <member name="M:Sansar.Simulation.AgentPrivate.OverrideMediaSource(System.String,System.Int32,System.Int32,System.Action{Sansar.Script.OperationCompleteEvent})">
            <summary>Overrides source of media surfaces.</summary><sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/QuestApis/../CsAgent.h(158)</sourceLocation>
            <remarks>Applies to this agent only.  NOTE: this will cause a few seconds of silence while restarting the stream.  To avoid silence, assign URLs in your SceneSettings instead, which will pre-load them.</remarks>
            
            
            
            <param name='url'>URL to use.</param>
            <param name='mediaWidth'>(cMediaChannel only) source width.</param>
            <param name='mediaHeight'>(cMediaChannel only) source height.</param>
            <param name='handler'>Handler to be called when the event completes.</param>
        </member>
        <member name="M:Sansar.Simulation.AgentPrivate.PerformMediaAction(Sansar.Simulation.MediaAction,System.Action{Sansar.Script.OperationCompleteEvent})">
            <summary>Performs a specific action on the current media surface.</summary><sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/QuestApis/../CsAgent.h(163)</sourceLocation>
            <remarks>Applies to this agent only.</remarks>
            
            <param name='action'>The action to perform.</param>
            <param name='handler'>Handler to be called when the event completes.</param>
        </member>
        <member name="M:Sansar.Simulation.AgentPrivate.AddReaction(System.String,System.String,Sansar.Simulation.ThumbnailedClusterResource)">
            Add a new reaction type for this agent only
            <summary>Add a new reaction type to this agent only</summary>
            
            
            
            <param name='reactionType'>A string that gets passed to the callback.  Should be of a form like 'Developer.Type' to match the default, e.g. 'Sansar.Fire'</param>
            <param name='displayText'>A short string that appears on the emotes panel</param>
            <param name='resource'>A cluster source which has a thumbnail defined in inventory.</param>
        </member>
        <member name="M:Sansar.Simulation.AgentPrivate.RemoveReaction(System.String)">
            <summary>Remove the specified reaction from this agent.</summary>
            
            <param name='reactionType'>A string that gets passed to the callback.  Should be of a form like 'Developer.Type' to match the default, e.g. 'Sansar.Fire'</param>
        </member>
        <member name="M:Sansar.Simulation.AgentPrivate.ToString">
            <summary> A string representation of this object. </summary> <returns>A string representation of this object.</returns> <remarks>The format of this string may change between releases.</remarks>
        </member>
        <member name="M:Sansar.Simulation.AgentPrivate.OverrideMediaSource(System.String)">
            <summary>Sets stream channel source.</summary>
            <param name='url'>URL to use.</param>
        </member>
        <member name="M:Sansar.Simulation.AgentPrivate.SendChat(System.String)">
            <summary>Sends a <see cref='T:System.String' /> message to the $className$.</summary>
            <param name="message">The message to send. </param>
            <sourceLocation>$sourceLocation$</sourceLocation>
            <remarks>eprecated. Use AgentPrivate.SendChat or AgentPublic.SendChat</remarks>
            <exception cref="T:System.NullReferenceException">If the user is no longer online.</exception>
            <exception cref="T:Sansar.Script.ThrottleException">If the throttle rate is exceeded.</exception>
        </member>
        <member name="M:Sansar.Simulation.AgentPrivate.OverrideAudioStream(System.String)">
            <summary>Overrides source of web audio streams.</summary><sourceLocation>$sourceLocation$</sourceLocation>
            <remarks>Applies to this agent only.  NOTE: this may cause a few seconds of silence while restarting the stream.  To avoid silence, assign URLs in your SceneSettings instead, which will pre-load them.</remarks>
            <param name='url'>URL to use.</param>
        </member>
        <member name="M:Sansar.Simulation.AgentPrivate.OverrideMediaSource(System.String,System.Int32,System.Int32)">
            <summary>Overrides source of media surfaces.</summary><sourceLocation>C:\Source\ServerScript\Code\App\Libraries\SimulationScriptApi/CsAgent.h(136)</sourceLocation>
            <remarks>Applies to this agent only.  NOTE: this will cause a few seconds of silence while restarting starting the stream.  To avoid silence, assign URLs in your SceneSettings instead, which will pre-load them.</remarks>
            <param name='url'>URL to use.</param>
            <param name='mediaWidth'>(cMediaChannel only) source width.</param>
            <param name='mediaHeight'>(cMediaChannel only) source height.</param>
        </member>
        <member name="M:Sansar.Simulation.AgentPrivate.PerformMediaAction(Sansar.Simulation.MediaAction)">
            <summary>Performs a specific action on the current media surface.</summary><sourceLocation>D:\p4\ftue\Code\App\Libraries\SimulationScriptApi/CsAgent.h(145)</sourceLocation>
            <remarks>Applies to this agent only.</remarks>
            
            <param name='action'>The action to perform.</param>
        </member>
        <member name="T:Sansar.Simulation.AgentInfo">
            <summary>The AgentInfo class has basic information and IDs for an agent.</summary><exception cref='T:System.NullReferenceException'>Thrown when using an AgentInfo for a user who is no longer in the region.</exception>
            <remarks>Agents may leave at any time. Attempting to use an AgentInfo interface for an agent no longer in the scene will throw a NullReferenceException.</remarks>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/QuestApis/../CsAgent.h(292)</sourceLocation>
        </member>
        <member name="P:Sansar.Simulation.AgentInfo.Name">
            <summary>Returns the name of the AgentInfo. </summary>
            <returns>The name of the AgentInfo</returns>
            <remarks>Agent names may not be unique.</remarks>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/QuestApis/../CsAgent.h(245)</sourceLocation>
        </member>
        <member name="P:Sansar.Simulation.AgentInfo.Handle">
            <summary>Returns the handle of the AgentInfo. </summary>
            <returns>The handle of the AgentInfo</returns>
            <remarks>Agent handles are unique.</remarks>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/QuestApis/../CsAgent.h(247)</sourceLocation>
        </member>
        <member name="P:Sansar.Simulation.AgentInfo.AvatarUuid">
            <summary>Returns the persona ID of the AgentInfo.</summary>
            <returns>The persona ID of the AgentInfo</returns>
            <remarks>Agent persona IDs are unique</remarks>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/QuestApis/../CsAgent.h(248)</sourceLocation>
        </member>
        <member name="P:Sansar.Simulation.AgentInfo.ObjectId">
            <summary>Returns the ObjectId of the AgentInfo.</summary>
            <returns>The object ID of the AgentInfo</returns>
            <remarks>The object id can be used to compare agents or look up the <see cref="T:Sansar.Simulation.ObjectPrivate"/> associated with the agent.</remarks>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/QuestApis/../CsAgent.h(249)</sourceLocation>
        </member>
        <member name="P:Sansar.Simulation.AgentInfo.SessionId">
            <summary>Returns the Id of the AgentInfo.</summary>
            <returns>The id of the AgentInfo</returns>
            <remarks>The id can be used for quick comparison between Agents.</remarks>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/QuestApis/../CsAgent.h(250)</sourceLocation>
        </member>
        <member name="P:Sansar.Simulation.AgentInfo.Ticket">
            <summary>Returns the ticket for the user if they purchased one. </summary>
            <returns>The ticket of the user</returns>
            <remarks>Will be an empty string if no ticket was used to enter the scene or event.</remarks>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/QuestApis/../CsAgent.h(246)</sourceLocation>
        </member>
        <member name="P:Sansar.Simulation.AgentInfo.Scale">
            <summary>Returns the scale for the user. </summary>
            <returns>The scale of the user</returns>
            <remarks>This is the scale setting from the character editor.</remarks>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/QuestApis/../CsAgent.h(251)</sourceLocation>
        </member>
        <member name="M:Sansar.Simulation.AgentInfo.ToString">
            <summary> A string representation of this object. </summary> <returns>A string representation of this object.</returns> <remarks>The format of this string may change between releases.</remarks>
        </member>
        <member name="T:Sansar.Simulation.AgentPublic">
            <summary>The AgentPublic class is a more limited subset of the <see cref='T:Sansar.Simulation.AgentPrivate'/> API for use by other scripts in the scene.</summary>
            <exception cref='T:System.NullReferenceException'>Thrown when using an AgentPublic for a user who is no longer in the region.</exception>
            <remarks>AgentPublic has a more limited API than <see cref='T:Sansar.Simulation.AgentPrivate'/>. Agents may leave the scene at any time. Attempting to use an AgentPublic interface for an agent no longer in the scene will throw a NullReferenceException.</remarks>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/QuestApis/../CsAgent.h(301)</sourceLocation>"
        </member>
        <member name="P:Sansar.Simulation.AgentPublic.AgentInfo">
            <summary> Returns the <see cref='T:Sansar.Simulation.AgentInfo' /> for this instance. </summary>
            <returns>The <see cref='T:Sansar.Simulation.AgentInfo' /> for this instance</returns>
            <remarks>The <see cref='T:Sansar.Simulation.AgentInfo' /> holds information about an agent. </remarks>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/QuestApis/../CsAgent.h(256)</sourceLocation>
        </member>
        <member name="M:Sansar.Simulation.AgentPublic.SendChat(System.String,System.Action{Sansar.Script.OperationCompleteEvent})">
            <summary>Sends a <see cref='T:System.String' /> message to the AgentPublic.</summary>
            
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/QuestApis/../CsAgent.h(254)</sourceLocation>
            <remarks>Messages may be throttled and ignored.</remarks>
            <param name='message'>The message to send. </param>
            <param name='handler'>Handler to be called when the event completes.</param>
        </member>
        <member name="M:Sansar.Simulation.AgentPublic.ToString">
            <summary> A string representation of this object. </summary> <returns>A string representation of this object.</returns> <remarks>The format of this string may change between releases.</remarks>
        </member>
        <member name="M:Sansar.Simulation.AgentPublic.SendChat(System.String)">
            <summary>Sends a <see cref='T:System.String' /> message to the $className$.</summary>
            <param name="message">The message to send. </param>
            <sourceLocation>$sourceLocation$</sourceLocation>
            <remarks>eprecated. Use AgentPrivate.SendChat or AgentPublic.SendChat</remarks>
            <exception cref="T:System.NullReferenceException">If the user is no longer online.</exception>
            <exception cref="T:Sansar.Script.ThrottleException">If the throttle rate is exceeded.</exception>
        </member>
        <member name="T:Sansar.Simulation.Interaction">
            <summary/><remarks></remarks>
        </member>
        <member name="M:Sansar.Simulation.Interaction.Subscribe(System.Action{Sansar.Simulation.InteractionData},System.Boolean)">
            <summary>Subscribes to Interaction Events.</summary><sourceLocation>DistributeEvent::writeSubscribe line 180</sourceLocation><remarks /><returns>An <see cref='T:Sansar.Script.IEventSubscription' /> that can be used to cancel the subscription.</returns><seealso cref='T:Sansar.Simulation.InteractionData'/><seealso cref='T:Sansar.Script.IEventSubscription'/>
            <param name='callback'>Callback which is executed when the event completes.</param>
            <param name='persistent'>Optional, set to false to unsubscribe after one event.</param>
        </member>
        <member name="M:Sansar.Simulation.Interaction.GetEnabled">
            <summary>Returns true if the interaction is enabled.</summary>
            <remarks>Disabled interactions do not highlight, do not show their prompt and cannot be 'clicked'.</remarks>
            <returns>true if the interaction is enabled.</returns>
        </member>
        <member name="M:Sansar.Simulation.Interaction.SetEnabled(System.Boolean,System.Action{Sansar.Script.OperationCompleteEvent})">
            <summary>Change an Interaction state to disabled or enabled.</summary>
            <remarks>All Interactions start off enabled. Disabled interactions do not highlight, do not show their prompt and cannot be 'clicked'.</remarks>
            
            <param name='value'>true to enable the Interaction, false to disable it.</param>
            <param name='handler'>Handler to be called when the event completes.</param>
        </member>
        <member name="M:Sansar.Simulation.Interaction.SetEnabled(System.Boolean)">
            <summary>Change an Interaction state to disabled or enabled.</summary>
            <remarks>All Interactions start off enabled. Disabled interactions do not highlight, do not show their prompt and cannot be 'clicked'.</remarks>
            
            <param name='value'>true to enable the Interaction, false to disable it.</param>
        </member>
        <member name="M:Sansar.Simulation.Interaction.SetEnabled(Sansar.Simulation.AgentPrivate,System.Boolean,System.Action{Sansar.Script.OperationCompleteEvent})">
            <summary>Change an Interaction state to disabled or enabled.</summary>
            <remarks>All Interactions start off enabled. Disabled interactions do not highlight, do not show their prompt and cannot be 'clicked'. This method will only change the enabled state for a single user and will not persist across client restarts, server restarts, or leaving the scene (even for changing avatars). It will also be overriden by any global setEnabled calls.</remarks>
            
            
            <param name='agent'>The agent to disable or enable the interaction for.</param>
            <param name='value'>true to enable the Interaction, false to disable it.</param>
            <param name='handler'>Handler to be called when the event completes.</param>
        </member>
        <member name="M:Sansar.Simulation.Interaction.SetEnabled(Sansar.Simulation.AgentPrivate,System.Boolean)">
            <summary>Change an Interaction state to disabled or enabled.</summary>
            <remarks>All Interactions start off enabled. Disabled interactions do not highlight, do not show their prompt and cannot be 'clicked'. This method will only change the enabled state for a single user and will not persist across client restarts, server restarts, or leaving the scene (even for changing avatars). It will also be overriden by any global setEnabled calls.</remarks>
            
            
            <param name='agent'>The agent to disable or enable the interaction for.</param>
            <param name='value'>true to enable the Interaction, false to disable it.</param>
        </member>
        <member name="M:Sansar.Simulation.Interaction.SetEnabled(Sansar.Script.SessionId,System.Boolean,System.Action{Sansar.Script.OperationCompleteEvent})">
            <summary>Change an Interaction state to disabled or enabled.</summary>
            <remarks>All Interactions start off enabled. Disabled interactions do not highlight, do not show their prompt and cannot be 'clicked'. This method will only change the enabled state for a single user and will not persist across client restarts, server restarts, or leaving the scene (even for changing avatars). It will also be overriden by any global setEnabled calls.</remarks>
            
            
            <param name='sessionId'>The SessionId of the agent to disable or enable the interaction for..</param>
            <param name='value'>true to enable the Interaction, false to disable it.</param>
            <param name='handler'>Handler to be called when the event completes.</param>
        </member>
        <member name="M:Sansar.Simulation.Interaction.SetEnabled(Sansar.Script.SessionId,System.Boolean)">
            <summary>Change an Interaction state to disabled or enabled.</summary>
            <remarks>All Interactions start off enabled. Disabled interactions do not highlight, do not show their prompt and cannot be 'clicked'. This method will only change the enabled state for a single user and will not persist across client restarts, server restarts, or leaving the scene (even for changing avatars). It will also be overriden by any global setEnabled calls.</remarks>
            
            
            <param name='sessionId'>The SessionId of the agent to disable or enable the interaction for..</param>
            <param name='value'>true to enable the Interaction, false to disable it.</param>
        </member>
        <member name="M:Sansar.Simulation.Interaction.GetPrompt">
            <summary>Get the current Interaction prompt.</summary>
            <remarks>The prompt text shows when hovering over the object the script is on.</remarks>
            <returns>The current prompt string.</returns>
        </member>
        <member name="M:Sansar.Simulation.Interaction.SetPrompt(System.String,System.Action{Sansar.Script.OperationCompleteEvent})">
            <summary>Set the Interaction prompt string.</summary>
            <remarks>The prompt text shows when hovering over the object the script is on. The prompt must be 128 characters or less and 4 lines or less. Use <see cref='T:Sansar.Script.DefaultValueAttribute' /> to set a default prompt.</remarks>
            
            <param name='prompt'>The string to set the prompt to.</param>
            <param name='handler'>Handler to be called when the event completes.</param>
        </member>
        <member name="M:Sansar.Simulation.Interaction.SetPrompt(System.String)">
            <summary>Set the Interaction prompt string.</summary>
            <remarks>The prompt text shows when hovering over the object the script is on. The prompt must be 128 characters or less and 4 lines or less. Use <see cref='T:Sansar.Script.DefaultValueAttribute' /> to set a default prompt.</remarks>
            
            <param name='prompt'>The string to set the prompt to.</param>
        </member>
        <member name="M:Sansar.Simulation.Interaction.SetPrompt(Sansar.Simulation.AgentPrivate,System.String,System.Action{Sansar.Script.OperationCompleteEvent})">
            <summary>Set the Interaction prompt string.</summary>
            <remarks>The prompt text shows when hovering over the object the script is on. The prompt must be 128 characters or less and 4 lines or less. Will only change the prompt for a single user and will not persist across client restarts, server restarts, or leaving the scene (even for changing avatars). It will also be overriden by any global setPrompt calls.</remarks>
            
            
            <param name='agent'>The agent to change the prompt for.</param>
            <param name='prompt'>The string to set the prompt to.</param>
            <param name='handler'>Handler to be called when the event completes.</param>
        </member>
        <member name="M:Sansar.Simulation.Interaction.SetPrompt(Sansar.Simulation.AgentPrivate,System.String)">
            <summary>Set the Interaction prompt string.</summary>
            <remarks>The prompt text shows when hovering over the object the script is on. The prompt must be 128 characters or less and 4 lines or less. Will only change the prompt for a single user and will not persist across client restarts, server restarts, or leaving the scene (even for changing avatars). It will also be overriden by any global setPrompt calls.</remarks>
            
            
            <param name='agent'>The agent to change the prompt for.</param>
            <param name='prompt'>The string to set the prompt to.</param>
        </member>
        <member name="M:Sansar.Simulation.Interaction.SetPrompt(Sansar.Script.SessionId,System.String,System.Action{Sansar.Script.OperationCompleteEvent})">
            <summary>Set the Interaction prompt string.</summary>
            <remarks>The prompt text shows when hovering over the object the script is on. The prompt must be 128 characters or less and 4 lines or less. Will only change the prompt for a single user and will not persist across client restarts, server restarts, or leaving the scene (even for changing avatars). It will also be overriden by any global setPrompt calls.</remarks>
            
            
            <param name='sessionId'>The sessionId of the user to change the prompt for.</param>
            <param name='prompt'>The string to set the prompt to.</param>
            <param name='handler'>Handler to be called when the event completes.</param>
        </member>
        <member name="M:Sansar.Simulation.Interaction.SetPrompt(Sansar.Script.SessionId,System.String)">
            <summary>Set the Interaction prompt string.</summary>
            <remarks>The prompt text shows when hovering over the object the script is on. The prompt must be 128 characters or less and 4 lines or less. Will only change the prompt for a single user and will not persist across client restarts, server restarts, or leaving the scene (even for changing avatars). It will also be overriden by any global setPrompt calls.</remarks>
            
            
            <param name='sessionId'>The sessionId of the user to change the prompt for.</param>
            <param name='prompt'>The string to set the prompt to.</param>
        </member>
        <member name="M:Sansar.Simulation.Interaction.SetEnabled(System.Boolean,Sansar.Script.ScriptBase.OperationComplete)">
             <summary>Change an Interaction state to disabled or enabled.</summary>
             <remarks>All Interactions start off enabled. Disabled interactions do not highlight, do not show their prompt and cannot be 'clicked'.</remarks>
            
             <returns>A legacy eventId</returns>
             <param name='value'>true to enable the Interaction, false to disable it.</param>
             <param name='handler'>Handler to be called when the event completes.</param>
        </member>
        <member name="M:Sansar.Simulation.Interaction.SetPrompt(System.String,Sansar.Script.ScriptBase.OperationComplete)">
             <summary>Set the Interaction prompt string.</summary>
             <remarks>The prompt text shows when hovering over the object the script is on. The prompt must be 128 characters or less and 4 lines or less. Use <see cref='T:Sansar.Script.DefaultValueAttribute' /> to set a default prompt.</remarks>
            
             <returns>A legacy eventId</returns>
             <param name='prompt'>The string to set the prompt to.</param>
             <param name='handler'>Handler to be called when the event completes.</param>
        </member>
        <member name="T:Sansar.Simulation.InteractionData">
            <summary>Handler for Interaction events.</summary><sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsInteractions.h(121)</sourceLocation><remarks></remarks>
        </member>
        <member name="P:Sansar.Simulation.InteractionData.ObjectId">
            <summary></summary><value/><remarks/>
        </member>
        <member name="P:Sansar.Simulation.InteractionData.AgentId">
            <summary> <summary>The SessionId of the agent who clicked the Interaction.</summary></summary><value/><remarks/>
        </member>
        <member name="P:Sansar.Simulation.InteractionData.HitPosition">
            <summary> <summary>The position of the Interaction.</summary></summary><value/><remarks/>
        </member>
        <member name="P:Sansar.Simulation.InteractionData.HitNormal">
            <summary> <summary>The normal direction at the position of the Interaction.</summary></summary><value/><remarks/>
        </member>
        <member name="P:Sansar.Simulation.InteractionData.Origin">
            <summary> <summary>The position of the start of the ray that triggered the Interaction.</summary></summary><value/><remarks/>
        </member>
        <member name="P:Sansar.Simulation.InteractionData.ControlPoint">
            <summary> <summary>The ControlPoint that triggered the Interaction.</summary></summary><value/><remarks/>
        </member>
        <member name="M:Sansar.Simulation.InteractionData.ToString">
            <summary> A string representation of this object. </summary> <returns>A string representation of this object.</returns> <remarks>The format of this string may change between releases.</remarks>
        </member>
        <member name="T:Sansar.Simulation.Mover">
            <summary>The Mover handles adding moves to process for an object.</summary>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsMover.h(50)</sourceLocation>
            <remarks>
            The Movable From Script flag must be set to true in the editor to use the Mover.
            Additionally, player characters and rigid bodies with Static or Dynamic motion types cannot be moved using the Mover.
            Unlike the RigidBodyComponent movement functions, the Mover can be applied to objects that do not contain Volumes.
            </remarks>
        </member>
        <member name="P:Sansar.Simulation.Mover.IsMoving">
            <summary>Property to check if a move command is currently executing for this Mover.</summary>
            <returns>Whether or not this object is currently executing a move (includes pauses).</returns>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsMover.h(64)</sourceLocation><remarks/>
        </member>
        <member name="P:Sansar.Simulation.Mover.MoveCount">
            <summary>The number of move commands waiting to be excuted and currently executing for this Mover.</summary>
            <returns>The number of enqueued move commands. Includes the current active move and any pause commands.</returns>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsMover.h(69)</sourceLocation><remarks/>
        </member>
        <member name="M:Sansar.Simulation.Mover.AddTranslate(Sansar.Vector,System.Action{Sansar.Script.OperationCompleteEvent})">
            <summary>Sets the position of this Mover to a target World Space position.</summary>
            
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsMover.h(75)</sourceLocation>
            <remarks>This asynchronous method queues this command then returns.
            To block until this move command has been executed and completed, pass this method to <see cref='M:Sansar.Script.ScriptBase.WaitFor' /> while in a coroutine.</remarks>
            <value>The return value is an internal event id.</value>
            <param name='position'>The target position.</param>
            <param name='handler'>Handler to be called when the event completes.</param>
        </member>
        <member name="M:Sansar.Simulation.Mover.AddTranslate(Sansar.Vector)">
            <summary>Sets the position of this Mover to a target World Space position.</summary>
            
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsMover.h(75)</sourceLocation>
            <remarks>This asynchronous method queues this command then returns.
            To block until this move command has been executed and completed, pass this method to <see cref='M:Sansar.Script.ScriptBase.WaitFor' /> while in a coroutine.</remarks>
            <value>The return value is an internal event id.</value>
            <param name='position'>The target position.</param>
        </member>
        <member name="M:Sansar.Simulation.Mover.AddRotate(Sansar.Quaternion,System.Action{Sansar.Script.OperationCompleteEvent})">
            <summary>Sets the rotation of this Mover to a target World Space rotation.</summary>
            
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsMover.h(76)</sourceLocation>
            <remarks>This asynchronous method queues this command then returns.
            To block until this move command has been executed and completed, pass this method to <see cref='M:Sansar.Script.ScriptBase.WaitFor' /> while in a coroutine.</remarks>
            <value>The return value is an internal event id.</value>
            <param name='rotation'>The target rotation.</param>
            <param name='handler'>Handler to be called when the event completes.</param>
        </member>
        <member name="M:Sansar.Simulation.Mover.AddRotate(Sansar.Quaternion)">
            <summary>Sets the rotation of this Mover to a target World Space rotation.</summary>
            
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsMover.h(76)</sourceLocation>
            <remarks>This asynchronous method queues this command then returns.
            To block until this move command has been executed and completed, pass this method to <see cref='M:Sansar.Script.ScriptBase.WaitFor' /> while in a coroutine.</remarks>
            <value>The return value is an internal event id.</value>
            <param name='rotation'>The target rotation.</param>
        </member>
        <member name="M:Sansar.Simulation.Mover.AddMove(Sansar.Vector,Sansar.Quaternion,System.Action{Sansar.Script.OperationCompleteEvent})">
            <summary>Sets the transform of this Mover to a target World Space position and rotation.</summary>
            
            
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsMover.h(77)</sourceLocation>
            <remarks>This asynchronous method queues this command then returns.
            To block until this move command has been executed and completed, pass this method to <see cref='M:Sansar.Script.ScriptBase.WaitFor' /> while in a coroutine.</remarks>
            <value>The return value is an internal event id.</value>
            <param name='position'>The target position.</param>
            <param name='rotation'>The target rotation.</param>
            <param name='handler'>Handler to be called when the event completes.</param>
        </member>
        <member name="M:Sansar.Simulation.Mover.AddMove(Sansar.Vector,Sansar.Quaternion)">
            <summary>Sets the transform of this Mover to a target World Space position and rotation.</summary>
            
            
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsMover.h(77)</sourceLocation>
            <remarks>This asynchronous method queues this command then returns.
            To block until this move command has been executed and completed, pass this method to <see cref='M:Sansar.Script.ScriptBase.WaitFor' /> while in a coroutine.</remarks>
            <value>The return value is an internal event id.</value>
            <param name='position'>The target position.</param>
            <param name='rotation'>The target rotation.</param>
        </member>
        <member name="M:Sansar.Simulation.Mover.AddTranslate(Sansar.Vector,System.Double,Sansar.Simulation.MoveMode,System.Action{Sansar.Script.OperationCompleteEvent})">
            <summary>Translate the Mover to the target World Space position over time.</summary>
            
            
            
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsMover.h(78)</sourceLocation>
            <remarks>This asynchronous method queues this command then returns.
            To block until this move command has been executed and completed, pass this method to <see cref='M:Sansar.Script.ScriptBase.WaitFor' /> while in a coroutine.</remarks>
            <value>The return value is an internal event id.</value>
            <param name='targetPosition'>The target position.</param>
            <param name='timeInSeconds'>The time in seconds to move over.</param>
            <param name='interpolationMode'>The method of interpolation to use when moving.</param>
            <param name='handler'>Handler to be called when the event completes.</param>
        </member>
        <member name="M:Sansar.Simulation.Mover.AddTranslate(Sansar.Vector,System.Double,Sansar.Simulation.MoveMode)">
            <summary>Translate the Mover to the target World Space position over time.</summary>
            
            
            
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsMover.h(78)</sourceLocation>
            <remarks>This asynchronous method queues this command then returns.
            To block until this move command has been executed and completed, pass this method to <see cref='M:Sansar.Script.ScriptBase.WaitFor' /> while in a coroutine.</remarks>
            <value>The return value is an internal event id.</value>
            <param name='targetPosition'>The target position.</param>
            <param name='timeInSeconds'>The time in seconds to move over.</param>
            <param name='interpolationMode'>The method of interpolation to use when moving.</param>
        </member>
        <member name="M:Sansar.Simulation.Mover.AddRotate(Sansar.Quaternion,System.Double,Sansar.Simulation.MoveMode,System.Action{Sansar.Script.OperationCompleteEvent})">
            <summary>Rotate the Mover to the target World Space rotation over time.</summary>
            
            
            
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsMover.h(79)</sourceLocation>
            <remarks>This asynchronous method queues this command then returns.
            To block until this move command has been executed and completed, pass this method to <see cref='M:Sansar.Script.ScriptBase.WaitFor' /> while in a coroutine.</remarks>
            <value>The return value is an internal event id.</value>
            <param name='targetRotation'>The target rotation.</param>
            <param name='timeInSeconds'>The time in seconds to move over.</param>
            <param name='interpolationMode'>The method of interpolation to use when moving</param>
            <param name='handler'>Handler to be called when the event completes.</param>
        </member>
        <member name="M:Sansar.Simulation.Mover.AddRotate(Sansar.Quaternion,System.Double,Sansar.Simulation.MoveMode)">
            <summary>Rotate the Mover to the target World Space rotation over time.</summary>
            
            
            
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsMover.h(79)</sourceLocation>
            <remarks>This asynchronous method queues this command then returns.
            To block until this move command has been executed and completed, pass this method to <see cref='M:Sansar.Script.ScriptBase.WaitFor' /> while in a coroutine.</remarks>
            <value>The return value is an internal event id.</value>
            <param name='targetRotation'>The target rotation.</param>
            <param name='timeInSeconds'>The time in seconds to move over.</param>
            <param name='interpolationMode'>The method of interpolation to use when moving</param>
        </member>
        <member name="M:Sansar.Simulation.Mover.AddMove(Sansar.Vector,Sansar.Quaternion,System.Double,Sansar.Simulation.MoveMode,System.Action{Sansar.Script.OperationCompleteEvent})">
            <summary>Translate and rotate the Mover to the target World Space position and rotation over time.</summary>
            
            
            
            
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsMover.h(80)</sourceLocation>
            <remarks>This asynchronous method queues this command then returns.
            To block until this move command has been executed and completed, pass this method to <see cref='M:Sansar.Script.ScriptBase.WaitFor' /> while in a coroutine.</remarks>
            <value>The return value is an internal event id.</value>
            <param name='targetPosition'>The target position.</param>
            <param name='targetRotation'>The target rotation.</param>
            <param name='timeInSeconds'>The time in seconds to move over.</param>
            <param name='interpolationMode'>The method of interpolation to use when moving</param>
            <param name='handler'>Handler to be called when the event completes.</param>
        </member>
        <member name="M:Sansar.Simulation.Mover.AddMove(Sansar.Vector,Sansar.Quaternion,System.Double,Sansar.Simulation.MoveMode)">
            <summary>Translate and rotate the Mover to the target World Space position and rotation over time.</summary>
            
            
            
            
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsMover.h(80)</sourceLocation>
            <remarks>This asynchronous method queues this command then returns.
            To block until this move command has been executed and completed, pass this method to <see cref='M:Sansar.Script.ScriptBase.WaitFor' /> while in a coroutine.</remarks>
            <value>The return value is an internal event id.</value>
            <param name='targetPosition'>The target position.</param>
            <param name='targetRotation'>The target rotation.</param>
            <param name='timeInSeconds'>The time in seconds to move over.</param>
            <param name='interpolationMode'>The method of interpolation to use when moving</param>
        </member>
        <member name="M:Sansar.Simulation.Mover.AddTranslateOffset(Sansar.Vector,System.Action{Sansar.Script.OperationCompleteEvent})">
            <summary>Sets the position of this Mover to a target Local Space position.</summary>
            
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsMover.h(82)</sourceLocation>
            <remarks>This asynchronous method queues this command then returns.
            To block until this move command has been executed and completed, pass this method to <see cref='M:Sansar.Script.ScriptBase.WaitFor' /> while in a coroutine.</remarks>
            <value>The return value is an internal event id.</value>
            <param name='positionOffset'>The local space position offset.</param>
            <param name='handler'>Handler to be called when the event completes.</param>
        </member>
        <member name="M:Sansar.Simulation.Mover.AddTranslateOffset(Sansar.Vector)">
            <summary>Sets the position of this Mover to a target Local Space position.</summary>
            
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsMover.h(82)</sourceLocation>
            <remarks>This asynchronous method queues this command then returns.
            To block until this move command has been executed and completed, pass this method to <see cref='M:Sansar.Script.ScriptBase.WaitFor' /> while in a coroutine.</remarks>
            <value>The return value is an internal event id.</value>
            <param name='positionOffset'>The local space position offset.</param>
        </member>
        <member name="M:Sansar.Simulation.Mover.AddRotateOffset(Sansar.Quaternion,System.Action{Sansar.Script.OperationCompleteEvent})">
            <summary>Sets the rotation of this Mover to a target Local Space rotation.</summary>
            
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsMover.h(83)</sourceLocation>
            <remarks>This asynchronous method queues this command then returns.
            To block until this move command has been executed and completed, pass this method to <see cref='M:Sansar.Script.ScriptBase.WaitFor' /> while in a coroutine.</remarks>
            <value>The return value is an internal event id.</value>
            <param name='rotationOffset'>The local space rotation offset.</param>
            <param name='handler'>Handler to be called when the event completes.</param>
        </member>
        <member name="M:Sansar.Simulation.Mover.AddRotateOffset(Sansar.Quaternion)">
            <summary>Sets the rotation of this Mover to a target Local Space rotation.</summary>
            
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsMover.h(83)</sourceLocation>
            <remarks>This asynchronous method queues this command then returns.
            To block until this move command has been executed and completed, pass this method to <see cref='M:Sansar.Script.ScriptBase.WaitFor' /> while in a coroutine.</remarks>
            <value>The return value is an internal event id.</value>
            <param name='rotationOffset'>The local space rotation offset.</param>
        </member>
        <member name="M:Sansar.Simulation.Mover.AddMoveOffset(Sansar.Vector,Sansar.Quaternion,System.Action{Sansar.Script.OperationCompleteEvent})">
            <summary>Sets the transform of this Mover to a target Local Space position and rotation.</summary>
            
            
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsMover.h(84)</sourceLocation>
            <remarks>This asynchronous method queues this command then returns.
            To block until this move command has been executed and completed, pass this method to <see cref='M:Sansar.Script.ScriptBase.WaitFor' /> while in a coroutine.</remarks>
            <value>The return value is an internal event id.</value>
            <param name='positionOffset'>The local space position offset.</param>
            <param name='rotationOffset'>The local space rotation offset.</param>
            <param name='handler'>Handler to be called when the event completes.</param>
        </member>
        <member name="M:Sansar.Simulation.Mover.AddMoveOffset(Sansar.Vector,Sansar.Quaternion)">
            <summary>Sets the transform of this Mover to a target Local Space position and rotation.</summary>
            
            
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsMover.h(84)</sourceLocation>
            <remarks>This asynchronous method queues this command then returns.
            To block until this move command has been executed and completed, pass this method to <see cref='M:Sansar.Script.ScriptBase.WaitFor' /> while in a coroutine.</remarks>
            <value>The return value is an internal event id.</value>
            <param name='positionOffset'>The local space position offset.</param>
            <param name='rotationOffset'>The local space rotation offset.</param>
        </member>
        <member name="M:Sansar.Simulation.Mover.AddTranslateOffset(Sansar.Vector,System.Double,Sansar.Simulation.MoveMode,System.Action{Sansar.Script.OperationCompleteEvent})">
            <summary>Translate the Mover to the target Local Space position over time.</summary>
            
            
            
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsMover.h(85)</sourceLocation>
            <remarks>This asynchronous method queues this command then returns.
            To block until this move command has been executed and completed, pass this method to <see cref='M:Sansar.Script.ScriptBase.WaitFor' /> while in a coroutine.</remarks>
            <value>The return value is an internal event id.</value>
            <param name='positionOffset'>The local space position offset.</param>
            <param name='timeInSeconds'>The time in seconds to move over.</param>
            <param name='interpolationMode'>The method of interpolation to use when moving.</param>
            <param name='handler'>Handler to be called when the event completes.</param>
        </member>
        <member name="M:Sansar.Simulation.Mover.AddTranslateOffset(Sansar.Vector,System.Double,Sansar.Simulation.MoveMode)">
            <summary>Translate the Mover to the target Local Space position over time.</summary>
            
            
            
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsMover.h(85)</sourceLocation>
            <remarks>This asynchronous method queues this command then returns.
            To block until this move command has been executed and completed, pass this method to <see cref='M:Sansar.Script.ScriptBase.WaitFor' /> while in a coroutine.</remarks>
            <value>The return value is an internal event id.</value>
            <param name='positionOffset'>The local space position offset.</param>
            <param name='timeInSeconds'>The time in seconds to move over.</param>
            <param name='interpolationMode'>The method of interpolation to use when moving.</param>
        </member>
        <member name="M:Sansar.Simulation.Mover.AddRotateOffset(Sansar.Quaternion,System.Double,Sansar.Simulation.MoveMode,System.Action{Sansar.Script.OperationCompleteEvent})">
            <summary>Rotate the Mover to the target Local Space rotation over time.</summary>
            
            
            
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsMover.h(86)</sourceLocation>
            <remarks>This asynchronous method queues this command then returns.
            To block until this move command has been executed and completed, pass this method to <see cref='M:Sansar.Script.ScriptBase.WaitFor' /> while in a coroutine.</remarks>
            <value>The return value is an internal event id.</value>
            <param name='rotationOffset'>The local space rotation offset.</param>
            <param name='timeInSeconds'>The time in seconds to move over.</param>
            <param name='interpolationMode'>The method of interpolation to use when moving</param>
            <param name='handler'>Handler to be called when the event completes.</param>
        </member>
        <member name="M:Sansar.Simulation.Mover.AddRotateOffset(Sansar.Quaternion,System.Double,Sansar.Simulation.MoveMode)">
            <summary>Rotate the Mover to the target Local Space rotation over time.</summary>
            
            
            
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsMover.h(86)</sourceLocation>
            <remarks>This asynchronous method queues this command then returns.
            To block until this move command has been executed and completed, pass this method to <see cref='M:Sansar.Script.ScriptBase.WaitFor' /> while in a coroutine.</remarks>
            <value>The return value is an internal event id.</value>
            <param name='rotationOffset'>The local space rotation offset.</param>
            <param name='timeInSeconds'>The time in seconds to move over.</param>
            <param name='interpolationMode'>The method of interpolation to use when moving</param>
        </member>
        <member name="M:Sansar.Simulation.Mover.AddMoveOffset(Sansar.Vector,Sansar.Quaternion,System.Double,Sansar.Simulation.MoveMode,System.Action{Sansar.Script.OperationCompleteEvent})">
            <summary>Translate and rotate the Mover to the target Local Space position and rotation over time.</summary>
            
            
            
            
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsMover.h(87)</sourceLocation>
            <remarks>This asynchronous method queues this command then returns.
            To block until this move command has been executed and completed, pass this method to <see cref='M:Sansar.Script.ScriptBase.WaitFor' /> while in a coroutine.</remarks>
            <value>The return value is an internal event id.</value>
            <param name='positionOffset'>The local space position offset.</param>
            <param name='rotationOffset'>The local space rotation offset.</param>
            <param name='timeInSeconds'>The time in seconds to move over.</param>
            <param name='interpolationMode'>The method of interpolation to use when moving</param>
            <param name='handler'>Handler to be called when the event completes.</param>
        </member>
        <member name="M:Sansar.Simulation.Mover.AddMoveOffset(Sansar.Vector,Sansar.Quaternion,System.Double,Sansar.Simulation.MoveMode)">
            <summary>Translate and rotate the Mover to the target Local Space position and rotation over time.</summary>
            
            
            
            
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsMover.h(87)</sourceLocation>
            <remarks>This asynchronous method queues this command then returns.
            To block until this move command has been executed and completed, pass this method to <see cref='M:Sansar.Script.ScriptBase.WaitFor' /> while in a coroutine.</remarks>
            <value>The return value is an internal event id.</value>
            <param name='positionOffset'>The local space position offset.</param>
            <param name='rotationOffset'>The local space rotation offset.</param>
            <param name='timeInSeconds'>The time in seconds to move over.</param>
            <param name='interpolationMode'>The method of interpolation to use when moving</param>
        </member>
        <member name="M:Sansar.Simulation.Mover.StopAndClear(System.Action{Sansar.Script.OperationCompleteEvent})">
            <summary>Stops the current movement and clears any further movements for this Mover.</summary>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsMover.h(89)</sourceLocation>
            <remarks>This method is not enqueued like other operations on the Mover.
            To block until the operation has executed, pass this method to <see cref='M:Sansar.Script.ScriptBase.WaitFor' /> while in a coroutine.</remarks>
            <value>The return value is an internal event id.</value>
            <param name='handler'>Handler to be called when the event completes.</param>
        </member>
        <member name="M:Sansar.Simulation.Mover.StopAndClear">
            <summary>Stops the current movement and clears any further movements for this Mover.</summary>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsMover.h(89)</sourceLocation>
            <remarks>This method is not enqueued like other operations on the Mover.
            To block until the operation has executed, pass this method to <see cref='M:Sansar.Script.ScriptBase.WaitFor' /> while in a coroutine.</remarks>
            <value>The return value is an internal event id.</value>
        </member>
        <member name="M:Sansar.Simulation.Mover.AddPause(System.Double,System.Action{Sansar.Script.OperationCompleteEvent})">
            <summary>Adds a pause of the given length for this Mover.</summary>
            
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsMover.h(90)</sourceLocation>
            <remarks>This asynchronous method queues this command then returns.
            To block until this move command has been executed and completed, pass this method to <see cref='M:Sansar.Script.ScriptBase.WaitFor' /> while in a coroutine.</remarks>
            <value>The return value is an internal event id.</value>
            <param name='timeInSeconds'>The amount of time in seconds that the movement should be paused.</param>
            <param name='handler'>Handler to be called when the event completes.</param>
        </member>
        <member name="M:Sansar.Simulation.Mover.AddPause(System.Double)">
            <summary>Adds a pause of the given length for this Mover.</summary>
            
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsMover.h(90)</sourceLocation>
            <remarks>This asynchronous method queues this command then returns.
            To block until this move command has been executed and completed, pass this method to <see cref='M:Sansar.Script.ScriptBase.WaitFor' /> while in a coroutine.</remarks>
            <value>The return value is an internal event id.</value>
            <param name='timeInSeconds'>The amount of time in seconds that the movement should be paused.</param>
        </member>
        <member name="M:Sansar.Simulation.Mover.ToString">
            <summary> A string representation of this object. </summary> <returns>A string representation of this object.</returns> <remarks>The format of this string may change between releases.</remarks>
        </member>
        <member name="T:Sansar.Simulation.ObjectPrivate">
            <summary>Interface to an object in a <see cref='T:Sansar.Simulation.Cluster'/> in the Scene.</summary><sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsObject.h(50)</sourceLocation>
            <remarks>Provides basic information about an object.</remarks>
        </member>
        <member name="T:Sansar.Simulation.ObjectPrivate.AddInteractionData">
            <summary>The result of AddInteraction request.</summary><remarks>See <see cref="M:Sansar.Simulation.ObjectPrivate.AddInteraction(System.String,System.Boolean,System.Action{Sansar.Simulation.ObjectPrivate.AddInteractionData})"/></remarks>
        </member>
        <member name="P:Sansar.Simulation.ObjectPrivate.AddInteractionData.Interaction">
            <summary>The interaction that was added.</summary><value /><remarks>Null if adding the Interaction failed or there was already an Interaction on the object.</remarks>
        </member>
        <member name="M:Sansar.Simulation.ObjectPrivate.AddInteractionData.ToString">
            <summary> A string representation of this object. </summary> <returns>A string representation of this object.</returns> <remarks>The format of this string may change between releases.</remarks>
        </member>
        <member name="P:Sansar.Simulation.ObjectPrivate.ObjectId">
            <summary>This ObjectPrivate Id. Unique to this Scene.</summary><sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsObject.h(87)</sourceLocation>
            <remarks></remarks>
            <value></value>
        </member>
        <member name="P:Sansar.Simulation.ObjectPrivate.Name">
            <summary>This ObjectPrivate name, as specified in the editor.</summary><sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsObject.h(92)</sourceLocation>
            <remarks></remarks>
            <value></value>
        </member>
        <member name="P:Sansar.Simulation.ObjectPrivate.Position">
            <summary>The current position of the ObjectPrivate in world frame.</summary><sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsObject.h(62)</sourceLocation>
            <remarks></remarks>
            <value></value>
        </member>
        <member name="P:Sansar.Simulation.ObjectPrivate.ForwardVector">
            <summary>The forward vector of the ObjectPrivate in the world frame.</summary><sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsObject.h(65)</sourceLocation>
            <value>A normalized vector.</value>
            <remarks></remarks>
        </member>
        <member name="P:Sansar.Simulation.ObjectPrivate.RightVector">
            <summary>The right vector of the ObjectPrivate in the world frame.</summary><sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsObject.h(66)</sourceLocation>
            <value>A normalized vector.</value>
            <remarks></remarks>
        </member>
        <member name="P:Sansar.Simulation.ObjectPrivate.UpVector">
            <summary>The up vector of the ObjectPrivate in the world frame.</summary><sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsObject.h(67)</sourceLocation>
            <value>A normalized vector.</value>
            <remarks></remarks>
        </member>
        <member name="P:Sansar.Simulation.ObjectPrivate.Rotation">
            <summary>The current rotation of the ObjectPrivate in the world frame.</summary><sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsObject.h(63)</sourceLocation>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Sansar.Simulation.ObjectPrivate.InitialPosition">
            <summary>The position of the ObjectPrivate in world frame before simulation started.</summary><sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsObject.h(69)</sourceLocation>
            <remarks></remarks>
            <value></value>
        </member>
        <member name="P:Sansar.Simulation.ObjectPrivate.InitialRotation">
            <summary>The rotation of the ObjectPrivate in world frame before simulation started.</summary><sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsObject.h(70)</sourceLocation>
            <remarks></remarks>
            <value></value>
        </member>
        <member name="P:Sansar.Simulation.ObjectPrivate.IsMovable">
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsObject.h(72)</sourceLocation>
            <seealso cref="T:Sansar.Simulation.Mover"/>
            <remarks></remarks>
            <value></value>
        </member>
        <member name="P:Sansar.Simulation.ObjectPrivate.Mover">
            <value></value>
        </member>
        <member name="M:Sansar.Simulation.ObjectPrivate.LookupScripts">
            <summary>
            Get handles to the scripts on the ObjectPrivate
            </summary>
            <returns>object [] of Objects of the scripts on the ObjectPrivate</returns><sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsObject.h(82)</sourceLocation>
            <remarks>The returned Objects are the created script types. For example if a script on the object is <c>public MyTestObject : ObjectScript</c> then the Objects in the array will be of type <c>MyTestObject</c>.</remarks>
        </member>
        <member name="M:Sansar.Simulation.ObjectPrivate.GetComponent(Sansar.Simulation.ComponentType,System.UInt32)">
            <summary>
            Get interfaces to the components that are available at runtime.
            </summary>
            
            
            <returns></returns><sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsObject.h(75)</sourceLocation>
            <remarks></remarks>
            <param name='componentType'><see cref='T:Sansar.Simulation.ComponentType'/>.</param>
            <param name='index'>uint32 index</param>
        </member>
        <member name="M:Sansar.Simulation.ObjectPrivate.GetComponentCount(Sansar.Simulation.ComponentType)">
            <summary>
            Get the number of components of a particular component type. <see cref='T:Sansar.Simulation.ComponentType'/>
            </summary>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsObject.h(77)</sourceLocation>
            <remarks></remarks><returns/>
            <param name='componentType'><see cref='T:Sansar.Simulation.ComponentType'/></param>
        </member>
        <member name="M:Sansar.Simulation.ObjectPrivate.AddInteraction(System.String,System.Boolean,System.Action{Sansar.Simulation.ObjectPrivate.AddInteractionData})">
            <summary>
            Add an Interaction to the object to make it clickable.
            </summary>
            
            
            <remarks>The <see cref='T:Sansar.Simulation.ObjectPrivate.AddInteractionData' /> will include the Interaction object which can be subscribed to.</remarks>
            
            
            <param name='prompt'>The string prompt to show on hover, leave blank to only highlight the object.</param>
            <param name='enabled'>Whether or not the interaction is enabled.</param>
            <param name='handler'>Handler to be called when the event completes.</param>
        </member>
        <member name="M:Sansar.Simulation.ObjectPrivate.AddInteraction(System.String,System.Boolean)">
            <summary>
            Add an Interaction to the object to make it clickable.
            </summary>
            
            
            <remarks>The <see cref='T:Sansar.Simulation.ObjectPrivate.AddInteractionData' /> will include the Interaction object which can be subscribed to.</remarks>
            
            
            <param name='prompt'>The string prompt to show on hover, leave blank to only highlight the object.</param>
            <param name='enabled'>Whether or not the interaction is enabled.</param>
        </member>
        <member name="M:Sansar.Simulation.ObjectPrivate.ToString">
            <summary> A string representation of this object. </summary> <returns>A string representation of this object.</returns> <remarks>The format of this string may change between releases.</remarks>
        </member>
        <member name="M:Sansar.Simulation.ObjectPrivate.FindScript``1">
            <summary>
            Find scripts that extend a particular class or implement a specific interface. Used to find a specific script interface on an object.
            </summary>
            <typeparam name="T"></typeparam>
            <returns>The first found script that implements T.</returns>
            <seealso cref="M:Sansar.Simulation.ObjectPrivate.FindScripts``1(System.String)"/>
            <seealso cref="T:Sansar.Script.Reflective"/>
        </member>
        <member name="M:Sansar.Simulation.ObjectPrivate.TryGetComponent``1(System.UInt32,``0@)">
            <summary>
            Try to get a component of a particular type from this ObjectPrivate
            </summary>
            <typeparam name="ComponentClass">The component type. <see cref='T:Sansar.Simulation.AnimationComponent'/> <see cref='T:Sansar.Simulation.RigidBodyComponent'/></typeparam>
            <param name="index">The index of this component type to get. zero based index.</param>
            <param name="component">The component out parameter of the correct type to get.</param>
            <returns>True if a component of the correct type at index is found, false otherwise.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Sansar.Simulation.ObjectPrivate.TryGetFirstComponent``1(``0@)">
            <summary>
            Try to get the first component of a specific type on this ObjectPrivate
            </summary>
            <typeparam name="ComponentClass">The component type. <see cref='T:Sansar.Simulation.AnimationComponent'/> and <see cref='T:Sansar.Simulation.RigidBodyComponent'/></typeparam>
            <param name="component">Out parameter of the correct component type.</param>
            <returns>Returns true if able to get a component of the correct type on this ObjectPrivate.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Sansar.Simulation.ObjectPrivate.FindScripts``1(System.String)">
            <summary>
            Looks up scripts on this ObjectPrivate that match the interface type by class name.
            </summary>
            <param name="name">The type name of the script's class to find.</param>
            <typeparam name="TInterface">The interface to find.</typeparam>
            <returns>An IEnumerable which contains all scripts of the given type name on this ObjectPrivate that match the given interface.</returns>
            <remarks>The name given corresponds to the <see cref="P:Type.FullName"/> of the main script class. Multiple scripts may define unrelated types of the same name, but only registered scripts that match the interface of TInterface will be returned.</remarks>
        </member>
        <member name="M:Sansar.Simulation.ObjectPrivate.FindScripts``1">
            <summary>
            Looks up scripts on this ObjectPrivate that match the interface type.
            </summary>
            <typeparam name="TInterface">The interface to find.</typeparam>
            <returns>An IEnumerable which contains all scripts of the given type name on this ObjectPrivate that match the given interface.</returns>
            <remarks>The name given corresponds to the <see cref="P:Type.FullName"/> of the main script class. Multiple scripts may define unrelated types of the same name, but only registered scripts that match the interface of TInterface will be returned.</remarks>
        </member>
        <member name="T:Sansar.Simulation.ObjectPublic">
            <summary>The ObjectPublic class is a more limited subset of the <see cref='T:Sansar.Simulation.ObjectPrivate'/> API for use by other scripts in the scene.</summary>
            <exception cref='T:System.NullReferenceException'>Thrown when using an ObjectPublic for an object which is no longer in the scene.</exception>
            <remarks><see cref='T:Sansar.Simulation.ObjectPrivate'/> has wider access than ObjectPublic. Objects may be removed from the scene at any time. Attempting to use an ObjectPublic interface for an object no longer in the scene will throw a NullReferenceException.</remarks>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsObject.h(164)</sourceLocation>
        </member>
        <member name="P:Sansar.Simulation.ObjectPublic.ObjectId">
            <summary>This ObjectPublic Id. Unique to this Scene.</summary><sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsObject.h(87)</sourceLocation>
            <remarks></remarks>
            <value></value>
        </member>
        <member name="P:Sansar.Simulation.ObjectPublic.Name">
            <summary>This ObjectPublic name, as specified in the editor.</summary><sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsObject.h(92)</sourceLocation>
            <remarks></remarks>
            <value></value>
        </member>
        <member name="P:Sansar.Simulation.ObjectPublic.Position">
            <summary>The current position of the ObjectPublic in world frame.</summary><sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsObject.h(62)</sourceLocation>
            <remarks></remarks>
            <value></value>
        </member>
        <member name="P:Sansar.Simulation.ObjectPublic.ForwardVector">
            <summary>The forward vector of the ObjectPublic in the world frame.</summary><sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsObject.h(65)</sourceLocation>
            <value>A normalized vector.</value>
            <remarks></remarks>
        </member>
        <member name="P:Sansar.Simulation.ObjectPublic.RightVector">
            <summary>The right vector of the ObjectPublic in the world frame.</summary><sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsObject.h(66)</sourceLocation>
            <value>A normalized vector.</value>
            <remarks></remarks>
        </member>
        <member name="P:Sansar.Simulation.ObjectPublic.UpVector">
            <summary>The up vector of the ObjectPublic in the world frame.</summary><sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsObject.h(67)</sourceLocation>
            <value>A normalized vector.</value>
            <remarks></remarks>
        </member>
        <member name="P:Sansar.Simulation.ObjectPublic.Rotation">
            <summary>The current rotation of the ObjectPublic in the world frame.</summary><sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsObject.h(63)</sourceLocation>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Sansar.Simulation.ObjectPublic.InitialPosition">
            <summary>The position of the ObjectPublic in world frame before simulation started.</summary><sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsObject.h(69)</sourceLocation>
            <remarks></remarks>
            <value></value>
        </member>
        <member name="P:Sansar.Simulation.ObjectPublic.InitialRotation">
            <summary>The rotation of the ObjectPublic in world frame before simulation started.</summary><sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsObject.h(70)</sourceLocation>
            <remarks></remarks>
            <value></value>
        </member>
        <member name="M:Sansar.Simulation.ObjectPublic.ToString">
            <summary> A string representation of this object. </summary> <returns>A string representation of this object.</returns> <remarks>The format of this string may change between releases.</remarks>
        </member>
        <member name="T:Sansar.Simulation.AudioComponent">
            <summary>The AudioComponent handles interactions with audio components.</summary><sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsAudioComponent.h(29)</sourceLocation><remarks/>
        </member>
        <member name="F:Sansar.Simulation.AudioComponent.ComponentType">
            <summary>The <see cref='F:Sansar.Simulation.AudioComponent.ComponentType' /> of this component</summary>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsAudioComponent.h(35)</sourceLocation>
            <remarks></remarks>
        </member>
        <member name="P:Sansar.Simulation.AudioComponent.ComponentId">
            <summary>Retrieves the component id for this AudioComponent.</summary>
            <returns>The id.</returns>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsAudioComponent.h(59)</sourceLocation><remarks/>
        </member>
        <member name="P:Sansar.Simulation.AudioComponent.Name">
            <summary>This AudioComponent name, as specified in the editor.</summary><sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsAudioComponent.h(67)</sourceLocation>
            <remarks></remarks>
            <value></value>
        </member>
        <member name="M:Sansar.Simulation.AudioComponent.PlaySoundOnComponent(Sansar.Simulation.SoundResource,Sansar.Simulation.PlaySettings)">
            <summary>Play sound on this component (and follow its position).</summary>
            <remarks>Plays for all agents in this scene.  As the component moves, this sound will follow the component's location.</remarks>
            <returns>The play handle for controlling playback.</returns>
            
            
            <param name='soundResource'>The sound resource to play.</param>
            <param name='playSettings'>The play parameters.</param>
        </member>
        <member name="M:Sansar.Simulation.AudioComponent.PlayStreamOnComponent(Sansar.Simulation.StreamChannel,System.Single)">
            <summary>Play web audio stream on this component (and follow its position).</summary>
            <remarks>Plays for all agents in this scene.  As the component moves, this stream will follow the component's location.</remarks>
            <returns>The play handle for controlling playback.</returns>
            
            
            <param name='streamChannel'>Channel of the audio stream to play.</param>
            <param name='loudness'>Relative loudness in dB.</param>
        </member>
        <member name="M:Sansar.Simulation.AudioComponent.ToString">
            <summary> A string representation of this object. </summary> <returns>A string representation of this object.</returns> <remarks>The format of this string may change between releases.</remarks>
        </member>
        <member name="T:Sansar.Simulation.CameraComponent">
            <summary>The CameraComponent handles interactions with cameras.</summary><sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsCameraComponent.h(23)</sourceLocation><remarks/>
        </member>
        <member name="F:Sansar.Simulation.CameraComponent.ComponentType">
            <summary>The <see cref='F:Sansar.Simulation.CameraComponent.ComponentType' /> of this component</summary>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsCameraComponent.h(30)</sourceLocation>
            <remarks></remarks>
        </member>
        <member name="P:Sansar.Simulation.CameraComponent.ComponentId">
            <summary>Retrieves the component id for this CameraComponent.</summary>
            <returns>The id.</returns>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsCameraComponent.h(41)</sourceLocation><remarks/>
        </member>
        <member name="P:Sansar.Simulation.CameraComponent.Name">
            <summary>This CameraComponent name, as specified in the editor.</summary><sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsCameraComponent.h(49)</sourceLocation>
            <remarks></remarks>
            <value></value>
        </member>
        <member name="M:Sansar.Simulation.CameraComponent.ToString">
            <summary> A string representation of this object. </summary> <returns>A string representation of this object.</returns> <remarks>The format of this string may change between releases.</remarks>
        </member>
        <member name="T:Sansar.Simulation.TwitchData">
            <summary>Twitch events are generated in response to twitch stream interaction.</summary>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsClient.h(176)</sourceLocation>
            <remarks/>
        </member>
        <member name="P:Sansar.Simulation.TwitchData.EventType">
            <summary> The event which occurred</summary><value/><remarks/>
        </member>
        <member name="P:Sansar.Simulation.TwitchData.SessionId">
            <summary> The client which generated the event.</summary><value/><remarks/>
        </member>
        <member name="P:Sansar.Simulation.TwitchData.Intensity">
            <summary> The intensity of the event. Range is (0 ..1]</summary><value/><remarks/>
        </member>
        <member name="M:Sansar.Simulation.TwitchData.ToString">
            <summary> A string representation of this object. </summary> <returns>A string representation of this object.</returns> <remarks>The format of this string may change between releases.</remarks>
        </member>
        <member name="T:Sansar.Simulation.CommandData">
            <summary>Command events are generated by the client when input events occur.</summary> <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsClient.h(222)</sourceLocation>
            <remarks>
            <list type="table"><listheader><term>Command</term><description>Default Key Binding</description></listheader>
            <item><term>Trigger</term><description>Left Mouse Button</description></item>
            <item><term>PrimaryAction</term><description>F</description></item>
            <item><term>SecondaryAction</term><description>R</description></item>
            <item><term>Modifier</term><description>Shift</description></item>
            <item><term>Action1 to Action0</term><description>Number keys 1 to 0</description></item>
            <item><term>Confirm</term><description>Enter</description></item>
            <item><term>Cancel</term><description>Escape</description></item>
            <item><term>SelectLeft</term><description>Left arrow</description></item>
            <item><term>SelectRight</term><description>Right arrow</description></item>
            <item><term>SelectUp</term><description>Up arrow</description></item>
            <item><term>SelectDown</term><description>Down arrow</description></item>
            <item><term>Keypad0 to Keypad9</term><description>Numberpad keys 0 to 9</description></item>
            <item><term>KeypadEnter</term><description>Numberpad Enter</description></item>
            </list>
            <para>An example script for handling client commands:</para>
            <example>
            <code lang="C#" src="examples/CommandExample.cs"/>
            </example>
            </remarks>
        </member>
        <member name="P:Sansar.Simulation.CommandData.Command">
            <summary> The command which occurred.</summary><value/><remarks/>
        </member>
        <member name="P:Sansar.Simulation.CommandData.Action">
            <summary> The action which occurred.</summary><value/><remarks/>
        </member>
        <member name="P:Sansar.Simulation.CommandData.SessionId">
            <summary> The client which generated the event.</summary><value/><remarks/>
        </member>
        <member name="P:Sansar.Simulation.CommandData.TargetingOrigin">
            <summary></summary><value/><remarks/>
        </member>
        <member name="P:Sansar.Simulation.CommandData.TargetingPosition">
            <summary></summary><value/><remarks/>
        </member>
        <member name="P:Sansar.Simulation.CommandData.TargetingNormal">
            <summary></summary><value/><remarks/>
        </member>
        <member name="P:Sansar.Simulation.CommandData.TargetingComponent">
            <summary></summary><value/><remarks/>
        </member>
        <member name="P:Sansar.Simulation.CommandData.SimulationFrame">
            <summary></summary><value/><remarks/>
        </member>
        <member name="P:Sansar.Simulation.CommandData.ControlPoint">
            <summary></summary><value/><remarks/>
        </member>
        <member name="P:Sansar.Simulation.CommandData.MouseLookMode">
            <summary></summary><value/><remarks/>
        </member>
        <member name="P:Sansar.Simulation.CommandData.CameraControlMode">
            <summary></summary><value/><remarks/>
        </member>
        <member name="P:Sansar.Simulation.CommandData.IsAimTarget">
            <summary></summary><value/><remarks/>
        </member>
        <member name="M:Sansar.Simulation.CommandData.ToString">
            <summary> A string representation of this object. </summary> <returns>A string representation of this object.</returns> <remarks>The format of this string may change between releases.</remarks>
        </member>
        <member name="T:Sansar.Simulation.PlayHandle">
            <summary>The PlayHandle represents audio play handles.</summary><sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsPlayHandle.h(46)</sourceLocation><remarks/>
        </member>
        <member name="M:Sansar.Simulation.PlayHandle.SetLoudness(System.Single,System.Action{Sansar.Script.OperationCompleteEvent})">
            <summary>Sets the loudness for this PlayHandle.</summary>
            
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsPlayHandle.h(71)</sourceLocation>
            <remarks>This asynchronous method queues the write then returns.
            To block until the write has occurred, pass this method to <see cref='M:Sansar.Script.ScriptBase.WaitFor' /> while in a coroutine.</remarks>
            <value>The return value is an internal event id.</value>
            <param name='loudness'>The loudness (in dB).</param>
            <param name='handler'>Handler to be called when the event completes.</param>
        </member>
        <member name="M:Sansar.Simulation.PlayHandle.SetLoudness(System.Single)">
            <summary>Sets the loudness for this PlayHandle.</summary>
            
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsPlayHandle.h(71)</sourceLocation>
            <remarks>This asynchronous method queues the write then returns.
            To block until the write has occurred, pass this method to <see cref='M:Sansar.Script.ScriptBase.WaitFor' /> while in a coroutine.</remarks>
            <value>The return value is an internal event id.</value>
            <param name='loudness'>The loudness (in dB).</param>
        </member>
        <member name="M:Sansar.Simulation.PlayHandle.SetPitchShift(System.Single,System.Action{Sansar.Script.OperationCompleteEvent})">
            <summary>Sets the relative pitch for this PlayHandle.</summary>
            
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsPlayHandle.h(79)</sourceLocation>
            <remarks>This asynchronous method queues the write then returns.
            To block until the write has occurred, pass this method to <see cref='M:Sansar.Script.ScriptBase.WaitFor' /> while in a coroutine.</remarks>
            <value>The return value is an internal event id.</value>
            <param name='pitch'>The relative pitch in semitones.  (default = 0)</param>
            <param name='handler'>Handler to be called when the event completes.</param>
        </member>
        <member name="M:Sansar.Simulation.PlayHandle.SetPitchShift(System.Single)">
            <summary>Sets the relative pitch for this PlayHandle.</summary>
            
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsPlayHandle.h(79)</sourceLocation>
            <remarks>This asynchronous method queues the write then returns.
            To block until the write has occurred, pass this method to <see cref='M:Sansar.Script.ScriptBase.WaitFor' /> while in a coroutine.</remarks>
            <value>The return value is an internal event id.</value>
            <param name='pitch'>The relative pitch in semitones.  (default = 0)</param>
        </member>
        <member name="M:Sansar.Simulation.PlayHandle.Stop(System.Boolean,System.Action{Sansar.Script.OperationCompleteEvent})">
            <summary>Stops the sound on this PlayHandle.</summary>
            
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsPlayHandle.h(63)</sourceLocation>
            <remarks>This asynchronous method queues the write then returns.</remarks>
            <value>The return value is an internal event id.</value>
            <param name='fadeout'>Will fade out if true.</param>
            <param name='handler'>Handler to be called when the event completes.</param>
        </member>
        <member name="M:Sansar.Simulation.PlayHandle.Stop(System.Action{Sansar.Script.OperationCompleteEvent})">
            <summary>Stops the sound on this PlayHandle.</summary>
            
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsPlayHandle.h(63)</sourceLocation>
            <remarks>This asynchronous method queues the write then returns.</remarks>
            <value>The return value is an internal event id.</value>
            <param name='handler'>Handler to be called when the event completes.</param>
        </member>
        <member name="M:Sansar.Simulation.PlayHandle.Stop">
            <summary>Stops the sound on this PlayHandle.</summary>
            
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsPlayHandle.h(63)</sourceLocation>
            <remarks>This asynchronous method queues the write then returns.</remarks>
            <value>The return value is an internal event id.</value>
        </member>
        <member name="M:Sansar.Simulation.PlayHandle.Stop(System.Boolean)">
            <summary>Stops the sound on this PlayHandle.</summary>
            
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsPlayHandle.h(63)</sourceLocation>
            <remarks>This asynchronous method queues the write then returns.</remarks>
            <value>The return value is an internal event id.</value>
            <param name='fadeout'>Will fade out if true.</param>
        </member>
        <member name="M:Sansar.Simulation.PlayHandle.GetStatus">
            <summary>Returns the current PlayStatus.</summary>
            <returns>The current PlayStatus.</returns>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsPlayHandle.h(84)</sourceLocation><remarks/>
        </member>
        <member name="M:Sansar.Simulation.PlayHandle.GetRemainingSeconds">
            <summary>Returns the number of seconds remaining.</summary>
            <returns>The number of seconds remaining. (0 if done playing, -1 if looped)</returns>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsPlayHandle.h(89)</sourceLocation><remarks/>
        </member>
        <member name="M:Sansar.Simulation.PlayHandle.GetLoudness">
            <summary>Retrieves the loudness for this PlayHandle.</summary>
            <returns>The loudness (in dB).</returns>
            <remarks>This synchronous method returns the broadcasted loudness.  It does not wait to hear back from clients.</remarks>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsPlayHandle.h(95)</sourceLocation><remarks/>
        </member>
        <member name="M:Sansar.Simulation.PlayHandle.GetPitchShift">
            <summary>Retrieves the relative pitch for this PlayHandle.</summary>
            <returns>The relative pitch.</returns>
            <remarks>This synchronous method returns the broadcasted pitch.  It does not wait to hear back from clients.</remarks>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsPlayHandle.h(101)</sourceLocation><remarks/>
        </member>
        <member name="M:Sansar.Simulation.PlayHandle.Dispose">
            <summary>
            Releases resources held by this instance.
            </summary>
            <remarks/><sourceLocation>Common/Libraries\LLScript/InstanceInterface.h(106)</sourceLocation>
        </member>
        <member name="M:Sansar.Simulation.PlayHandle.Finalize">
            <summary/><remarks>Ensures that this instance has been Disposed.</remarks>
        </member>
        <member name="M:Sansar.Simulation.PlayHandle.IsPlaying">
            <summary>Returns whether the sound is currently playing.</summary><remarks/>
            <returns>true if currently playing</returns>
        </member>
        <member name="M:Sansar.Simulation.PlayHandle.OnFinished(System.Action)">
            <summary>Triggers action when this sound is finished playing.  Doesn't trigger if stopped or looping.</summary><remarks/>
            <param name="handler">Action to be called when the sound finishes playing.</param>
        </member>
        <member name="M:Sansar.Simulation.PlayHandle.SetLoudness(System.Single,Sansar.Script.ScriptBase.OperationComplete)">
             <summary>Sets the loudness for this PlayHandle.</summary>
            
             <sourceLocation>C:\p\Sansar\SharedBranches\ServerScript\Code\App\Libraries\SimulationScriptApi/CsPlayHandle.h(70)</sourceLocation>
             <remarks>This asynchronous method queues the write then returns.
             To block until the write has occurred, pass this method to <see cref='M:Sansar.Script.ScriptBase.WaitFor' /> while in a coroutine.</remarks>
             <value>The return value is an internal event id.</value>
             <param name='loudness'>The loudness (in dB).</param>
             <param name='handler'>Handler to be called when the event completes.</param>
        </member>
        <member name="M:Sansar.Simulation.PlayHandle.SetPitchShift(System.Single,Sansar.Script.ScriptBase.OperationComplete)">
             <summary>Sets the relative pitch for this PlayHandle.</summary>
            
             <sourceLocation>C:\p\Sansar\SharedBranches\ServerScript\Code\App\Libraries\SimulationScriptApi/CsPlayHandle.h(78)</sourceLocation>
             <remarks>This asynchronous method queues the write then returns.
             To block until the write has occurred, pass this method to <see cref='M:Sansar.Script.ScriptBase.WaitFor' /> while in a coroutine.</remarks>
             <value>The return value is an internal event id.</value>
             <param name='pitch'>The relative pitch in semitones.  (default = 0)</param>
             <param name='handler'>Handler to be called when the event completes.</param>
        </member>
        <member name="M:Sansar.Simulation.PlayHandle.Stop(System.Boolean,Sansar.Script.ScriptBase.OperationComplete)">
             <summary>Stops the sound on this PlayHandle.</summary>
            
             <sourceLocation>C:\p\Sansar\SharedBranches\ServerScript\Code\App\Libraries\SimulationScriptApi/CsPlayHandle.h(62)</sourceLocation>
             <remarks>This asynchronous method queues the write then returns.</remarks>
             <value>The return value is an internal event id.</value>
             <param name='fadeout'>Will fade out if true.</param>
             <param name='handler'>Handler to be called when the event completes.</param>
        </member>
        <member name="M:Sansar.Simulation.PlayHandle.Stop(Sansar.Script.ScriptBase.OperationComplete)">
             <summary>Stops the sound on this PlayHandle.</summary>
            
             <sourceLocation>C:\p\Sansar\SharedBranches\ServerScript\Code\App\Libraries\SimulationScriptApi/CsPlayHandle.h(62)</sourceLocation>
             <remarks>This asynchronous method queues the write then returns.</remarks>
             <value>The return value is an internal event id.</value>
             <param name='handler'>Handler to be called when the event completes.</param>
        </member>
        <member name="T:Sansar.Simulation.CollisionData">
            <summary>Handler for rigid body events.</summary><sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsRigidBodyComponent.h(186)</sourceLocation><remarks/>
        </member>
        <member name="P:Sansar.Simulation.CollisionData.EventType">
            <summary> The type of collision which occurred.</summary><value/><remarks/>
        </member>
        <member name="P:Sansar.Simulation.CollisionData.ComponentId">
            <summary> The id of the rigid body component.</summary><value/><remarks/>
        </member>
        <member name="P:Sansar.Simulation.CollisionData.HitComponentId">
            <summary> The id of the rigid body component or character that was hit.</summary><value/><remarks/>
        </member>
        <member name="P:Sansar.Simulation.CollisionData.HitObject">
            <summary> The <see cref='T:Sansar.Simulation.ObjectPublic'/> that was hit.</summary><value/><remarks/>
        </member>
        <member name="P:Sansar.Simulation.CollisionData.Phase">
            <summary> used by trigger events to determine if trigger enter or exit occurred</summary><value/><remarks/>
        </member>
        <member name="P:Sansar.Simulation.CollisionData.HitControlPoint">
            <summary> The specific control point hit, if any</summary><value/><remarks/>
        </member>
        <member name="M:Sansar.Simulation.CollisionData.ToString">
            <summary> A string representation of this object. </summary> <returns>A string representation of this object.</returns> <remarks>The format of this string may change between releases.</remarks>
        </member>
        <member name="T:Sansar.Simulation.HeldObjectData">
            <summary>Handler for agent grab events.</summary><sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsRigidBodyComponent.h(226)</sourceLocation><remarks/>
        </member>
        <member name="P:Sansar.Simulation.HeldObjectData.HeldObjectEvent">
            <summary> The type of held object event which occurred.</summary><value/><remarks/>
        </member>
        <member name="P:Sansar.Simulation.HeldObjectData.ComponentId">
            <summary> The ComponentId of the held object's <see cref='T:Sansar.Simulation.RigidBodyComponent'/>.</summary><value/><remarks/>
        </member>
        <member name="P:Sansar.Simulation.HeldObjectData.ObjectId">
            <summary> The ObjectId of the held object.</summary><value/><remarks/>
        </member>
        <member name="P:Sansar.Simulation.HeldObjectData.HeldObjectInfo">
            <summary> information about the held object</summary><value/><remarks/>
        </member>
        <member name="M:Sansar.Simulation.HeldObjectData.ToString">
            <summary> A string representation of this object. </summary> <returns>A string representation of this object.</returns> <remarks>The format of this string may change between releases.</remarks>
        </member>
        <member name="T:Sansar.Simulation.SitObjectData">
            <summary>Handler for agent sit events.</summary><sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsRigidBodyComponent.h(262)</sourceLocation><remarks/>
        </member>
        <member name="P:Sansar.Simulation.SitObjectData.SitObjectEvent">
            <summary> The type of sit event which occurred.</summary><value/><remarks/>
        </member>
        <member name="P:Sansar.Simulation.SitObjectData.ComponentId">
            <summary> The ComponentId of the object the agent is sitting on <see cref='T:Sansar.Simulation.RigidBodyComponent'/>.</summary><value/><remarks/>
        </member>
        <member name="P:Sansar.Simulation.SitObjectData.ObjectId">
            <summary> The ObjectId of the object the agent is sitting on</summary><value/><remarks/>
        </member>
        <member name="P:Sansar.Simulation.SitObjectData.SitObjectInfo">
            <summary> information about the object the agent is sitting on</summary><value/><remarks/>
        </member>
        <member name="M:Sansar.Simulation.SitObjectData.ToString">
            <summary> A string representation of this object. </summary> <returns>A string representation of this object.</returns> <remarks>The format of this string may change between releases.</remarks>
        </member>
        <member name="T:Sansar.Simulation.HeldObjectInfo">
            <summary>Information about if this HeldObjectInfo is being held by an agent. </summary>
        </member>
        <member name="F:Sansar.Simulation.HeldObjectInfo.IsHeld">
            <summary>Is the object being held by an agent</summary>
        </member>
        <member name="F:Sansar.Simulation.HeldObjectInfo.SessionId">
            <summary>The SessionId of the agent that is holding the object.</summary>
        </member>
        <member name="F:Sansar.Simulation.HeldObjectInfo.ControlPoint">
            <summary>The <see cref='F:Sansar.Simulation.HeldObjectInfo.ControlPoint'/> that was used to grab the object.</summary>
        </member>
        <member name="F:Sansar.Simulation.HeldObjectInfo.LocalPosition">
            <summary>The local space point on the object that is held.</summary>
        </member>
        <member name="T:Sansar.Simulation.SitObjectInfo">
            <summary>Information about if an agent is sitting on this SitObjectInfo. </summary>
        </member>
        <member name="F:Sansar.Simulation.SitObjectInfo.IsOccupied">
            <summary>Is an agent sitting on this object</summary>
        </member>
        <member name="F:Sansar.Simulation.SitObjectInfo.SessionId">
            <summary>The SessionId of the agent that is sitting on the object.</summary>
        </member>
        <member name="F:Sansar.Simulation.SitObjectInfo.LocalPosition">
            <summary>The local space point on the object where an agent would sit.</summary>
        </member>
        <member name="F:Sansar.Simulation.SitObjectInfo.LocalForward">
            <summary>The local space forward direction for the object sit point.</summary>
        </member>
        <member name="F:Sansar.Simulation.SitObjectInfo.ExitPosition">
            <summary>The local space exit point where an agent will be when they stand up from this sit point.</summary>
        </member>
        <member name="F:Sansar.Simulation.SitObjectInfo.ExitForward">
            <summary>The local space forward direction of the exit point from this sit point.</summary>
        </member>
        <member name="T:Sansar.Simulation.SoundResource">
            <summary>The SoundResource class represents a sound that could be added to the scene.</summary><sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsSoundResource.h(27)</sourceLocation><remarks/>
        </member>
        <member name="M:Sansar.Simulation.SoundResource.GetName">
            <summary>
            Returns the name of the resource.
            </summary><sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsSoundResource.h(39)</sourceLocation><value/><remarks/>
        </member>
        <member name="M:Sansar.Simulation.SoundResource.GetDurationInSeconds">
            <summary>
            Returns the duration in seconds.
            </summary><sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsSoundResource.h(44)</sourceLocation><value/><remarks/>
        </member>
        <member name="T:Sansar.Simulation.UIProgressBar">
            <summary>
            Manages a progress bar UI element.
            </summary><sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsUIProgressBar.h(30)</sourceLocation>
            <remarks>Used for progress bars on interactions.</remarks>
        </member>
        <member name="P:Sansar.Simulation.UIProgressBar.Id">
            <summary>
            The bar's ID.
            </summary>
            <remarks>This ID is only unique to this user's particular session. It is not globally unique.</remarks>
        </member>
        <member name="P:Sansar.Simulation.UIProgressBar.Label">
            <summary>
            The bar's current Label
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Sansar.Simulation.UIProgressBar.Start(System.String,System.Single,Sansar.Color,System.Action{Sansar.Script.OperationCompleteEvent})">
            <summary>
            Start a progress bar.
            </summary>
            
            
            
            <returns>The internal event id for the completion event.</returns>
            <remarks>Call this with <see cref='M:Sansar.Script.ScriptBase.WaitFor``3(System.Action{``0,``1,``2,System.Action{Sansar.Script.OperationCompleteEvent}},``0,``1,``2)'/> in a coroutine to block until the event is generated.</remarks>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsUIProgressBar.h(41)</sourceLocation>
            <param name='label'>Text of the bar.</param>
            <param name='durationSeconds'>Duration.</param>
            <param name='color'>Color.</param>
            <param name='handler'>Handler to be called when the event completes.</param>
        </member>
        <member name="M:Sansar.Simulation.UIProgressBar.Start(System.String,System.Single,Sansar.Color)">
            <summary>
            Start a progress bar.
            </summary>
            
            
            
            <returns>The internal event id for the completion event.</returns>
            <remarks>Call this with <see cref='M:Sansar.Script.ScriptBase.WaitFor``3(System.Action{``0,``1,``2,System.Action{Sansar.Script.OperationCompleteEvent}},``0,``1,``2)'/> in a coroutine to block until the event is generated.</remarks>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsUIProgressBar.h(41)</sourceLocation>
            <param name='label'>Text of the bar.</param>
            <param name='durationSeconds'>Duration.</param>
            <param name='color'>Color.</param>
        </member>
        <member name="M:Sansar.Simulation.UIProgressBar.Cancel">
            <summary>
            Remove a progress bar.
            </summary>
            <remarks></remarks>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsUIProgressBar.h(42)</sourceLocation>
        </member>
        <member name="M:Sansar.Simulation.UIProgressBar.ToString">
            <summary> A string representation of this object. </summary> <returns>A string representation of this object.</returns> <remarks>The format of this string may change between releases.</remarks>
        </member>
        <member name="T:Sansar.Simulation.UIScoreBoard">
            <summary>
            Manages a score board HUD element.
            </summary><sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsUIScoreBoard.h(30)</sourceLocation>
            <remarks>Used for competative games.</remarks>
        </member>
        <member name="P:Sansar.Simulation.UIScoreBoard.Id">
            <summary>
            The board's ID.
            </summary>
            <remarks>This ID is only unique to this user's particular session. It is not globally unique.</remarks>
        </member>
        <member name="P:Sansar.Simulation.UIScoreBoard.Score0">
            <summary>
            The board's left score
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Sansar.Simulation.UIScoreBoard.Score1">
            <summary>
            The board's right score
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Sansar.Simulation.UIScoreBoard.Paint(System.String,System.String,Sansar.Color,Sansar.Color,Sansar.Color,Sansar.Color,Sansar.Color,Sansar.Color,System.Action{Sansar.Script.OperationCompleteEvent})">
            <summary>
            Paint the score board
            </summary>
            
            
            
            
            
            
            
            
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsUIScoreBoard.h(41)</sourceLocation>
            <param name='score0'>Score of the left team.</param>
            <param name='score1'>Score of the right team.</param>
            <param name='colorScoreFg0'>The left score's text color.</param>
            <param name='colorScoreFg1'>The right score's text color.</param>
            <param name='colorScoreBg0'>The left score's background color.</param>
            <param name='colorScoreBg1'>The right score's background color.</param>
            <param name='colorFg'>The board's foreground color.</param>
            <param name='colorBg'>The board's background color.</param>
            <param name='handler'>Handler to be called when the event completes.</param>
        </member>
        <member name="M:Sansar.Simulation.UIScoreBoard.Paint(System.String,System.String,Sansar.Color,Sansar.Color,Sansar.Color,Sansar.Color,Sansar.Color,Sansar.Color)">
            <summary>
            Paint the score board
            </summary>
            
            
            
            
            
            
            
            
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsUIScoreBoard.h(41)</sourceLocation>
            <param name='score0'>Score of the left team.</param>
            <param name='score1'>Score of the right team.</param>
            <param name='colorScoreFg0'>The left score's text color.</param>
            <param name='colorScoreFg1'>The right score's text color.</param>
            <param name='colorScoreBg0'>The left score's background color.</param>
            <param name='colorScoreBg1'>The right score's background color.</param>
            <param name='colorFg'>The board's foreground color.</param>
            <param name='colorBg'>The board's background color.</param>
        </member>
        <member name="M:Sansar.Simulation.UIScoreBoard.ToString">
            <summary> A string representation of this object. </summary> <returns>A string representation of this object.</returns> <remarks>The format of this string may change between releases.</remarks>
        </member>
        <member name="T:Sansar.Simulation.UI">
            <summary>Manages the client UI.</summary><sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsUI.h(32)</sourceLocation>
            <remarks>The client UI can be used to send messages that appear in a client UI.</remarks>
        </member>
        <member name="P:Sansar.Simulation.UI.ModalDialog">
            <summary>The <see cref='T:Sansar.Simulation.ModalDialog'/> for this UI.</summary>
            <value>The <see cref='T:Sansar.Simulation.ModalDialog'/> for this UI.</value>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsUI.h(42)</sourceLocation>
            <remarks>See <see cref="M:Sansar.Simulation.ModalDialog.Show(System.String,System.String,System.String,Sansar.Script.ScriptBase.OperationComplete)"/> for usage details.</remarks>
        </member>
        <member name="P:Sansar.Simulation.UI.HintText">
            <summary>The hint text being shown to the user.</summary>
            <value>The hint text.</value>
            <remarks>Limited to 80 characters.</remarks>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsUI.h(55)</sourceLocation>
        </member>
        <member name="M:Sansar.Simulation.UI.AddProgressBar">
            <summary>Add a <see cref='T:Sansar.Simulation.UIProgressBar'/> to the ui.</summary>
            <value>The newly created <see cref='T:Sansar.Simulation.UIProgressBar'/>.</value>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsUI.h(43)</sourceLocation>
            <remarks>Currently only one progress bar can be added to the screen, if one has already been added, cancel it before adding a new one</remarks>
        </member>
        <member name="M:Sansar.Simulation.UI.AddScoreBoard">
            <summary>Add a <see cref='T:Sansar.Simulation.UIScoreBoard'/> to the ui.</summary>
            <value>The newly created <see cref='T:Sansar.Simulation.UIScoreBoard'/>.</value>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsUI.h(44)</sourceLocation>
            <remarks>Currently only one score board can be added to the screen.</remarks>
        </member>
        <member name="M:Sansar.Simulation.UI.GetProgressBars">
            <summary>
            Gets the progress bars that have been added to the ui.
            </summary>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsUI.h(46)</sourceLocation>
            <returns>An IEnumarable collection of progress bar objects. </returns>
        </member>
        <member name="M:Sansar.Simulation.UI.GetScoreBoards">
            <summary>
            Gets the score board that have been added to the ui.
            </summary>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsUI.h(47)</sourceLocation>
            <returns>An IEnumarable collection of score board objects. </returns>
        </member>
        <member name="M:Sansar.Simulation.UI.OpenDetailViewForUri(System.String)">
            <summary>
            Opens a window showing details for a sansar uri, giving the a user an option to travel to that location.
            </summary>
            <remarks />
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsUI.h(49)</sourceLocation>
            <param name='sansarUri'>The location to open the detail panel for.</param>
        </member>
        <member name="M:Sansar.Simulation.UI.CloseDetailView">
            <summary>
            Close any open world detail view.
            </summary>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsUI.h(50)</sourceLocation>
        </member>
        <member name="M:Sansar.Simulation.UI.ToString">
            <summary> A string representation of this object. </summary> <returns>A string representation of this object.</returns> <remarks>The format of this string may change between releases.</remarks>
        </member>
        <member name="T:Sansar.Simulation.UserData">
            <summary>Subscribe to receive events when users enter or leave the experience.</summary><sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsUser.h(55)</sourceLocation><remarks/>
        </member>
        <member name="P:Sansar.Simulation.UserData.Action">
            <summary> string action of the event: AddUser, RemoveUser</summary><value/><remarks/>
        </member>
        <member name="P:Sansar.Simulation.UserData.User">
            <summary> Sansar.Script.SessionId for the user.</summary><value/><remarks/>
        </member>
        <member name="P:Sansar.Simulation.UserData.Data">
            <summary> Deprecated.</summary><value/><remarks/>
        </member>
        <member name="M:Sansar.Simulation.UserData.ToString">
            <summary> A string representation of this object. </summary> <returns>A string representation of this object.</returns> <remarks>The format of this string may change between releases.</remarks>
        </member>
        <member name="T:Sansar.Simulation.CharacterTracker">
            <summary>The CharacterTracker keeps track of the quests associated with a QuestCharacter for a user.</summary>
            <remarks>There is as yet no way to create Quest Characters, but this functionality is coming soon.</remarks>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/QuestApis/CsCharacterTracker.h(26)</sourceLocation>
        </member>
        <member name="P:Sansar.Simulation.CharacterTracker.AvailableQuestDefinitions">
            <summary>Quests that are available to be offered.</summary>
            <remarks></remarks>
        </member>
        <member name="P:Sansar.Simulation.CharacterTracker.ActiveQuestDefinitions">
            <summary>Currently active quests.</summary>
            <remarks></remarks>
        </member>
        <member name="P:Sansar.Simulation.CharacterTracker.CanTurnInQuestDefinitions">
            <summary>Quests that are ready to be turned in to this character.</summary>
            <remarks></remarks>
        </member>
        <member name="P:Sansar.Simulation.CharacterTracker.AvailableQuestCount">
            <summary>umber of this character's quests currently available for this user.</summary>
            <remarks></remarks>
        </member>
        <member name="P:Sansar.Simulation.CharacterTracker.ActiveQuestCount">
            <summary>Number of this character's quests currently active for this user.</summary>
            <remarks></remarks>
        </member>
        <member name="P:Sansar.Simulation.CharacterTracker.CanTurnInQuestCount">
            <summary>umber of this character's quests ready to be turned in for this user.</summary>
            <remarks></remarks>
        </member>
        <member name="P:Sansar.Simulation.CharacterTracker.SessionId">
            <summary>The session Id for the user being tracked.</summary>
            <remarks></remarks>
        </member>
        <member name="M:Sansar.Simulation.CharacterTracker.Subscribe(System.Action{Sansar.Simulation.CharacterTrackerData},System.Boolean)">
            <summary>Subscribes to CharacterTracker Events.</summary><sourceLocation>DistributeEvent::writeSubscribe line 180</sourceLocation><remarks /><returns>An <see cref='T:Sansar.Script.IEventSubscription' /> that can be used to cancel the subscription.</returns><seealso cref='T:Sansar.Simulation.CharacterTrackerData'/><seealso cref='T:Sansar.Script.IEventSubscription'/>
            <param name='callback'>Callback which is executed when the event completes.</param>
            <param name='persistent'>Optional, set to false to unsubscribe after one event.</param>
        </member>
        <member name="M:Sansar.Simulation.CharacterTracker.Update(System.Action{Sansar.Script.OperationCompleteEvent})">
            <summary>Update the CharacterTracker data.</summary>
            <remarks>Use in a WaitFor to wait for the data for the CharacterTracker to be ready. Once data is retrieved and Ready is true it will never again be false.</remarks>
            <param name='handler'>Handler to be called when the event completes.</param>
        </member>
        <member name="M:Sansar.Simulation.CharacterTracker.Update">
            <summary>Update the CharacterTracker data.</summary>
            <remarks>Use in a WaitFor to wait for the data for the CharacterTracker to be ready. Once data is retrieved and Ready is true it will never again be false.</remarks>
        </member>
        <member name="M:Sansar.Simulation.CharacterTracker.ToString">
            <summary> A string representation of this object. </summary> <returns>A string representation of this object.</returns> <remarks>The format of this string may change between releases.</remarks>
        </member>
        <member name="T:Sansar.Simulation.CharacterTrackerData">
            <summary>Handler for Character Tracker update events.</summary><sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/QuestApis/CsCharacterTracker.h(116)</sourceLocation><remarks></remarks>
        </member>
        <member name="P:Sansar.Simulation.CharacterTrackerData.SessionId">
            <summary> <summary>The SessionId of the agent on the quest.</summary></summary><value/><remarks/>
        </member>
        <member name="P:Sansar.Simulation.CharacterTrackerData.CharacterId">
            <summary> The id of the quest definition from which the quest was created.</summary><value/><remarks/>
        </member>
        <member name="M:Sansar.Simulation.CharacterTrackerData.ToString">
            <summary> A string representation of this object. </summary> <returns>A string representation of this object.</returns> <remarks>The format of this string may change between releases.</remarks>
        </member>
        <member name="T:Sansar.Simulation.ObjectiveDefinition">
            <summary>The ObjectiveDefinition stores the data that is used to create quest objective instances for users.</summary>
            <remarks></remarks>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/QuestApis/CsObjectiveDefinition.h(24)</sourceLocation>
        </member>
        <member name="T:Sansar.Simulation.ObjectiveDefinition.GetObjectiveData">
            <summary></summary><remarks></remarks>
        </member>
        <member name="P:Sansar.Simulation.ObjectiveDefinition.GetObjectiveData.Objective">
            <summary></summary><remarks></remarks><value></value>
        </member>
        <member name="M:Sansar.Simulation.ObjectiveDefinition.GetObjectiveData.ToString">
            <summary> A string representation of this object. </summary> <returns>A string representation of this object.</returns> <remarks>The format of this string may change between releases.</remarks>
        </member>
        <member name="P:Sansar.Simulation.ObjectiveDefinition.Title">
            <summary>The objective title.</summary>
            <remarks>Returns null if Ready is false because the objective definition is not ready.</remarks>
        </member>
        <member name="P:Sansar.Simulation.ObjectiveDefinition.Description">
            <summary>The objective description.</summary>
            <remarks>Returns null if Ready is false because the objective definition is not ready.</remarks>
        </member>
        <member name="P:Sansar.Simulation.ObjectiveDefinition.InitialState">
            <summary>The initial state that this objective will have when a user starts the quest</summary>
            <remarks>Returns None if Ready is false, because the objective definition is not ready.</remarks>
        </member>
        <member name="P:Sansar.Simulation.ObjectiveDefinition.RequiredCount">
            <summary>The required count to complete the objective.</summary>
            <remarks>Returns -1 if Ready is false because the objective definition is not ready.</remarks>
        </member>
        <member name="P:Sansar.Simulation.ObjectiveDefinition.Ready">
            <summary>If the QuestDefinition data is ready.</summary>
            <remarks>Returns false until the data has been fetched from the quest service. Once it returns true it will always return true.</remarks>
            <seealso cref='M:Sansar.Simulation.QuestDefinition.Update(System.Action{Sansar.Script.OperationCompleteEvent})' />
        </member>
        <member name="M:Sansar.Simulation.ObjectiveDefinition.Update(System.Action{Sansar.Script.OperationCompleteEvent})">
            <summary>Update the ObjectiveDefinition data.</summary>
            <remarks>Use in a WaitFor to wait for the data for the QuestDefinition to be ready. Once data is retrieved and Ready is true it will never again be false.</remarks>
            <param name='handler'>Handler to be called when the event completes.</param>
        </member>
        <member name="M:Sansar.Simulation.ObjectiveDefinition.Update">
            <summary>Update the ObjectiveDefinition data.</summary>
            <remarks>Use in a WaitFor to wait for the data for the QuestDefinition to be ready. Once data is retrieved and Ready is true it will never again be false.</remarks>
        </member>
        <member name="M:Sansar.Simulation.ObjectiveDefinition.GetObjective(Sansar.Script.SessionId,System.Action{Sansar.Simulation.ObjectiveDefinition.GetObjectiveData})">
            <summary>Get the state of this objective for a particular user.</summary>
            <remarks/>
            
            
            
            <param name='agent'>The <see cref='T:Sansar.Script.SessionId'/> of the user.</param>
            <param name='handler'>Handler to be called when the event completes.</param>
        </member>
        <member name="M:Sansar.Simulation.ObjectiveDefinition.GetObjective(Sansar.Script.SessionId)">
            <summary>Get the state of this objective for a particular user.</summary>
            <remarks/>
            
            
            
            <param name='agent'>The <see cref='T:Sansar.Script.SessionId'/> of the user.</param>
        </member>
        <member name="M:Sansar.Simulation.ObjectiveDefinition.GetObjective(Sansar.Simulation.AgentPrivate,System.Action{Sansar.Simulation.ObjectiveDefinition.GetObjectiveData})">
            <summary>Get the state of this objective for a particular user.</summary>
            <remarks/>
            
            
            
            <param name='agent'>Obtain the objective state for this user.</param>
            <param name='handler'>Handler to be called when the event completes.</param>
        </member>
        <member name="M:Sansar.Simulation.ObjectiveDefinition.GetObjective(Sansar.Simulation.AgentPrivate)">
            <summary>Get the state of this objective for a particular user.</summary>
            <remarks/>
            
            
            
            <param name='agent'>Obtain the objective state for this user.</param>
        </member>
        <member name="M:Sansar.Simulation.ObjectiveDefinition.ToString">
            <summary> A string representation of this object. </summary> <returns>A string representation of this object.</returns> <remarks>The format of this string may change between releases.</remarks>
        </member>
        <member name="T:Sansar.Simulation.QuestCharacter">
            <summary>The QuestCharacter is the interface for a Quest Character</summary>
            <remarks>There is as yet no way to create Quest Characters, but this functionality is coming soon.</remarks>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/QuestApis/CsQuestCharacter.h(23)</sourceLocation>
        </member>
        <member name="M:Sansar.Simulation.QuestCharacter.GetCharacterTracker(Sansar.Script.SessionId)">
            <summary>Track a user's progress through the quests associated with this character.</summary>
            <remarks></remarks>
            
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/QuestApis/CsQuestCharacter.h(31)</sourceLocation>
            <param name='sessionId'>The sessionId of the user.</param>
        </member>
        <member name="M:Sansar.Simulation.QuestCharacter.ShowQuests(Sansar.Script.SessionId)">
            <summary>Show a UI panel displaying this characters' quests.</summary>
            <remarks></remarks>
            
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/QuestApis/CsQuestCharacter.h(33)</sourceLocation>
            <param name='sessionId'>The sessionId of the user to open the ui panel for.</param>
        </member>
        <member name="M:Sansar.Simulation.QuestCharacter.TurnInQuests(Sansar.Script.SessionId,System.Action{Sansar.Script.OperationCompleteEvent})">
            <summary>Turn in any quests that a user has completed for this character, and show the quest character ui.</summary>
            <remarks></remarks>
            
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/QuestApis/CsQuestCharacter.h(34)</sourceLocation>
            <param name='sessionId'>The sessionId of the user to complete quests for.</param>
            <param name='handler'>Handler to be called when the event completes.</param>
        </member>
        <member name="M:Sansar.Simulation.QuestCharacter.TurnInQuests(Sansar.Script.SessionId)">
            <summary>Turn in any quests that a user has completed for this character, and show the quest character ui.</summary>
            <remarks></remarks>
            
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/QuestApis/CsQuestCharacter.h(34)</sourceLocation>
            <param name='sessionId'>The sessionId of the user to complete quests for.</param>
        </member>
        <member name="T:Sansar.Simulation.QuestDefinition">
            <summary>The QuestDefinition stores the data that is used to create quest instances for users.</summary>
            <remarks></remarks>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/QuestApis/CsQuestDefinition.h(24)</sourceLocation>
        </member>
        <member name="T:Sansar.Simulation.QuestDefinition.GetQuestData">
            <summary></summary><remarks></remarks>
        </member>
        <member name="P:Sansar.Simulation.QuestDefinition.GetQuestData.Quest">
            <summary></summary><remarks></remarks><value></value>
        </member>
        <member name="M:Sansar.Simulation.QuestDefinition.GetQuestData.ToString">
            <summary> A string representation of this object. </summary> <returns>A string representation of this object.</returns> <remarks>The format of this string may change between releases.</remarks>
        </member>
        <member name="P:Sansar.Simulation.QuestDefinition.ObjectiveDefinitions">
            <summary>All the ObjectiveDefinitions for this QuestDefinition.</summary>
            <remarks>The ObjectiveDefinitions for this QuestDefinition</remarks>
        </member>
        <member name="P:Sansar.Simulation.QuestDefinition.Title">
            <summary>The title of this quest.</summary>
            <remarks></remarks>
        </member>
        <member name="P:Sansar.Simulation.QuestDefinition.Description">
            <summary>The description of this quest.</summary>
            <remarks></remarks>
        </member>
        <member name="P:Sansar.Simulation.QuestDefinition.Ready">
            <summary>If the QuestDefinition data is ready.</summary>
            <remarks>Returns false until the data has been fetched from the quest service. Once it returns true it will always return true.</remarks>
            <seealso cref='M:Sansar.Simulation.QuestDefinition.Update(System.Action{Sansar.Script.OperationCompleteEvent})' />
        </member>
        <member name="M:Sansar.Simulation.QuestDefinition.Update(System.Action{Sansar.Script.OperationCompleteEvent})">
            <summary>Update the QuestDefinition data.</summary>
            <remarks>Use in a WaitFor to wait for the data for the QuestDefinition to be ready. Once data is retrieved and Ready is true it will never again be false.</remarks>
            <param name='handler'>Handler to be called when the event completes.</param>
        </member>
        <member name="M:Sansar.Simulation.QuestDefinition.Update">
            <summary>Update the QuestDefinition data.</summary>
            <remarks>Use in a WaitFor to wait for the data for the QuestDefinition to be ready. Once data is retrieved and Ready is true it will never again be false.</remarks>
        </member>
        <member name="M:Sansar.Simulation.QuestDefinition.GetQuest(Sansar.Script.SessionId,System.Action{Sansar.Simulation.QuestDefinition.GetQuestData})">
            <summary>Get the state of this quest for a particular user.</summary>
            <remarks/>
            
            
            
            <param name='agent'>The <see cref='T:Sansar.Script.SessionId'/> of the user.</param>
            <param name='handler'>Handler to be called when the event completes.</param>
        </member>
        <member name="M:Sansar.Simulation.QuestDefinition.GetQuest(Sansar.Script.SessionId)">
            <summary>Get the state of this quest for a particular user.</summary>
            <remarks/>
            
            
            
            <param name='agent'>The <see cref='T:Sansar.Script.SessionId'/> of the user.</param>
        </member>
        <member name="M:Sansar.Simulation.QuestDefinition.GetQuest(Sansar.Simulation.AgentPrivate,System.Action{Sansar.Simulation.QuestDefinition.GetQuestData})">
            <summary>Get the state of this quest for a particular user.</summary>
            <remarks/>
            
            
            
            <param name='agent'>Obtain the quest state for this user.</param>
            <param name='handler'>Handler to be called when the event completes.</param>
        </member>
        <member name="M:Sansar.Simulation.QuestDefinition.GetQuest(Sansar.Simulation.AgentPrivate)">
            <summary>Get the state of this quest for a particular user.</summary>
            <remarks/>
            
            
            
            <param name='agent'>Obtain the quest state for this user.</param>
        </member>
        <member name="M:Sansar.Simulation.QuestDefinition.ToString">
            <summary> A string representation of this object. </summary> <returns>A string representation of this object.</returns> <remarks>The format of this string may change between releases.</remarks>
        </member>
        <member name="T:Sansar.Simulation.ClusterResource">
            <summary>The ClusterResource class represents a cluster that could be added to the scene. See <see cref='M:Sansar.Simulation.ScenePrivate.CreateCluster(Sansar.Simulation.ClusterResource,Sansar.Vector,Sansar.Quaternion,Sansar.Vector,Sansar.Simulation.ScenePrivate.CreateComplete)'/>.</summary><sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsClusterResource.h(25)</sourceLocation><remarks/>
        </member>
        <member name="P:Sansar.Simulation.ClusterResource.ResourceId">
            <summary>
            Returns the resource Id of this ClusterResource.
            </summary><sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsClusterResource.h(37)</sourceLocation><value/><remarks/>
        </member>
        <member name="M:Sansar.Simulation.ClusterResource.ToString">
            <summary> A string representation of this object. </summary> <returns>A string representation of this object.</returns> <remarks>The format of this string may change between releases.</remarks>
        </member>
        <member name="T:Sansar.Simulation.ThumbnailedClusterResource">
            <summary>The ThumbnailedClusterResource class represents a cluster that has properties to be shown in the UI.</summary><sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsThumbnailedClusterResource.h(26)</sourceLocation><remarks/>
        </member>
        <member name="P:Sansar.Simulation.ThumbnailedClusterResource.ClusterResource">
            <summary>
            Returns the underlying cluster.
            </summary><sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsThumbnailedClusterResource.h(38)</sourceLocation><value/><remarks/>
        </member>
        <member name="M:Sansar.Simulation.ThumbnailedClusterResource.ToString">
            <summary> A string representation of this object. </summary> <returns>A string representation of this object.</returns> <remarks>The format of this string may change between releases.</remarks>
        </member>
        <member name="T:Sansar.Simulation.Animation">
            <summary>
            Represents a scriptable Animation node.
            </summary><sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsAnimationNode.h(85)</sourceLocation>
            <remarks></remarks>
        </member>
        <member name="M:Sansar.Simulation.Animation.GetParameters">
            <summary>
            Gets the last applied parameters for the animation
            </summary>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsAnimationNode.h(95)</sourceLocation>
            <returns>Returns the current parameters.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Sansar.Simulation.Animation.GetFrameCount">
            <summary>
            Gets the frame count of the animation
            </summary>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsAnimationNode.h(96)</sourceLocation>
            <returns>Returns the total number of frames in the animation.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Sansar.Simulation.Animation.GetName">
            <summary>
            Gets the name of the animation
            </summary>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsAnimationNode.h(97)</sourceLocation>
            <returns>Returns the name of the animation.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Sansar.Simulation.Animation.SetParameters(Sansar.Simulation.AnimationParameters,System.Action{Sansar.Script.OperationCompleteEvent})">
            <summary>
            Sets the parameters for the animation. The parameters are applied immediately.
            </summary>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsAnimationNode.h(98)</sourceLocation>
            <param name='parameters'>Animation parameters to apply.</param>
            <value>Returns an internal event id.</value>
            <remarks>The range start frame will be clamped to the length of the animation, and the range end frame will be clamped between the range start frame and the end of the animation. To block until the method returns pass this to <see cref='M:Sansar.Script.ScriptBase.WaitFor(System.Func{System.Action{Sansar.Script.EventData},System.Boolean,Sansar.Script.IEventSubscription})' /> in a coroutine.</remarks>
            <param name='handler'>Handler to be called when the event completes.</param>
        </member>
        <member name="M:Sansar.Simulation.Animation.SetParameters(Sansar.Simulation.AnimationParameters)">
            <summary>
            Sets the parameters for the animation. The parameters are applied immediately.
            </summary>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsAnimationNode.h(98)</sourceLocation>
            <param name='parameters'>Animation parameters to apply.</param>
            <value>Returns an internal event id.</value>
            <remarks>The range start frame will be clamped to the length of the animation, and the range end frame will be clamped between the range start frame and the end of the animation. To block until the method returns pass this to <see cref='M:Sansar.Script.ScriptBase.WaitFor(System.Func{System.Action{Sansar.Script.EventData},System.Boolean,Sansar.Script.IEventSubscription})' /> in a coroutine.</remarks>
        </member>
        <member name="M:Sansar.Simulation.Animation.Play(System.Action{Sansar.Script.OperationCompleteEvent})">
            <summary>
            Plays the animation. It will become the active animation for this object, and resume playing if it is paused.
            </summary>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsAnimationNode.h(99)</sourceLocation>
            <value>Returns an internal event id.</value>
            <remarks>If the animation has PlaybackMode.PlayOnce and has finished playing, this will have no effect, the animation will have to be reset with Reset() first. To block until the method returns pass this to <see cref='M:Sansar.Script.ScriptBase.WaitFor(System.Func{System.Action{Sansar.Script.EventData},System.Boolean,Sansar.Script.IEventSubscription})' /> in a coroutine.</remarks>
            <param name='handler'>Handler to be called when the event completes.</param>
        </member>
        <member name="M:Sansar.Simulation.Animation.Play">
            <summary>
            Plays the animation. It will become the active animation for this object, and resume playing if it is paused.
            </summary>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsAnimationNode.h(99)</sourceLocation>
            <value>Returns an internal event id.</value>
            <remarks>If the animation has PlaybackMode.PlayOnce and has finished playing, this will have no effect, the animation will have to be reset with Reset() first. To block until the method returns pass this to <see cref='M:Sansar.Script.ScriptBase.WaitFor(System.Func{System.Action{Sansar.Script.EventData},System.Boolean,Sansar.Script.IEventSubscription})' /> in a coroutine.</remarks>
        </member>
        <member name="M:Sansar.Simulation.Animation.Play(Sansar.Simulation.AnimationParameters,System.Action{Sansar.Script.OperationCompleteEvent})">
            <summary>
            Plays the animation and applies the provided parameters.
            </summary>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsAnimationNode.h(100)</sourceLocation>
            <param name='parameters'>Animation parameters to apply.</param>
            <value>Returns an internal event id.</value>
            <remarks>To block until the method returns pass this to <see cref='M:Sansar.Script.ScriptBase.WaitFor(System.Func{System.Action{Sansar.Script.EventData},System.Boolean,Sansar.Script.IEventSubscription})' /> in a coroutine.</remarks>
            <param name='handler'>Handler to be called when the event completes.</param>
        </member>
        <member name="M:Sansar.Simulation.Animation.Play(Sansar.Simulation.AnimationParameters)">
            <summary>
            Plays the animation and applies the provided parameters.
            </summary>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsAnimationNode.h(100)</sourceLocation>
            <param name='parameters'>Animation parameters to apply.</param>
            <value>Returns an internal event id.</value>
            <remarks>To block until the method returns pass this to <see cref='M:Sansar.Script.ScriptBase.WaitFor(System.Func{System.Action{Sansar.Script.EventData},System.Boolean,Sansar.Script.IEventSubscription})' /> in a coroutine.</remarks>
        </member>
        <member name="M:Sansar.Simulation.Animation.Pause(System.Action{Sansar.Script.OperationCompleteEvent})">
            <summary>
            Pauses the animation.
            </summary>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsAnimationNode.h(103)</sourceLocation>
            <value>Returns an internal event id.</value>
            <remarks>To block until the method returns pass this to <see cref='M:Sansar.Script.ScriptBase.WaitFor(System.Func{System.Action{Sansar.Script.EventData},System.Boolean,Sansar.Script.IEventSubscription})' /> in a coroutine.</remarks>
            <param name='handler'>Handler to be called when the event completes.</param>
        </member>
        <member name="M:Sansar.Simulation.Animation.Pause">
            <summary>
            Pauses the animation.
            </summary>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsAnimationNode.h(103)</sourceLocation>
            <value>Returns an internal event id.</value>
            <remarks>To block until the method returns pass this to <see cref='M:Sansar.Script.ScriptBase.WaitFor(System.Func{System.Action{Sansar.Script.EventData},System.Boolean,Sansar.Script.IEventSubscription})' /> in a coroutine.</remarks>
        </member>
        <member name="M:Sansar.Simulation.Animation.Reset(System.Action{Sansar.Script.OperationCompleteEvent})">
            <summary>
            Resets the animation. The animation is paused and reset to frame 0 (or the RangeStartFrame if clamping is enabled).
            </summary>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsAnimationNode.h(101)</sourceLocation>
            <value>Returns an internal event id.</value>
            <remarks>To block until the method returns pass this to <see cref='M:Sansar.Script.ScriptBase.WaitFor(System.Func{System.Action{Sansar.Script.EventData},System.Boolean,Sansar.Script.IEventSubscription})' /> in a coroutine.</remarks>
            <param name='handler'>Handler to be called when the event completes.</param>
        </member>
        <member name="M:Sansar.Simulation.Animation.Reset">
            <summary>
            Resets the animation. The animation is paused and reset to frame 0 (or the RangeStartFrame if clamping is enabled).
            </summary>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsAnimationNode.h(101)</sourceLocation>
            <value>Returns an internal event id.</value>
            <remarks>To block until the method returns pass this to <see cref='M:Sansar.Script.ScriptBase.WaitFor(System.Func{System.Action{Sansar.Script.EventData},System.Boolean,Sansar.Script.IEventSubscription})' /> in a coroutine.</remarks>
        </member>
        <member name="M:Sansar.Simulation.Animation.Reset(Sansar.Simulation.AnimationParameters,System.Action{Sansar.Script.OperationCompleteEvent})">
            <summary>
            Resets the animation and applies the provided parameters.
            </summary>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsAnimationNode.h(102)</sourceLocation>
            <param name='parameters'>Animation parameters to apply.</param>
            <value>Returns an internal event id.</value>
            <remarks>To block until the method returns pass this to <see cref='M:Sansar.Script.ScriptBase.WaitFor(System.Func{System.Action{Sansar.Script.EventData},System.Boolean,Sansar.Script.IEventSubscription})' /> in a coroutine.</remarks>
            <param name='handler'>Handler to be called when the event completes.</param>
        </member>
        <member name="M:Sansar.Simulation.Animation.Reset(Sansar.Simulation.AnimationParameters)">
            <summary>
            Resets the animation and applies the provided parameters.
            </summary>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsAnimationNode.h(102)</sourceLocation>
            <param name='parameters'>Animation parameters to apply.</param>
            <value>Returns an internal event id.</value>
            <remarks>To block until the method returns pass this to <see cref='M:Sansar.Script.ScriptBase.WaitFor(System.Func{System.Action{Sansar.Script.EventData},System.Boolean,Sansar.Script.IEventSubscription})' /> in a coroutine.</remarks>
        </member>
        <member name="M:Sansar.Simulation.Animation.IsPaused">
            <summary>
            Gets whether or not the animation is paused.
            </summary>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsAnimationNode.h(104)</sourceLocation>
            <returns>A bool value indicating the pause state.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Sansar.Simulation.Animation.JumpToFrame(System.Int32,System.Action{Sansar.Script.OperationCompleteEvent})">
            <summary>
            Jump to frame. The animation will be set to the specified frame, and paused.
            </summary>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsAnimationNode.h(105)</sourceLocation>
            
            <value>Returns an internal event id.</value>
            <remarks>To block until the method returns pass this to <see cref='M:Sansar.Script.ScriptBase.WaitFor(System.Func{System.Action{Sansar.Script.EventData},System.Boolean,Sansar.Script.IEventSubscription})' /> in a coroutine.</remarks>
            <param name='frame'>Frame to jump to.</param>
            <param name='handler'>Handler to be called when the event completes.</param>
        </member>
        <member name="M:Sansar.Simulation.Animation.JumpToFrame(System.Int32)">
            <summary>
            Jump to frame. The animation will be set to the specified frame, and paused.
            </summary>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsAnimationNode.h(105)</sourceLocation>
            
            <value>Returns an internal event id.</value>
            <remarks>To block until the method returns pass this to <see cref='M:Sansar.Script.ScriptBase.WaitFor(System.Func{System.Action{Sansar.Script.EventData},System.Boolean,Sansar.Script.IEventSubscription})' /> in a coroutine.</remarks>
            <param name='frame'>Frame to jump to.</param>
        </member>
        <member name="M:Sansar.Simulation.Animation.SetParameters(Sansar.Simulation.AnimationParameters,Sansar.Script.ScriptBase.OperationComplete)">
            <summary>
            Sets the parameters for the animation. The parameters are applied immediately.
            </summary>
            <sourceLocation>C:\p\Sansar\SharedBranches\ServerScript\Code\App\Libraries\SimulationScriptApi/CsAnimationNode.h(88)</sourceLocation>
            <param name='parameters'>Animation parameters to apply.</param>
            <value>Returns an internal event id.</value>
            <remarks>The range start frame will be clamped to the length of the animation, and the range end frame will be clamped between the range start frame and the end of the animation. To block until the method returns pass this to <see cref='M:Sansar.Script.ScriptBase.WaitFor(System.Func{System.Action{Sansar.Script.EventData},System.Boolean,Sansar.Script.IEventSubscription})' /> in a coroutine.</remarks>
            <param name='handler'>Handler to be called when the event completes.</param>
        </member>
        <member name="M:Sansar.Simulation.Animation.Play(Sansar.Script.ScriptBase.OperationComplete)">
            <summary>
            Plays the animation, without changing the current animation frame.
            </summary>
            <sourceLocation>C:\p\Sansar\SharedBranches\ServerScript\Code\App\Libraries\SimulationScriptApi/CsAnimationNode.h(89)</sourceLocation>
            <value>Returns an internal event id.</value>
            <remarks>If the animation has PlaybackMode.PlayOnce and has finished playing, this will have no effect, the animation will have to be reset with Reset() first. To block until the method returns pass this to <see cref='M:Sansar.Script.ScriptBase.WaitFor(System.Func{System.Action{Sansar.Script.EventData},System.Boolean,Sansar.Script.IEventSubscription})' /> in a coroutine.</remarks>
            <param name='handler'>Handler to be called when the event completes.</param>
        </member>
        <member name="M:Sansar.Simulation.Animation.Play(Sansar.Simulation.AnimationParameters,Sansar.Script.ScriptBase.OperationComplete)">
            <summary>
            Plays the animation and applies the provided parameters.
            </summary>
            <sourceLocation>C:\p\Sansar\SharedBranches\ServerScript\Code\App\Libraries\SimulationScriptApi/CsAnimationNode.h(90)</sourceLocation>
            <param name='parameters'>Animation parameters to apply.</param>
            <value>Returns an internal event id.</value>
            <remarks>To block until the method returns pass this to <see cref='M:Sansar.Script.ScriptBase.WaitFor(System.Func{System.Action{Sansar.Script.EventData},System.Boolean,Sansar.Script.IEventSubscription})' /> in a coroutine.</remarks>
            <param name='handler'>Handler to be called when the event completes.</param>
        </member>
        <member name="M:Sansar.Simulation.Animation.Pause(Sansar.Script.ScriptBase.OperationComplete)">
            <summary>
            Pauses the animation.
            </summary>
            <sourceLocation>C:\p\Sansar\SharedBranches\ServerScript\Code\App\Libraries\SimulationScriptApi/CsAnimationNode.h(93)</sourceLocation>
            <value>Returns an internal event id.</value>
            <remarks>To block until the method returns pass this to <see cref='M:Sansar.Script.ScriptBase.WaitFor(System.Func{System.Action{Sansar.Script.EventData},System.Boolean,Sansar.Script.IEventSubscription})' /> in a coroutine.</remarks>
            <param name='handler'>Handler to be called when the event completes.</param>
        </member>
        <member name="M:Sansar.Simulation.Animation.Reset(Sansar.Script.ScriptBase.OperationComplete)">
            <summary>
            Resets the animation. The animation is paused and reset to frame 0 (or the RangeStartFrame if clamping is enabled).
            </summary>
            <sourceLocation>C:\p\Sansar\SharedBranches\ServerScript\Code\App\Libraries\SimulationScriptApi/CsAnimationNode.h(91)</sourceLocation>
            <value>Returns an internal event id.</value>
            <remarks>To block until the method returns pass this to <see cref='M:Sansar.Script.ScriptBase.WaitFor(System.Func{System.Action{Sansar.Script.EventData},System.Boolean,Sansar.Script.IEventSubscription})' /> in a coroutine.</remarks>
            <param name='handler'>Handler to be called when the event completes.</param>
        </member>
        <member name="M:Sansar.Simulation.Animation.Reset(Sansar.Simulation.AnimationParameters,Sansar.Script.ScriptBase.OperationComplete)">
            <summary>
            Resets the animation and applies the provided parameters.
            </summary>
            <sourceLocation>C:\p\Sansar\SharedBranches\ServerScript\Code\App\Libraries\SimulationScriptApi/CsAnimationNode.h(92)</sourceLocation>
            <param name='parameters'>Animation parameters to apply.</param>
            <value>Returns an internal event id.</value>
            <remarks>To block until the method returns pass this to <see cref='M:Sansar.Script.ScriptBase.WaitFor(System.Func{System.Action{Sansar.Script.EventData},System.Boolean,Sansar.Script.IEventSubscription})' /> in a coroutine.</remarks>
            <param name='handler'>Handler to be called when the event completes.</param>
        </member>
        <member name="M:Sansar.Simulation.Animation.JumpToFrame(System.Int32,Sansar.Script.ScriptBase.OperationComplete)">
             <summary>
             Jump to frame. The animation will be set to the specified frame, and paused.
             </summary>
             <sourceLocation>C:\p\Sansar\SharedBranches\ServerScript\Code\App\Libraries\SimulationScriptApi/CsAnimationNode.h(95)</sourceLocation>
            
             <value>Returns an internal event id.</value>
             <remarks>To block until the method returns pass this to <see cref='M:Sansar.Script.ScriptBase.WaitFor(System.Func{System.Action{Sansar.Script.EventData},System.Boolean,Sansar.Script.IEventSubscription})' /> in a coroutine.</remarks>
             <param name='frame'>Frame to jump to.</param>
             <param name='handler'>Handler to be called when the event completes.</param>
        </member>
        <member name="T:Sansar.Simulation.AnimationData">
            <summary>Animation events.</summary><sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsAnimationComponent.h(92)</sourceLocation>
            <remarks>See <see cref="T:Sansar.Simulation.AnimationComponent"/>. For input bindings see <see cref="T:Sansar.Simulation.CommandData"/></remarks>
        </member>
        <member name="P:Sansar.Simulation.AnimationData.BehaviorName">
            <summary> The behavior name of the Animation. This name will match the subscribed event.</summary><value/><remarks/>
        </member>
        <member name="P:Sansar.Simulation.AnimationData.ComponentId">
            <summary> The id of the animation component.</summary><value/><remarks/>
        </member>
        <member name="M:Sansar.Simulation.AnimationData.ToString">
            <summary> A string representation of this object. </summary> <returns>A string representation of this object.</returns> <remarks>The format of this string may change between releases.</remarks>
        </member>
        <member name="T:Sansar.Simulation.CharacterAnimation">
            <summary>The CharacterAnimation class represents an animation that can be played on a character component.</summary>
        </member>
        <member name="T:Sansar.Simulation.CharacterComponent">
            <summary>The CharacterComponent handles character specific operations like playing CharacterAnimations.</summary>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsCharacterComponent.h(30)</sourceLocation>
            <remarks>
            Allows for doing operations specific to characters using the Sansar skeleton types
            </remarks>
        </member>
        <member name="F:Sansar.Simulation.CharacterComponent.ComponentType">
            <summary>The <see cref='F:Sansar.Simulation.CharacterComponent.ComponentType' /> of this component</summary>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsCharacterComponent.h(36)</sourceLocation>
            <remarks></remarks>
        </member>
        <member name="P:Sansar.Simulation.CharacterComponent.ComponentId">
            <summary>Retrieves the component id for this CharacterComponent.</summary>
            <returns>The id.</returns>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsCharacterComponent.h(45)</sourceLocation><remarks/>
        </member>
        <member name="P:Sansar.Simulation.CharacterComponent.UsingMaleSkeleton">
            <summary>Retrieves whether or not the avatar is using the male skeleton for this CharacterComponent.</summary>
            <returns>Whether or not the avatar is using the male skeleton</returns>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsCharacterComponent.h(51)</sourceLocation><remarks/>
        </member>
        <member name="P:Sansar.Simulation.CharacterComponent.UsingFemaleSkeleton">
            <summary>Retrieves whether or not the avatar is using the female skeleton for this CharacterComponent.</summary>
            <returns>Whether or not the avatar is using the female skeleton</returns>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsCharacterComponent.h(52)</sourceLocation><remarks/>
        </member>
        <member name="M:Sansar.Simulation.CharacterComponent.PlayAnimation(Sansar.Simulation.CharacterAnimation,Sansar.Simulation.AnimationPlaybackMode,Sansar.Simulation.AnimationBoneSubset,System.Single,System.Action{Sansar.Script.OperationCompleteEvent})">
            <summary>Plays an animation in server time synchronously for this CharacterComponent.
            If you want multiple agent's to play an animation together, use this function</summary>
            
            
            
            
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsCharacterComponent.h(57)</sourceLocation>
            <remarks>This asynchronous method queues the write then returns.</remarks>
            <value>The return value is an internal event id.</value>
            <param name='animation'>The animation to play on the agent.</param>
            <param name='playbackMode'>How to play the animation. Only PlayOnce and Loop supported. </param>
            <param name='skeletonSubset'>Which subset of the skeleton to play the animation on.</param>
            <param name='playbackSpeed'>Animation playback speed. Must be betweeen 0.1 and 10.</param>
            <param name='handler'>Handler to be called when the event completes.</param>
        </member>
        <member name="M:Sansar.Simulation.CharacterComponent.PlayAnimation(Sansar.Simulation.CharacterAnimation,Sansar.Simulation.AnimationPlaybackMode,Sansar.Simulation.AnimationBoneSubset,System.Action{Sansar.Script.OperationCompleteEvent})">
            <summary>Plays an animation in server time synchronously for this CharacterComponent.
            If you want multiple agent's to play an animation together, use this function</summary>
            
            
            
            
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsCharacterComponent.h(57)</sourceLocation>
            <remarks>This asynchronous method queues the write then returns.</remarks>
            <value>The return value is an internal event id.</value>
            <param name='animation'>The animation to play on the agent.</param>
            <param name='playbackMode'>How to play the animation. Only PlayOnce and Loop supported. </param>
            <param name='skeletonSubset'>Which subset of the skeleton to play the animation on.</param>
            <param name='handler'>Handler to be called when the event completes.</param>
        </member>
        <member name="M:Sansar.Simulation.CharacterComponent.PlayAnimation(Sansar.Simulation.CharacterAnimation,Sansar.Simulation.AnimationPlaybackMode,Sansar.Simulation.AnimationBoneSubset)">
            <summary>Plays an animation in server time synchronously for this CharacterComponent.
            If you want multiple agent's to play an animation together, use this function</summary>
            
            
            
            
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsCharacterComponent.h(57)</sourceLocation>
            <remarks>This asynchronous method queues the write then returns.</remarks>
            <value>The return value is an internal event id.</value>
            <param name='animation'>The animation to play on the agent.</param>
            <param name='playbackMode'>How to play the animation. Only PlayOnce and Loop supported. </param>
            <param name='skeletonSubset'>Which subset of the skeleton to play the animation on.</param>
        </member>
        <member name="M:Sansar.Simulation.CharacterComponent.PlayAnimation(Sansar.Simulation.CharacterAnimation,Sansar.Simulation.AnimationPlaybackMode,Sansar.Simulation.AnimationBoneSubset,System.Single)">
            <summary>Plays an animation in server time synchronously for this CharacterComponent.
            If you want multiple agent's to play an animation together, use this function</summary>
            
            
            
            
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsCharacterComponent.h(57)</sourceLocation>
            <remarks>This asynchronous method queues the write then returns.</remarks>
            <value>The return value is an internal event id.</value>
            <param name='animation'>The animation to play on the agent.</param>
            <param name='playbackMode'>How to play the animation. Only PlayOnce and Loop supported. </param>
            <param name='skeletonSubset'>Which subset of the skeleton to play the animation on.</param>
            <param name='playbackSpeed'>Animation playback speed. Must be betweeen 0.1 and 10.</param>
        </member>
        <member name="M:Sansar.Simulation.CharacterComponent.StopAnimations(System.Action{Sansar.Script.OperationCompleteEvent})">
            <summary>Stops all animations in server time synchronously for this CharacterComponent.
            If you want multiple agent's to stop animations together, use this function</summary>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsCharacterComponent.h(60)</sourceLocation>
            <remarks>This asynchronous method queues the write then returns.</remarks>
            <value>The return value is an internal event id.</value>
            <param name='handler'>Handler to be called when the event completes.</param>
        </member>
        <member name="M:Sansar.Simulation.CharacterComponent.StopAnimations">
            <summary>Stops all animations in server time synchronously for this CharacterComponent.
            If you want multiple agent's to stop animations together, use this function</summary>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsCharacterComponent.h(60)</sourceLocation>
            <remarks>This asynchronous method queues the write then returns.</remarks>
            <value>The return value is an internal event id.</value>
        </member>
        <member name="M:Sansar.Simulation.CharacterComponent.StopAnimations(Sansar.Simulation.AnimationBoneSubset,System.Action{Sansar.Script.OperationCompleteEvent})">
            <summary>Stops all animations in server time synchronously for this CharacterComponent.
            If you want multiple agent's to stop animations together, use this function</summary>
            
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsCharacterComponent.h(61)</sourceLocation>
            <remarks>This asynchronous method queues the write then returns.</remarks>
            <value>The return value is an internal event id.</value>
            <param name='skeletonSubset'>All Animations for this skeleton subset will be stopped. </param>
            <param name='handler'>Handler to be called when the event completes.</param>
        </member>
        <member name="M:Sansar.Simulation.CharacterComponent.StopAnimations(Sansar.Simulation.AnimationBoneSubset)">
            <summary>Stops all animations in server time synchronously for this CharacterComponent.
            If you want multiple agent's to stop animations together, use this function</summary>
            
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsCharacterComponent.h(61)</sourceLocation>
            <remarks>This asynchronous method queues the write then returns.</remarks>
            <value>The return value is an internal event id.</value>
            <param name='skeletonSubset'>All Animations for this skeleton subset will be stopped. </param>
        </member>
        <member name="M:Sansar.Simulation.CharacterComponent.ToString">
            <summary> A string representation of this object. </summary> <returns>A string representation of this object.</returns> <remarks>The format of this string may change between releases.</remarks>
        </member>
        <member name="T:Sansar.Simulation.ChatData">
            <summary>Subscribe to receive events on chat messages from the system, users or scripts.</summary><sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsChat.h(66)</sourceLocation><remarks/>
        </member>
        <member name="P:Sansar.Simulation.ChatData.Channel">
            <summary> int channel which the chat occurs on.</summary><value/><remarks/>
        </member>
        <member name="P:Sansar.Simulation.ChatData.Source">
            <summary> string source of the chat: system, user or script.</summary><value/><remarks/>
        </member>
        <member name="P:Sansar.Simulation.ChatData.SourceId">
            <summary> Sansar.Script.SessionId id of the chat source. May be <see cref='F:Sansar.Script.SessionId.Invalid'/> if the source is not an agent.</summary><value/><remarks/>
        </member>
        <member name="P:Sansar.Simulation.ChatData.SourceScriptId">
            <summary> Sansar.Script.ScriptId id of the chat source. May be <see cref='F:Sansar.Script.ScriptId.Invalid'/> if the source is not a script.</summary><value/><remarks/>
        </member>
        <member name="P:Sansar.Simulation.ChatData.Message">
            <summary> string message of the chat event.</summary><value/><remarks/>
        </member>
        <member name="M:Sansar.Simulation.ChatData.ToString">
            <summary> A string representation of this object. </summary> <returns>A string representation of this object.</returns> <remarks>The format of this string may change between releases.</remarks>
        </member>
        <member name="T:Sansar.Simulation.Cluster">
            <summary>The Cluster class handles interactions with in game objects.</summary><sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsCluster.h(21)</sourceLocation><remarks/>
        </member>
        <member name="P:Sansar.Simulation.Cluster.ClusterId">
            <summary>
            Returns the Id of this cluster.
            </summary><sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsCluster.h(39)</sourceLocation><value/><remarks/>
        </member>
        <member name="P:Sansar.Simulation.Cluster.ObjectPrivateCount">
            <summary>
            The current number of objects in this cluster.
            </summary><sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsCluster.h(32)</sourceLocation><remarks/><value/>e
        </member>
        <member name="M:Sansar.Simulation.Cluster.Destroy(System.Action{Sansar.Script.OperationCompleteEvent})">
            <summary>
            Destroys this cluster.
            </summary>
            <returns>The internal event id for the completion event.</returns><sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsCluster.h(30)</sourceLocation><remarks/>
            <param name='handler'>Handler to be called when the event completes.</param>
        </member>
        <member name="M:Sansar.Simulation.Cluster.Destroy">
            <summary>
            Destroys this cluster.
            </summary>
            <returns>The internal event id for the completion event.</returns><sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsCluster.h(30)</sourceLocation><remarks/>
        </member>
        <member name="M:Sansar.Simulation.Cluster.GetObjectPrivate(System.UInt32)">
            <summary>
            Retrieves a Sansar.Simulation.ObjectPrivate by index.
            </summary>
            
            <returns>The Sansar.Simulation.ObjectPrivate at that index or null.</returns>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsCluster.h(34)</sourceLocation><remarks/>
            <param name='index'>Index of the Sansar.Simulation.ObjectPrivate to retrieve.</param>
        </member>
        <member name="M:Sansar.Simulation.Cluster.GetObjectPrivates">
            <summary>Enumerable for GetObjectPrivate</summary><returns>Enumerable for GetObjectPrivate</returns><remarks>The resulting enumerable may be invalidated if the underlying collection changes.</remarks>
        </member>
        <member name="M:Sansar.Simulation.Cluster.ToString">
            <summary> A string representation of this object. </summary> <returns>A string representation of this object.</returns> <remarks>The format of this string may change between releases.</remarks>
        </member>
        <member name="M:Sansar.Simulation.Cluster.Destroy(Sansar.Script.ScriptBase.OperationComplete)">
            <summary>
            Destroys this cluster.
            </summary>
            <returns>The internal event id for the completion event.</returns><sourceLocation>C:\p\Sansar\SharedBranches\ServerScript\Code\App\Libraries\SimulationScriptApi/CsCluster.h(31)</sourceLocation><remarks/>
            <param name='handler'>Handler to be called when the event completes.</param>
        </member>
        <member name="T:Sansar.Simulation.HttpClient">
            <summary>The Http Client can be used to make HTTP requests to external services.</summary><sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsHttpClient.h(162)</sourceLocation>
            <remarks>
            <para>A simple script to get some external data might be:</para>
            <example>
            <code lang="C#" src="examples/HttpClientExample.cs"/>
            </example>
            </remarks>
        </member>
        <member name="T:Sansar.Simulation.HttpClient.RequestData">
            <summary>The result of a <see cref="M:Sansar.Simulation.HttpClient.Request(System.String,Sansar.Simulation.HttpRequestOptions,System.Action{Sansar.Simulation.HttpClient.RequestData})"/> call.</summary>
        </member>
        <member name="P:Sansar.Simulation.HttpClient.RequestData.Response">
            <summary>The contents of a <see cref="M:Sansar.Simulation.HttpClient.Request(System.String,Sansar.Simulation.HttpRequestOptions,System.Action{Sansar.Simulation.HttpClient.RequestData})"/>.</summary><value>Only valid if <see cref="P:Sansar.Script.OperationCompleteEvent.Success"/> is true.</value><remarks>The information in the response is only valid if <see cref="P:Success"/> is true.</remarks>
        </member>
        <member name="M:Sansar.Simulation.HttpClient.RequestData.ToString">
            <summary> A string representation of this object. </summary> <returns>A string representation of this object.</returns> <remarks>The format of this string may change between releases.</remarks>
        </member>
        <member name="M:Sansar.Simulation.HttpClient.Request(System.String,Sansar.Simulation.HttpRequestOptions,System.Action{Sansar.Simulation.HttpClient.RequestData})">
            <summary>
            Performs a HTTP request.
            </summary>
            
            
            
            <remarks>Currently only text content types are supported.</remarks>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsHttpClient.h(172)</sourceLocation>
            
            
            <param name='url'>The url. It may include parameters, but they must be url-encoded.</param>
            <param name='requestOptions'>The request options struct</param>
            <param name='handler'>The event handler to be called when the request is complete</param>
        </member>
        <member name="M:Sansar.Simulation.HttpClient.Request(System.String,System.Action{Sansar.Simulation.HttpClient.RequestData})">
            <summary>
            Performs a HTTP request.
            </summary>
            
            
            
            <remarks>Currently only text content types are supported.</remarks>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsHttpClient.h(172)</sourceLocation>
            
            
            <param name='url'>The url. It may include parameters, but they must be url-encoded.</param>
            <param name='handler'>The event handler to be called when the request is complete</param>
        </member>
        <member name="T:Sansar.Simulation.HttpResponse">
            <summary>
            Data returned from <see cref="M:Sansar.Simulation.HttpClient.Request(System.String,Sansar.Simulation.HttpRequestOptions,System.Action{Sansar.Simulation.HttpClient.RequestData})"/>
            </summary>
        </member>
        <member name="F:Sansar.Simulation.HttpResponse.Headers">
            <summary>
            The headers from the response
            </summary>
            <remarks>May be null if <see cref="F:Sansar.Simulation.HttpRequestOptions.RetrieveAllHeaders"/> is false or if no headers are returned.</remarks>
        </member>
        <member name="F:Sansar.Simulation.HttpResponse.Body">
            <summary>
            The response body.
            </summary>
        </member>
        <member name="F:Sansar.Simulation.HttpResponse.Status">
            <summary>
            The status code returned by the remote server.
            </summary>
        </member>
        <member name="T:Sansar.Simulation.HttpRequestOptions">
            <summary>
            Options used for <see cref="M:Sansar.Simulation.HttpClient.Request(System.String,Sansar.Simulation.HttpRequestOptions,System.Action{Sansar.Simulation.HttpClient.RequestData})"/>
            </summary>
        </member>
        <member name="F:Sansar.Simulation.HttpRequestOptions.Headers">
            <summary>
            Http headers.
            </summary>
            <remarks>May be null.</remarks>
        </member>
        <member name="F:Sansar.Simulation.HttpRequestOptions.Parameters">
            <summary>
            Request parameters.
            </summary>
            <remarks>May be null. If non-null, the values will be url-encoded.</remarks>
        </member>
        <member name="F:Sansar.Simulation.HttpRequestOptions.Body">
            <summary>
            Body for <see cref="T:Sansar.Simulation.HttpRequestMethod"/>s which use one.
            </summary>
            <remarks>May be null.</remarks>
        </member>
        <member name="F:Sansar.Simulation.HttpRequestOptions.Method">
            <summary>
            The <see cref="T:Sansar.Simulation.HttpRequestMethod"/> to use for this request.
            </summary>
            <remarks>Defaults to <see cref="F:Sansar.Simulation.HttpRequestMethod.GET"/></remarks>
        </member>
        <member name="F:Sansar.Simulation.HttpRequestOptions.RetrieveAllHeaders">
            <summary>
            If false, minimal or no response headers will be returned.
            </summary>
        </member>
        <member name="F:Sansar.Simulation.HttpRequestOptions.DisableRedirect">
            <summary>
            Disable automatic redirects.
            </summary>
            <remarks>The maximum number of redirects is determined by the server</remarks>
        </member>
        <member name="T:Sansar.Simulation.SceneInfo">
            <summary>Information about a Scene.</summary>
            <remarks>Provides read only access to Scene information.</remarks>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsScene.h(293)</sourceLocation>
        </member>
        <member name="F:Sansar.Simulation.SceneInfo.ApiVersionString">
            <summary>
            Api version the scene is running.
            </summary><remarks/>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsScene.h(302)</sourceLocation>
        </member>
        <member name="P:Sansar.Simulation.SceneInfo.LocationHandle">
            <summary>Location handle for the Experience.</summary><sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsScene.h(228)</sourceLocation>
            <remarks>This handle can be used with <see cref='M:Sansar.Simulation.Client.TeleportToLocation(System.String,System.String)'/>.</remarks>
            <value>String</value>
        </member>
        <member name="P:Sansar.Simulation.SceneInfo.AvatarId">
            <summary>Persona handle for the owner of the scene.</summary><sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsScene.h(229)</sourceLocation>
            <remarks>This handle can be used with <see cref='M:Sansar.Simulation.Client.TeleportToLocation(System.String,System.String)'/>.</remarks>
            <value>String</value>
        </member>
        <member name="P:Sansar.Simulation.SceneInfo.SansarUri">
            <summary>The full Sansar URI for this instance of the scene.</summary><sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsScene.h(231)</sourceLocation>
            <remarks></remarks>
            <value>String</value>
        </member>
        <member name="P:Sansar.Simulation.SceneInfo.InstanceId">
            <summary>Instance id for this specific instance of the scene.</summary><sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsScene.h(230)</sourceLocation>
            <remarks></remarks>
            <value>String</value>
        </member>
        <member name="P:Sansar.Simulation.SceneInfo.AvatarUuid">
            <summary>Persona ID for the owner of the scene.</summary><sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsScene.h(232)</sourceLocation>
            <remarks>The persona ID can be used to verify an agent is the owner of the scene. To retrieve the agent's id use <see cref='P:Sansar.Simulation.AgentInfo.AvatarUuid'/>.</remarks>
            <value>System.Guid</value>
        </member>
        <member name="P:Sansar.Simulation.SceneInfo.AccessGroup">
            <summary>Access group of the scene.</summary><sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsScene.h(233)</sourceLocation>
            <remarks>For internal debugging</remarks>
            <value>String name of the access group.</value>
        </member>
        <member name="P:Sansar.Simulation.SceneInfo.CompatVersion">
            <summary>Scene's asset compatibility version for debugging.</summary><sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsScene.h(234)</sourceLocation>
            <remarks>All assets must match this version to load.</remarks>
            <value>String</value>
        </member>
        <member name="P:Sansar.Simulation.SceneInfo.ProtoVersion">
            <summary>Scene's message protocol version for debugging.</summary><sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsScene.h(235)</sourceLocation>
            <remarks>Can be used to verify the Experience's protocol version is the expected value.</remarks>
            <value>String</value>
        </member>
        <member name="P:Sansar.Simulation.SceneInfo.Configuration">
            <summary>Scene's build configuration.</summary><sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsScene.h(236)</sourceLocation>
            <remarks>For internal debugging</remarks>
            <value>Expected values are debug, release or production.</value>
        </member>
        <member name="P:Sansar.Simulation.SceneInfo.BuildId">
            <summary>Scene's build id for debugging.</summary><sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsScene.h(237)</sourceLocation>
            <remarks>For internal debugging.</remarks>
            <value>String build id of the region server.</value>
        </member>
        <member name="P:Sansar.Simulation.SceneInfo.ExperienceId">
            <summary>Scene's World Id.</summary><sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsScene.h(238)</sourceLocation>
            <remarks>For internal debugging.</remarks>
            <value>World id string</value>
        </member>
        <member name="P:Sansar.Simulation.SceneInfo.ExperienceName">
            <summary>Scene's experience name.</summary><sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsScene.h(239)</sourceLocation>
            <remarks>For internal debugging.</remarks>
            <value>Experience name string</value>
        </member>
        <member name="P:Sansar.Simulation.SceneInfo.InstanceRole">
            <summary>The role of this scene.</summary><sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsScene.h(241)</sourceLocation>
            <remarks>Broadcaster scenes have the role "Broadcaster" and clone scenes have the role "Clone". Normal scenes will have the role "Unset".</remarks>
            <value>The role of this instance: "Unset", "Broadcaster", or "Clone".</value>
        </member>
        <member name="P:Sansar.Simulation.SceneInfo.MaxUsers">
            <summary>Maximum number of users allowed per instance of this scene.</summary><sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsScene.h(240)</sourceLocation>
            <remarks>New instances will start if more users attempt to join the scene.</remarks>
            <value>Maximum number of users allowed in the scene.</value>
        </member>
        <member name="P:Sansar.Simulation.SceneInfo.EventId">
            <summary>The event id of this scene if it is part of an event.</summary><sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsScene.h(244)</sourceLocation>
            <remarks></remarks>
            <value>The Guid for this event as a string.</value>
        </member>
        <member name="M:Sansar.Simulation.SceneInfo.ToString">
            <summary> A string representation of this object. </summary> <returns>A string representation of this object.</returns> <remarks>The format of this string may change between releases.</remarks>
        </member>
        <member name="F:Sansar.Simulation.SceneInfo.ApiVersion">
            <summary>
            Api version the scene is running.
            </summary><remarks/>
        </member>
        <member name="T:Sansar.Simulation.ScenePublic">
            <summary>The Public Scene API, a more limited subset of <see cref='T:Sansar.Simulation.ScenePrivate'/>.</summary>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsScene.h(309)</sourceLocation>
            <remarks></remarks>
        </member>
        <member name="P:Sansar.Simulation.ScenePublic.SceneInfo">
            <summary>
            Gets the SceneInfo for this Scene
            </summary>
            <returns>The full SceneInfo Api</returns>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsScene.h(97)</sourceLocation>
            <remarks></remarks>
        </member>
        <member name="P:Sansar.Simulation.ScenePublic.AgentCount">
            <summary>The number of agents in the Scene.</summary><sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsScene.h(127)</sourceLocation>
            <remarks>This number changes when agents join and part.</remarks>
            <value>Unsigned integer count of the number of agents in the Scene.</value>
        </member>
        <member name="P:Sansar.Simulation.ScenePublic.Chat">
            <summary>
            Gets the Chat interface for this Scene
            </summary>
            <returns>The Chat Api</returns>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsScene.h(102)</sourceLocation>
            <remarks></remarks>
        </member>
        <member name="P:Sansar.Simulation.ScenePublic.User">
            <summary>
            Gets the User interface for this Scene
            </summary>
            <returns>The User Api</returns>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsScene.h(103)</sourceLocation>
            <remarks></remarks>
        </member>
        <member name="M:Sansar.Simulation.ScenePublic.GetAgents">
            <summary>
            Returns the current list of Agents in the Scene.
            </summary>
            <returns>The current list of agents in the Scene</returns>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsScene.h(129)</sourceLocation>
        </member>
        <member name="M:Sansar.Simulation.ScenePublic.GetAgent(System.UInt32)">
            <summary>Get an <see cref='T:Sansar.Simulation.AgentPublic'/> for a specific agent in the Scene.
            </summary><sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsScene.h(126)</sourceLocation>
            
            <remarks>Agents may appear at different indices as they join and part.</remarks>
            <value>Returns null if the index is larger than the number of agents in the Scene.</value>
            <param name='index'>The index of the agent to get.</param>
        </member>
        <member name="M:Sansar.Simulation.ScenePublic.FindAgent(System.Guid)">
            <summary>
            Looks up an AgentInfo associated with the given persona id, if they are in the scene.
            </summary>
            
            <returns>The agent, or null if an agent cannot be found with that id in the scene.</returns>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsScene.h(117)</sourceLocation>
            <remarks>Agents may leave at any time. Attempting to use an Agent or AgentInfo interface for an agent no longer in the scene will throw a NullReferenceException.</remarks>
            <param name='personaId'>The personaId of the agent to find.</param>
        </member>
        <member name="M:Sansar.Simulation.ScenePublic.FindAgent(Sansar.Script.ObjectId)">
            <summary>
            Looks up an AgentInfo associated with the given object id.
            </summary>
            
            <returns>The AgentInfo, or null if an agent cannot be found with that id.</returns>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsScene.h(111)</sourceLocation>
            <remarks>Agents may leave at any time. Attempting to use an Agent or AgentInfo interface for an agent no longer in the scene will throw a NullReferenceException.</remarks>
            <param name='objectId'>The object to find.</param>
        </member>
        <member name="M:Sansar.Simulation.ScenePublic.FindAgent(Sansar.Script.SessionId)">
            <summary>
            Looks up an AgentInfo associated with the given session id, if they are in the scene.
            </summary>
            
            <returns>The AgentInfo, or null if an agent cannot be found with that id.</returns>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsScene.h(114)</sourceLocation>
            <remarks>Agents may leave at any time. Attempting to use an Agent or AgentInfo interface for an agent no longer in the scene will throw a NullReferenceException.</remarks>
            <param name='sessionId'>The sessionId of the agent to find.</param>
        </member>
        <member name="M:Sansar.Simulation.ScenePublic.FindObject(Sansar.Script.ObjectId)">
            <summary>
            Looks up a Object associated with the given object id.
            </summary>
            
            <returns>The ObjectPublic, or null if a Object cannot be found with that id.</returns>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsScene.h(108)</sourceLocation><remarks/>
            <param name='objectId'>The object to find.</param>
        </member>
        <member name="M:Sansar.Simulation.ScenePublic.GetPortalUri(Sansar.Script.ObjectId)">
            <summary>URI destination for the specified portal.</summary><sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsScene.h(121)</sourceLocation>
            <remarks>The URI of the destination of the portal.</remarks>
            <value>String</value>
        </member>
        <member name="M:Sansar.Simulation.ScenePublic.GetPortalDescription(Sansar.Script.ObjectId)">
            <summary>Description for the specified portal.</summary><sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsScene.h(122)</sourceLocation>
            <remarks>The description of the portal.</remarks>
            <value>String</value>
        </member>
        <member name="M:Sansar.Simulation.ScenePublic.GetPortalCreatorName(Sansar.Script.ObjectId)">
            <summary>The name of the user who created the specified portal.</summary><sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsScene.h(123)</sourceLocation>
            <remarks>User who created the portal.</remarks>
            <value>String</value>
        </member>
        <member name="M:Sansar.Simulation.ScenePublic.ToString">
            <summary> A string representation of this object. </summary> <returns>A string representation of this object.</returns> <remarks>The format of this string may change between releases.</remarks>
        </member>
        <member name="M:Sansar.Simulation.ScenePublic.FindReflective``1(System.String)">
            <summary>
            Looks up Reflective objects in the scene that match the interface type by class name.
            </summary>
            <param name="name">The type name of the object's class to find.</param>
            <typeparam name="TInterface">The interface type to find.</typeparam>
            <returns>An IEnumerable which contains all objects of the given type name that match the given interface.</returns>
            <remarks>The name given corresponds to the <see cref="P:Type.FullName"/> of the object. Multiple scripts may define unrelated types of the same name, but only registered objects that match the interface of TInterface will be returned.</remarks>
        </member>
        <member name="T:Sansar.Simulation.RayCastHit">
            <summary>Result of a Raycast.</summary><remarks/><sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsScene.h(71)</sourceLocation>
        </member>
        <member name="F:Sansar.Simulation.RayCastHit.Location">
            <summary>The location where the hit occurred.</summary><remarks/><sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsScene.h(71)</sourceLocation>
        </member>
        <member name="F:Sansar.Simulation.RayCastHit.Normal">
            <summary>The normal at the location where the hit occurred.</summary><remarks/><sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsScene.h(71)</sourceLocation>
        </member>
        <member name="F:Sansar.Simulation.RayCastHit.Fraction">
            <summary>The query shape's position (upon contact) along the cast direction as a fraction of the original casting length.</summary><remarks/><sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsScene.h(71)</sourceLocation>
        </member>
        <member name="F:Sansar.Simulation.RayCastHit.ComponentId">
            <summary>The id of the <see cref="T:Sansar.Simulation.RigidBodyComponent"/> hit.</summary><remarks/><sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsScene.h(71)</sourceLocation>
        </member>
        <member name="T:Sansar.Simulation.LightComponent">
            <summary>The LightComponent handles interactions with lights.</summary><sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsLightComponent.h(40)</sourceLocation><remarks/>
        </member>
        <member name="F:Sansar.Simulation.LightComponent.ComponentType">
            <summary>The <see cref='F:Sansar.Simulation.LightComponent.ComponentType' /> of this component</summary>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsLightComponent.h(47)</sourceLocation>
            <remarks></remarks>
        </member>
        <member name="P:Sansar.Simulation.LightComponent.ComponentId">
            <summary>Retrieves the component id for this LightComponent.</summary>
            <returns>The id.</returns>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsLightComponent.h(58)</sourceLocation><remarks/>
        </member>
        <member name="P:Sansar.Simulation.LightComponent.IsScriptable">
            <summary>The scriptable flag for this LightComponent.</summary>
            <returns>Whether or not this light can have properties changed by script.</returns>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsLightComponent.h(69)</sourceLocation><remarks/>
        </member>
        <member name="P:Sansar.Simulation.LightComponent.LightType">
            <summary>The light type for this LightComponent.</summary>
            <returns>Light type enum for the light component.</returns>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsLightComponent.h(70)</sourceLocation><remarks/>
        </member>
        <member name="P:Sansar.Simulation.LightComponent.Name">
            <summary>This LightComponent name, as specified in the editor.</summary><sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsLightComponent.h(66)</sourceLocation>
            <remarks></remarks>
            <value></value>
        </member>
        <member name="M:Sansar.Simulation.LightComponent.GetAngle">
            <summary>Retrieves the cone angle of this LightComponent.</summary>
            <returns>The angle in degrees.</returns>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsLightComponent.h(72)</sourceLocation><remarks/>
        </member>
        <member name="M:Sansar.Simulation.LightComponent.SetAngle(System.Single,System.Action{Sansar.Script.OperationCompleteEvent})">
            <summary>Sets the cone angle for this LightComponent of type LightType.SpotLight.</summary>
            
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsLightComponent.h(73)</sourceLocation>
            <remarks>This method only affects spot lights. This asynchronous method queues the write then returns.
            To block until the write has occurred, pass this method to <see cref='M:Sansar.Script.ScriptBase.WaitFor' /> while in a coroutine.</remarks>
            <value>The return value is an internal event id.</value>
            <param name='angle'>The angle in degrees, 1 to 160.</param>
            <param name='handler'>Handler to be called when the event completes.</param>
        </member>
        <member name="M:Sansar.Simulation.LightComponent.SetAngle(System.Single)">
            <summary>Sets the cone angle for this LightComponent of type LightType.SpotLight.</summary>
            
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsLightComponent.h(73)</sourceLocation>
            <remarks>This method only affects spot lights. This asynchronous method queues the write then returns.
            To block until the write has occurred, pass this method to <see cref='M:Sansar.Script.ScriptBase.WaitFor' /> while in a coroutine.</remarks>
            <value>The return value is an internal event id.</value>
            <param name='angle'>The angle in degrees, 1 to 160.</param>
        </member>
        <member name="M:Sansar.Simulation.LightComponent.GetAngularFalloff">
            <summary>Retrieves the angular falloff of this LightComponent.</summary>
            <returns>The angular falloff.</returns>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsLightComponent.h(76)</sourceLocation><remarks/>
        </member>
        <member name="M:Sansar.Simulation.LightComponent.SetAngularFalloff(System.Single,System.Action{Sansar.Script.OperationCompleteEvent})">
            <summary>Sets the angular falloff for this LightComponent of type LightType.SpotLight.</summary>
            
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsLightComponent.h(77)</sourceLocation>
            <remarks>This method only affects spot lights. This asynchronous method queues the write then returns.
            To block until the write has occurred, pass this method to <see cref='M:Sansar.Script.ScriptBase.WaitFor' /> while in a coroutine.</remarks>
            <value>The return value is an internal event id.</value>
            <param name='angularFalloff'>The angular falloff, 0.01 to 1.</param>
            <param name='handler'>Handler to be called when the event completes.</param>
        </member>
        <member name="M:Sansar.Simulation.LightComponent.SetAngularFalloff(System.Single)">
            <summary>Sets the angular falloff for this LightComponent of type LightType.SpotLight.</summary>
            
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsLightComponent.h(77)</sourceLocation>
            <remarks>This method only affects spot lights. This asynchronous method queues the write then returns.
            To block until the write has occurred, pass this method to <see cref='M:Sansar.Script.ScriptBase.WaitFor' /> while in a coroutine.</remarks>
            <value>The return value is an internal event id.</value>
            <param name='angularFalloff'>The angular falloff, 0.01 to 1.</param>
        </member>
        <member name="M:Sansar.Simulation.LightComponent.GetCastsShadows">
            <summary>Retrieves whether this LightComponent casts shadows.</summary>
            <returns>The shadow cast state.</returns>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsLightComponent.h(80)</sourceLocation><remarks/>
        </member>
        <member name="M:Sansar.Simulation.LightComponent.SetCastsShadows(System.Boolean,System.Action{Sansar.Script.OperationCompleteEvent})">
            <summary>Sets whether shadows are cast from this LightComponent of type LightType.SpotLight.</summary>
            
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsLightComponent.h(81)</sourceLocation>
            <remarks>This method only affects spot lights. This asynchronous method queues the write then returns.
            To block until the write has occurred, pass this method to <see cref='M:Sansar.Script.ScriptBase.WaitFor' /> while in a coroutine.</remarks>
            <value>The return value is an internal event id.</value>
            <param name='castsShadows'>True to cast shadows.</param>
            <param name='handler'>Handler to be called when the event completes.</param>
        </member>
        <member name="M:Sansar.Simulation.LightComponent.SetCastsShadows(System.Boolean)">
            <summary>Sets whether shadows are cast from this LightComponent of type LightType.SpotLight.</summary>
            
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsLightComponent.h(81)</sourceLocation>
            <remarks>This method only affects spot lights. This asynchronous method queues the write then returns.
            To block until the write has occurred, pass this method to <see cref='M:Sansar.Script.ScriptBase.WaitFor' /> while in a coroutine.</remarks>
            <value>The return value is an internal event id.</value>
            <param name='castsShadows'>True to cast shadows.</param>
        </member>
        <member name="M:Sansar.Simulation.LightComponent.GetNormalizedColor">
            <summary>Retrieves the normalized color of this LightComponent.</summary>
            <returns>The normalized color.</returns>
            <remarks>This might not match values set via script or in the editor since the color of a light is internally multiplied by its intensity before being applied to the scene.</remarks>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsLightComponent.h(84)</sourceLocation><remarks/>
        </member>
        <member name="M:Sansar.Simulation.LightComponent.GetRelativeIntensity">
            <summary>Retrieves the intensity of this LightComponent based on its normalized color.</summary>
            <returns>The intensity based on a normalized color.</returns>
            <remarks>This might not match values set via script or in the editor since the color of a light is internally multiplied by its intensity before being applied to the scene.</remarks>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsLightComponent.h(85)</sourceLocation><remarks/>
        </member>
        <member name="M:Sansar.Simulation.LightComponent.SetColorAndIntensity(Sansar.Color,System.Single,System.Action{Sansar.Script.OperationCompleteEvent})">
            <summary>Sets the color for this LightComponent.</summary>
            
            
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsLightComponent.h(86)</sourceLocation>
            <remarks>The intensity is multiplied by the color and then applied to the light. This asynchronous method queues the write then returns.
            To block until the write has occurred, pass this method to <see cref='M:Sansar.Script.ScriptBase.WaitFor' /> while in a coroutine.</remarks>
            <value>The return value is an internal event id.</value>
            <param name='color'>The color.</param>
            <param name='intensity'>The intensity, 0 to 100.</param>
            <param name='handler'>Handler to be called when the event completes.</param>
        </member>
        <member name="M:Sansar.Simulation.LightComponent.SetColorAndIntensity(Sansar.Color,System.Single)">
            <summary>Sets the color for this LightComponent.</summary>
            
            
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsLightComponent.h(86)</sourceLocation>
            <remarks>The intensity is multiplied by the color and then applied to the light. This asynchronous method queues the write then returns.
            To block until the write has occurred, pass this method to <see cref='M:Sansar.Script.ScriptBase.WaitFor' /> while in a coroutine.</remarks>
            <value>The return value is an internal event id.</value>
            <param name='color'>The color.</param>
            <param name='intensity'>The intensity, 0 to 100.</param>
        </member>
        <member name="M:Sansar.Simulation.LightComponent.GetNearClip">
            <summary>Retrieves the near clip distance of this LightComponent.</summary>
            <returns>The near clip distance.</returns>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsLightComponent.h(89)</sourceLocation><remarks/>
        </member>
        <member name="M:Sansar.Simulation.LightComponent.SetNearClip(System.Single,System.Action{Sansar.Script.OperationCompleteEvent})">
            <summary>Sets the near clip plane distance for this LightComponent of type LightType.SpotLight.</summary>
            
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsLightComponent.h(90)</sourceLocation>
            <remarks>This method only affects spot lights. This asynchronous method queues the write then returns.
            To block until the write has occurred, pass this method to <see cref='M:Sansar.Script.ScriptBase.WaitFor' /> while in a coroutine.</remarks>
            <value>The return value is an internal event id.</value>
            <param name='nearClip'>The near clip distance, 0 to 500.</param>
            <param name='handler'>Handler to be called when the event completes.</param>
        </member>
        <member name="M:Sansar.Simulation.LightComponent.SetNearClip(System.Single)">
            <summary>Sets the near clip plane distance for this LightComponent of type LightType.SpotLight.</summary>
            
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsLightComponent.h(90)</sourceLocation>
            <remarks>This method only affects spot lights. This asynchronous method queues the write then returns.
            To block until the write has occurred, pass this method to <see cref='M:Sansar.Script.ScriptBase.WaitFor' /> while in a coroutine.</remarks>
            <value>The return value is an internal event id.</value>
            <param name='nearClip'>The near clip distance, 0 to 500.</param>
        </member>
        <member name="M:Sansar.Simulation.LightComponent.GetRange">
            <summary>Retrieves the current range of this LightComponent.</summary>
            <returns>The range.</returns>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsLightComponent.h(93)</sourceLocation><remarks/>
        </member>
        <member name="M:Sansar.Simulation.LightComponent.SetRange(System.Single,System.Action{Sansar.Script.OperationCompleteEvent})">
            <summary>Sets the range for this LightComponent.</summary>
            
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsLightComponent.h(94)</sourceLocation>
            <remarks>This asynchronous method queues the write then returns.
            To block until the write has occurred, pass this method to <see cref='M:Sansar.Script.ScriptBase.WaitFor' /> while in a coroutine.</remarks>
            <value>The return value is an internal event id.</value>
            <param name='range'>The range, 1 to 500.</param>
            <param name='handler'>Handler to be called when the event completes.</param>
        </member>
        <member name="M:Sansar.Simulation.LightComponent.SetRange(System.Single)">
            <summary>Sets the range for this LightComponent.</summary>
            
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsLightComponent.h(94)</sourceLocation>
            <remarks>This asynchronous method queues the write then returns.
            To block until the write has occurred, pass this method to <see cref='M:Sansar.Script.ScriptBase.WaitFor' /> while in a coroutine.</remarks>
            <value>The return value is an internal event id.</value>
            <param name='range'>The range, 1 to 500.</param>
        </member>
        <member name="M:Sansar.Simulation.LightComponent.GetShadowPriority">
            <summary>Retrieves the shadow priority of this LightComponent.</summary>
            <returns>The shadow priority.</returns>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsLightComponent.h(97)</sourceLocation><remarks/>
        </member>
        <member name="M:Sansar.Simulation.LightComponent.SetShadowPriority(System.UInt32,System.Action{Sansar.Script.OperationCompleteEvent})">
            <summary>Sets the shadow priority of this LightComponent of type LightType.SpotLight.</summary>
            
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsLightComponent.h(98)</sourceLocation>
            <remarks>Set this to zero to turn off shadows. This method only affects spot lights. The renderer prioritizes shadows cast from higher priority lights first.
            This asynchronous method queues the write then returns.
            To block until the write has occurred, pass this method to <see cref='M:Sansar.Script.ScriptBase.WaitFor' /> while in a coroutine.</remarks>
            <value>The return value is an internal event id.</value>
            <param name='shadowPriority'>Shadow priority.</param>
            <param name='handler'>Handler to be called when the event completes.</param>
        </member>
        <member name="M:Sansar.Simulation.LightComponent.SetShadowPriority(System.UInt32)">
            <summary>Sets the shadow priority of this LightComponent of type LightType.SpotLight.</summary>
            
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsLightComponent.h(98)</sourceLocation>
            <remarks>Set this to zero to turn off shadows. This method only affects spot lights. The renderer prioritizes shadows cast from higher priority lights first.
            This asynchronous method queues the write then returns.
            To block until the write has occurred, pass this method to <see cref='M:Sansar.Script.ScriptBase.WaitFor' /> while in a coroutine.</remarks>
            <value>The return value is an internal event id.</value>
            <param name='shadowPriority'>Shadow priority.</param>
        </member>
        <member name="M:Sansar.Simulation.LightComponent.ToString">
            <summary> A string representation of this object. </summary> <returns>A string representation of this object.</returns> <remarks>The format of this string may change between releases.</remarks>
        </member>
        <member name="M:Sansar.Simulation.LightComponent.SetAngle(System.Single,Sansar.Script.ScriptBase.OperationComplete)">
             <summary>Sets the cone angle for this LightComponent of type LightType.SpotLight.</summary>
            
             <sourceLocation>C:\p\Sansar\SharedBranches\ServerScript\Code\App\Libraries\SimulationScriptApi/CsLightComponent.h(76)</sourceLocation>
             <remarks>This method only affects spot lights. This asynchronous method queues the write then returns.
             To block until the write has occurred, pass this method to <see cref='M:Sansar.Script.ScriptBase.WaitFor' /> while in a coroutine.</remarks>
             <value>The return value is an internal event id.</value>
             <param name='angle'>The angle in degrees, 1 to 160.</param>
             <param name='handler'>Handler to be called when the event completes.</param>
        </member>
        <member name="M:Sansar.Simulation.LightComponent.SetAngularFalloff(System.Single,Sansar.Script.ScriptBase.OperationComplete)">
             <summary>Sets the angular falloff for this LightComponent of type LightType.SpotLight.</summary>
            
             <sourceLocation>C:\p\Sansar\SharedBranches\ServerScript\Code\App\Libraries\SimulationScriptApi/CsLightComponent.h(80)</sourceLocation>
             <remarks>This method only affects spot lights. This asynchronous method queues the write then returns.
             To block until the write has occurred, pass this method to <see cref='M:Sansar.Script.ScriptBase.WaitFor' /> while in a coroutine.</remarks>
             <value>The return value is an internal event id.</value>
             <param name='angularFalloff'>The angular falloff, 0.01 to 1.</param>
             <param name='handler'>Handler to be called when the event completes.</param>
        </member>
        <member name="M:Sansar.Simulation.LightComponent.SetCastsShadows(System.Boolean,Sansar.Script.ScriptBase.OperationComplete)">
             <summary>Sets whether shadows are cast from this LightComponent of type LightType.SpotLight.</summary>
            
             <sourceLocation>C:\p\Sansar\SharedBranches\ServerScript\Code\App\Libraries\SimulationScriptApi/CsLightComponent.h(84)</sourceLocation>
             <remarks>This method only affects spot lights. This asynchronous method queues the write then returns.
             To block until the write has occurred, pass this method to <see cref='M:Sansar.Script.ScriptBase.WaitFor' /> while in a coroutine.</remarks>
             <value>The return value is an internal event id.</value>
             <param name='castsShadows'>True to cast shadows.</param>
             <param name='handler'>Handler to be called when the event completes.</param>
        </member>
        <member name="M:Sansar.Simulation.LightComponent.SetColorAndIntensity(Sansar.Color,System.Single,Sansar.Script.ScriptBase.OperationComplete)">
             <summary>Sets the color for this LightComponent.</summary>
            
            
             <sourceLocation>C:\p\Sansar\SharedBranches\ServerScript\Code\App\Libraries\SimulationScriptApi/CsLightComponent.h(89)</sourceLocation>
             <remarks>The intensity is multiplied by the color and then applied to the light. This asynchronous method queues the write then returns.
             To block until the write has occurred, pass this method to <see cref='M:Sansar.Script.ScriptBase.WaitFor' /> while in a coroutine.</remarks>
             <value>The return value is an internal event id.</value>
             <param name='color'>The color.</param>
             <param name='intensity'>The intensity, 0 to 100.</param>
             <param name='handler'>Handler to be called when the event completes.</param>
        </member>
        <member name="M:Sansar.Simulation.LightComponent.SetNearClip(System.Single,Sansar.Script.ScriptBase.OperationComplete)">
             <summary>Sets the near clip plane distance for this LightComponent of type LightType.SpotLight.</summary>
            
             <sourceLocation>C:\p\Sansar\SharedBranches\ServerScript\Code\App\Libraries\SimulationScriptApi/CsLightComponent.h(93)</sourceLocation>
             <remarks>This method only affects spot lights. This asynchronous method queues the write then returns.
             To block until the write has occurred, pass this method to <see cref='M:Sansar.Script.ScriptBase.WaitFor' /> while in a coroutine.</remarks>
             <value>The return value is an internal event id.</value>
             <param name='nearClip'>The near clip distance, 0 to 500.</param>
             <param name='handler'>Handler to be called when the event completes.</param>
        </member>
        <member name="M:Sansar.Simulation.LightComponent.SetRange(System.Single,Sansar.Script.ScriptBase.OperationComplete)">
             <summary>Sets the range for this LightComponent.</summary>
            
             <sourceLocation>C:\p\Sansar\SharedBranches\ServerScript\Code\App\Libraries\SimulationScriptApi/CsLightComponent.h(97)</sourceLocation>
             <remarks>This asynchronous method queues the write then returns.
             To block until the write has occurred, pass this method to <see cref='M:Sansar.Script.ScriptBase.WaitFor' /> while in a coroutine.</remarks>
             <value>The return value is an internal event id.</value>
             <param name='range'>The range, 1 to 500.</param>
             <param name='handler'>Handler to be called when the event completes.</param>
        </member>
        <member name="M:Sansar.Simulation.LightComponent.SetShadowPriority(System.UInt32,Sansar.Script.ScriptBase.OperationComplete)">
             <summary>Sets the shadow priority of this LightComponent of type LightType.SpotLight.</summary>
            
             <sourceLocation>C:\p\Sansar\SharedBranches\ServerScript\Code\App\Libraries\SimulationScriptApi/CsLightComponent.h(101)</sourceLocation>
             <remarks>Set this to zero to turn off shadows. This method only affects spot lights. The renderer prioritizes shadows cast from higher priority lights first.
             This asynchronous method queues the write then returns.
             To block until the write has occurred, pass this method to <see cref='M:Sansar.Script.ScriptBase.WaitFor' /> while in a coroutine.</remarks>
             <value>The return value is an internal event id.</value>
             <param name='shadowPriority'>Shadow priority.</param>
             <param name='handler'>Handler to be called when the event completes.</param>
        </member>
        <member name="T:Sansar.Simulation.RenderMaterial">
            <summary>The RenderMaterial handles interactions with render materials.</summary><sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsRenderMaterial.h(49)</sourceLocation><remarks/>
        </member>
        <member name="P:Sansar.Simulation.RenderMaterial.Index">
            <summary>Gets the internal index for the material</summary><sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsRenderMaterial.h(58)</sourceLocation><remarks/>
        </member>
        <member name="P:Sansar.Simulation.RenderMaterial.Name">
            <summary>Gets the name of the material</summary><sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsRenderMaterial.h(60)</sourceLocation><remarks/>
        </member>
        <member name="P:Sansar.Simulation.RenderMaterial.ShaderType">
            <summary>Gets a string identifying the type of shader.</summary><sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsRenderMaterial.h(62)</sourceLocation><remarks/>
        </member>
        <member name="P:Sansar.Simulation.RenderMaterial.HasAbsorption">
            <summary>Whether or not this material allows changing absorption.</summary><sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsRenderMaterial.h(65)</sourceLocation><remarks/>
        </member>
        <member name="P:Sansar.Simulation.RenderMaterial.HasBrightness">
            <summary>Whether or not this material allows changing brightness.</summary><sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsRenderMaterial.h(67)</sourceLocation><remarks/>
        </member>
        <member name="P:Sansar.Simulation.RenderMaterial.HasEmissiveIntensity">
            <summary>Whether or not this material allows changing emissive intensity.</summary><sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsRenderMaterial.h(69)</sourceLocation><remarks/>
        </member>
        <member name="P:Sansar.Simulation.RenderMaterial.HasFlipbookFrame">
            <summary>Whether or not this material allows flipbook animation.</summary><sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsRenderMaterial.h(71)</sourceLocation><remarks/>
        </member>
        <member name="P:Sansar.Simulation.RenderMaterial.HasTint">
            <summary>Whether or not this material allows tinting.</summary><sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsRenderMaterial.h(73)</sourceLocation><remarks/>
        </member>
        <member name="M:Sansar.Simulation.RenderMaterial.GetProperties">
            <summary>Get the MaterialProperties</summary><sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsRenderMaterial.h(76)</sourceLocation><remarks/>
        </member>
        <member name="M:Sansar.Simulation.RenderMaterial.SetProperties(Sansar.Simulation.MaterialProperties,System.Action{Sansar.Script.OperationCompleteEvent})">
            <summary>Set new values for MaterialProperties</summary>
            
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsRenderMaterial.h(81)</sourceLocation><remarks/>
            <param name='properties'>properties</param>
            <param name='handler'>Handler to be called when the event completes.</param>
        </member>
        <member name="M:Sansar.Simulation.RenderMaterial.SetProperties(Sansar.Simulation.MaterialProperties)">
            <summary>Set new values for MaterialProperties</summary>
            
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsRenderMaterial.h(81)</sourceLocation><remarks/>
            <param name='properties'>properties</param>
        </member>
        <member name="M:Sansar.Simulation.RenderMaterial.SetProperties(Sansar.Simulation.MaterialProperties,System.Single,Sansar.Simulation.InterpolationMode,System.Action{Sansar.Script.OperationCompleteEvent})">
            <summary>Set new values for MaterialProperties interpolated over time</summary>
            
            
            
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsRenderMaterial.h(88)</sourceLocation><remarks/>
            <param name='properties'>properties</param>
            <param name='timeInSeconds'>timeInSeconds</param>
            <param name='interpolationMode'>timeInSeconds</param>
            <param name='handler'>Handler to be called when the event completes.</param>
        </member>
        <member name="M:Sansar.Simulation.RenderMaterial.SetProperties(Sansar.Simulation.MaterialProperties,System.Single,Sansar.Simulation.InterpolationMode)">
            <summary>Set new values for MaterialProperties interpolated over time</summary>
            
            
            
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsRenderMaterial.h(88)</sourceLocation><remarks/>
            <param name='properties'>properties</param>
            <param name='timeInSeconds'>timeInSeconds</param>
            <param name='interpolationMode'>timeInSeconds</param>
        </member>
        <member name="M:Sansar.Simulation.RenderMaterial.ToString">
            <summary> A string representation of this object. </summary> <returns>A string representation of this object.</returns> <remarks>The format of this string may change between releases.</remarks>
        </member>
        <member name="T:Sansar.Simulation.MaterialProperties">
            <summary></summary><sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsRenderMaterial.h(32)</sourceLocation><remarks/>
        </member>
        <member name="F:Sansar.Simulation.MaterialProperties.Tint">
            <summary></summary><sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsRenderMaterial.h(32)</sourceLocation><remarks/>
        </member>
        <member name="F:Sansar.Simulation.MaterialProperties.Absorption">
            <summary></summary><sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsRenderMaterial.h(32)</sourceLocation><remarks/>
        </member>
        <member name="F:Sansar.Simulation.MaterialProperties.Brightness">
            <summary></summary><sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsRenderMaterial.h(32)</sourceLocation><remarks/>
        </member>
        <member name="F:Sansar.Simulation.MaterialProperties.EmissiveIntensity">
            <summary></summary><sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsRenderMaterial.h(32)</sourceLocation><remarks/>
        </member>
        <member name="F:Sansar.Simulation.MaterialProperties.FlipbookFrame">
            <summary></summary><sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsRenderMaterial.h(32)</sourceLocation><remarks/>
        </member>
        <member name="T:Sansar.Simulation.MeshComponent">
            <summary>The MeshComponent handles interactions with static meshes.</summary><sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsMeshComponent.h(30)</sourceLocation><remarks/>
        </member>
        <member name="F:Sansar.Simulation.MeshComponent.ComponentType">
            <summary>The <see cref='F:Sansar.Simulation.MeshComponent.ComponentType' /> of this component</summary>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsMeshComponent.h(36)</sourceLocation>
            <remarks></remarks>
        </member>
        <member name="P:Sansar.Simulation.MeshComponent.ComponentId">
            <summary>Retrieves the component id for this MeshComponent.</summary>
            <returns>The id.</returns>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsMeshComponent.h(49)</sourceLocation><remarks/>
        </member>
        <member name="P:Sansar.Simulation.MeshComponent.Name">
            <summary>This MeshComponent name, as specified in the editor.</summary><sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsMeshComponent.h(57)</sourceLocation>
            <remarks></remarks>
            <value></value>
        </member>
        <member name="P:Sansar.Simulation.MeshComponent.IsScriptable">
            <summary>The scriptable flag for this MeshComponent.</summary>
            <returns>Whether or not this mesh can have properties changed by script.</returns>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsMeshComponent.h(62)</sourceLocation><remarks/>
        </member>
        <member name="M:Sansar.Simulation.MeshComponent.GetRenderMaterials">
            <summary>Gets the array of all RenderMaterials for this MeshComponent.</summary>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsMeshComponent.h(91)</sourceLocation><remarks/>
        </member>
        <member name="M:Sansar.Simulation.MeshComponent.GetRenderMaterial(System.String)">
            <summary>Gets a specific RenderMaterial or null if there is no RenderMaterial of that name.</summary>
            
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsMeshComponent.h(96)</sourceLocation><remarks/>
            <param name='renderMaterialName'>renderMaterialName</param>
        </member>
        <member name="M:Sansar.Simulation.MeshComponent.GetIsVisible">
            <summary>Retrieves the visibility state of this MeshComponent.</summary>
            <returns>The visibility state.</returns>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsMeshComponent.h(67)</sourceLocation><remarks/>
        </member>
        <member name="M:Sansar.Simulation.MeshComponent.SetIsVisible(System.Boolean,System.Action{Sansar.Script.OperationCompleteEvent})">
            <summary>Sets the visibility state of this MeshComponent.</summary>
            
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsMeshComponent.h(75)</sourceLocation>
            <remarks>This asynchronous method queues the write then returns.
            To block until the write has occurred, pass this method to <see cref='M:Sansar.Script.ScriptBase.WaitFor' /> while in a coroutine.</remarks>
            <value>The return value is an internal event id.</value>
            <param name='isVisible'>The visibility state to set.</param>
            <param name='handler'>Handler to be called when the event completes.</param>
        </member>
        <member name="M:Sansar.Simulation.MeshComponent.SetIsVisible(System.Boolean)">
            <summary>Sets the visibility state of this MeshComponent.</summary>
            
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsMeshComponent.h(75)</sourceLocation>
            <remarks>This asynchronous method queues the write then returns.
            To block until the write has occurred, pass this method to <see cref='M:Sansar.Script.ScriptBase.WaitFor' /> while in a coroutine.</remarks>
            <value>The return value is an internal event id.</value>
            <param name='isVisible'>The visibility state to set.</param>
        </member>
        <member name="M:Sansar.Simulation.MeshComponent.SetIsVisible(Sansar.Simulation.AgentPrivate,System.Boolean,System.Action{Sansar.Script.OperationCompleteEvent})">
            <summary>Sets the visibility state of this MeshComponent.</summary>
            <remarks>It will only change static mesh visibility for a single user and will not persist across client restarts, server restarts, or leaving the scene (even for changing avatars). </remarks>
            
            
            <param name='agent'>The agent to change static mesh visibility for.</param>
            <param name='isVisible'>The visibility state to set.</param>
            <param name='handler'>Handler to be called when the event completes.</param>
        </member>
        <member name="M:Sansar.Simulation.MeshComponent.SetIsVisible(Sansar.Simulation.AgentPrivate,System.Boolean)">
            <summary>Sets the visibility state of this MeshComponent.</summary>
            <remarks>It will only change static mesh visibility for a single user and will not persist across client restarts, server restarts, or leaving the scene (even for changing avatars). </remarks>
            
            
            <param name='agent'>The agent to change static mesh visibility for.</param>
            <param name='isVisible'>The visibility state to set.</param>
        </member>
        <member name="M:Sansar.Simulation.MeshComponent.SetIsVisible(Sansar.Script.SessionId,System.Boolean,System.Action{Sansar.Script.OperationCompleteEvent})">
            <summary>Sets the visibility state of this MeshComponent.</summary>
            <remarks>It will only change static mesh visibility for a single user and will not persist across client restarts, server restarts, or leaving the scene (even for changing avatars). </remarks>
            
            
            <param name='sessionId'>The sessionId of the user to change static mesh visibility for.</param>
            <param name='isVisible'>The visibility state to set.</param>
            <param name='handler'>Handler to be called when the event completes.</param>
        </member>
        <member name="M:Sansar.Simulation.MeshComponent.SetIsVisible(Sansar.Script.SessionId,System.Boolean)">
            <summary>Sets the visibility state of this MeshComponent.</summary>
            <remarks>It will only change static mesh visibility for a single user and will not persist across client restarts, server restarts, or leaving the scene (even for changing avatars). </remarks>
            
            
            <param name='sessionId'>The sessionId of the user to change static mesh visibility for.</param>
            <param name='isVisible'>The visibility state to set.</param>
        </member>
        <member name="M:Sansar.Simulation.MeshComponent.ToString">
            <summary> A string representation of this object. </summary> <returns>A string representation of this object.</returns> <remarks>The format of this string may change between releases.</remarks>
        </member>
        <member name="T:Sansar.Simulation.ModalDialog">
            <summary>
            Manages a modal dialog which can be presented to the user.
            </summary><sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsModalDialog.h(22)</sourceLocation>
            <remarks>Set the message and the button text.</remarks>
        </member>
        <member name="P:Sansar.Simulation.ModalDialog.Message">
            <summary>
            The message displayed on the dialog.
            </summary><sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsModalDialog.h(39)</sourceLocation>
            <remarks>This is set by the <see cref='M:Sansar.Simulation.ModalDialog.Show(System.String,System.String,System.String,Sansar.Script.ScriptBase.OperationComplete)'/> method upon creation.</remarks>
            <value>The string displayed on the dialog.</value>
        </member>
        <member name="P:Sansar.Simulation.ModalDialog.Response">
            <summary>
            The response from the last <see cref='M:Sansar.Simulation.ModalDialog.Show(System.String,System.String,System.String,Sansar.Script.ScriptBase.OperationComplete)'/> call.
            </summary><sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsModalDialog.h(49)</sourceLocation>
            <value>String response from the last show call.</value>
            <remarks>This value will be valid after the event occurs.</remarks>
        </member>
        <member name="M:Sansar.Simulation.ModalDialog.Show(System.String,System.String,System.String,System.Action{Sansar.Script.OperationCompleteEvent})">
            <summary>
            Shows a Modal Dialog on the screen.
            </summary>
            
            
            
            <returns>The internal event id for the completion event.</returns>
            <remarks>Call this with <see cref='M:Sansar.Script.ScriptBase.WaitFor``3(System.Action{``0,``1,``2,System.Action{Sansar.Script.OperationCompleteEvent}},``0,``1,``2)'/> in a coroutine to block until the event is generated.</remarks>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsModalDialog.h(30)</sourceLocation>
            <param name='message'>Text of the dialog.</param>
            <param name='leftButton'>Text of the left button.</param>
            <param name='rightButton'>Text of the right button.</param>
            <param name='handler'>Handler to be called when the event completes.</param>
        </member>
        <member name="M:Sansar.Simulation.ModalDialog.Show(System.String,System.String,System.String)">
            <summary>
            Shows a Modal Dialog on the screen.
            </summary>
            
            
            
            <returns>The internal event id for the completion event.</returns>
            <remarks>Call this with <see cref='M:Sansar.Script.ScriptBase.WaitFor``3(System.Action{``0,``1,``2,System.Action{Sansar.Script.OperationCompleteEvent}},``0,``1,``2)'/> in a coroutine to block until the event is generated.</remarks>
            <sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsModalDialog.h(30)</sourceLocation>
            <param name='message'>Text of the dialog.</param>
            <param name='leftButton'>Text of the left button.</param>
            <param name='rightButton'>Text of the right button.</param>
        </member>
        <member name="M:Sansar.Simulation.ModalDialog.Cancel">
            <summary>Cancels any existing dialog.</summary><sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsModalDialog.h(31)</sourceLocation>
            <remarks>Does not generate an event.</remarks>
        </member>
        <member name="M:Sansar.Simulation.ModalDialog.ToString">
            <summary> A string representation of this object. </summary> <returns>A string representation of this object.</returns> <remarks>The format of this string may change between releases.</remarks>
        </member>
        <member name="M:Sansar.Simulation.ModalDialog.Show(System.String,System.String,System.String,Sansar.Script.ScriptBase.OperationComplete)">
            <summary>
            Shows a Modal Dialog on the screen.
            </summary>
            <returns>The internal event id for the completion event.</returns>
            <remarks>Call this with <see cref='M:Sansar.Script.ScriptBase.WaitFor``3(System.Action{``0,``1,``2,System.Action{Sansar.Script.OperationCompleteEvent}},``0,``1,``2)'/> in a coroutine to block until the event is generated.</remarks>
            <sourceLocation>C:\p\Sansar\SharedBranches\ServerScript\Code\App\Libraries\SimulationScriptApi/CsModalDialog.h(30)</sourceLocation>
            <param name='message'>Text of the dialog.</param>
            <param name='leftButton'>Text of the left button.</param>
            <param name='rightButton'>Text of the right button.</param>
            <param name='handler'>Handler to be called when the event completes.</param>
        </member>
        <member name="T:Sansar.Simulation.Reactions">
            <summary>The Reactions class subscriptions to user reaction events.</summary>
            <remarks></remarks><sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsReactions.h(31)</sourceLocation>
        </member>
        <member name="M:Sansar.Simulation.Reactions.SubscribeToReaction(System.Action{Sansar.Simulation.ReactionData},System.Boolean)">
            <summary>Subscribes to Reaction Events.</summary><sourceLocation>DistributeEvent::writeSubscribe line 180</sourceLocation><remarks /><returns>An <see cref='T:Sansar.Script.IEventSubscription' /> that can be used to cancel the subscription.</returns><seealso cref='T:Sansar.Simulation.ReactionData'/><seealso cref='T:Sansar.Script.IEventSubscription'/>
            <param name='callback'>Callback which is executed when the event completes.</param>
            <param name='persistent'>Optional, set to false to unsubscribe after one event.</param>
        </member>
        <member name="M:Sansar.Simulation.Reactions.DisableDefaultReactions">
            <summary>Removes all the default reactions from the emote menu, leaving only custom ones.</summary>
        </member>
        <member name="M:Sansar.Simulation.Reactions.AddReaction(System.String,System.String,Sansar.Simulation.ThumbnailedClusterResource)">
            <summary>Add a new reaction type to all clients</summary>
            
            
            
            <param name='reactionType'>A string that gets passed to the callback.  Should be of a form like 'Developer.Type' to match the default, e.g. 'Sansar.Fire'</param>
            <param name='displayText'>A short string that appears on the emotes panel</param>
            <param name='resource'>A cluster source which has a thumbnail defined in inventory.</param>
        </member>
        <member name="M:Sansar.Simulation.Reactions.AddSystemReaction(System.String,System.String,System.String,Sansar.Simulation.ClusterResource)">
            <summary>Add a new system default reaction.  Intended for internal use by Sansar</summary>
            
            
            
            
            <param name='reactionType'>A string that gets passed to the callback.  Should be of a form like 'Developer.Type' to match the default, e.g. 'Sansar.Fire'</param>
            <param name='displayText'>A short string that appears on the emotes panel</param>
            <param name='thumbnailPath'>Must be a path to a file included by client.  RUNTIME:/UI/Social/Images/*.png</param>
            <param name='resource'>A cluster source that will be passed to the reaction callback.</param>
        </member>
        <member name="M:Sansar.Simulation.Reactions.RemoveReaction(System.String)">
            <summary>Remove the specified global reaction from all clients.</summary>
            
            <param name='reactionType'>A string that gets passed to the callback.  Should be of a form like 'Developer.Type' to match the default, e.g. 'Sansar.Fire'</param>
        </member>
        <member name="T:Sansar.Simulation.ReactionData">
            <summary>Subscribe to receive reaction events from users.</summary><sourceLocation>D:\work\e5de6f3b3a3d2e0b\Sansar\Code\App\Libraries\SimulationScriptApi/CsReactions.h(42)</sourceLocation><remarks/>
        </member>
        <member name="P:Sansar.Simulation.ReactionData.Type">
            <summary> The reaction event type</summary><value/><remarks/>
        </member>
        <member name="P:Sansar.Simulation.ReactionData.Position">
            <summary> The reaction position in world space</summary><value/><remarks/>
        </member>
        <member name="P:Sansar.Simulation.ReactionData.Orientation">
            <summary> The reaction orientation in world space</summary><value/><remarks/>
        </member>
        <member name="M:Sansar.Simulation.ReactionData.ToString">
            <summary> A string representation of this object. </summary> <returns>A string representation of this object.</returns> <remarks>The format of this string may change between releases.</remarks>
        </member>
        <member name="T:Sansar.Simulation.AgentScript">
            <summary>
            Extend AgentScript to create a script to be attached directly to an agent.
            For future use: Sansar does not currently support adding scripts to agents.
            </summary>
            <remarks>
            <para>Override <see cref="M:Sansar.Script.ScriptBase.Init()"/> for script initialization, primarily event subscriptions.</para>
            <para>Use <see cref="P:Sansar.Simulation.AgentScript.ObjectPrivate" /> to access the ObjectPrivate the object that represents the Agent.</para>
            <para>Use <see cref="P:Sansar.Simulation.AgentScript.ScenePublic" /> to access the a limited API for the Scene the agent is in.</para>
            <para>Use <see cref="P:Sansar.Simulation.AgentScript.AgentPrivate" /> to access the Agent the object is attached to.</para>
            </remarks>
        </member>
        <member name="M:Sansar.Simulation.AgentScript.#ctor">
            <summary>
            This constructor is called before any properties have been set. Override <see cref="M:Sansar.Script.ScriptBase.Init()"/> to initialize the script after properties have been set.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Sansar.Simulation.AgentScript.AgentPrivate">
            <summary>
            The Agent API for the agent this script is attached to.
            </summary>
            <value>The Agent this script is attached to if the script is on an avatar, null otherwise.</value>
            <remarks>The Agent will be set before <see cref="M:Sansar.Script.ScriptBase.Init"/>  is called.</remarks>
        </member>
        <member name="P:Sansar.Simulation.AgentScript.ObjectPrivate">
            <summary>
            The ObjectPrivate this script is attached to if it is attached to an object.
            </summary>
            <remarks> For AgentScripts this is the Agent's ObjectPrivate of their avatar.</remarks>
            <value>The scene object this script is attached to if it is attached to an object, null otherwise.</value>
        </member>
        <member name="P:Sansar.Simulation.AgentScript.ScenePublic">
            <summary>
            Basic scene information for the current scene.
            </summary>
            <remarks>This value will be set before Init is called.</remarks>
            <value>The Scene this object is in.</value>
        </member>
        <member name="T:Sansar.Simulation.SceneObjectScript">
            <summary>
            Extend SceneObjectScript to create a script that can be used on content that is natively in the scene.
            This is the primary script type in Sansar.
            </summary>
            <remarks>
            <para>Override <see cref="M:Sansar.Script.ScriptBase.Init()"/> for script initialization, primarily event subscriptions.</para>
            <para>Use <see cref="P:Sansar.Simulation.SceneObjectScript.ObjectPrivate" /> to access the Object the script is on.</para>
            <para>Use <see cref="P:Sansar.Simulation.SceneObjectScript.ScenePrivate" /> to access the Scene the object is in.</para>
            <code lang="C#" src="examples/SceneObjectScriptExample.cs"/>
            </remarks>
        </member>
        <member name="M:Sansar.Simulation.SceneObjectScript.#ctor">
            <summary>
            This constructor is called before any properties have been set. Override <see cref="M:Sansar.Script.ScriptBase.Init()"/> to initialize the script after properties have been set.
            </summary> <remarks/>
        </member>
        <member name="P:Sansar.Simulation.SceneObjectScript.ObjectPrivate">
            <summary>
            The ObjectPrivate this script is attached to if it is attached to an object.
            </summary>
            <remarks> For AgentScripts this is the Agent's ObjectPrivate of their avatar.</remarks>
            <value>The scene object this script is attached to if it is attached to an object, null otherwise.</value>
        </member>
        <member name="P:Sansar.Simulation.SceneObjectScript.ScenePrivate">
            <summary>
            The Scene API for the Scene this script is a part of if the script is attached to scene content.
            </summary>
            <remarks>This value will be set before Init is called.</remarks>
            <value>The Scene API for this scene if this script was attached to scene content, null otherwise.</value>
        </member>
        <member name="P:Sansar.Simulation.SceneObjectScript.AllowedContexts">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="T:Sansar.Simulation.ObjectScript">
            <summary>
            Extend SceneObjectScript to create a script that can be used on content that is rezzable in a scene.
            </summary>
            <remarks>ObjectScript scripts on objects will be run when rezzed by other scripts via <see cref="M:Sansar.Simulation.ScenePrivate.CreateCluster(Sansar.Simulation.ClusterResource,Sansar.Vector,Sansar.Quaternion,Sansar.Vector,Sansar.Simulation.ScenePrivate.CreateClusterHandler)"/>
            <para>Override <see cref="M:Sansar.Script.ScriptBase.Init()"/> for script initialization, primarily event subscriptions.</para>
            <para>Use <see cref="P:Sansar.Simulation.ObjectScript.ObjectPrivate" /> to access the Object the script is on.</para>
            <para>Use <see cref="P:Sansar.Simulation.ObjectScript.ScenePublic" /> to access the Scene the object is in.</para>
            <code lang="C#" src="examples/ObjectScriptExample.cs"/>
            </remarks>
        </member>
        <member name="M:Sansar.Simulation.ObjectScript.#ctor">
            <summary>
            This constructor is called before any properties have been set. Override <see cref="M:Sansar.Script.ScriptBase.Init()"/> to initialize the script after properties have been set.
            </summary>
        </member>
        <member name="P:Sansar.Simulation.ObjectScript.ObjectPrivate">
            <summary>
            The ObjectPrivate this script is attached to if it is attached to an object.
            </summary>
            <remarks> For AgentScripts this is the Agent's ObjectPrivate of their avatar.</remarks>
            <value>The scene object this script is attached to if it is attached to an object, null otherwise.</value>
        </member>
        <member name="P:Sansar.Simulation.ObjectScript.ScenePublic">
            <summary>
            Public scene information for the current scene.
            </summary>
            <remarks>This value will be set before Init is called.</remarks>
            <value>The Scene this object is in.</value>
        </member>
        <member name="P:Sansar.Simulation.ObjectScript.AllowedContexts">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="T:Sansar.Simulation.SimpleScript">
            <summary>
            Extend SimpleScript to create a script that can be used on content that is natively in the scene.
            This is the primary script type in Sansar.
            </summary>
            <remarks>
            <para>Use <see cref="P:Sansar.Simulation.SimpleScript.ObjectPrivate" /> to access the Object the script is on.</para>
            <para>Use <see cref="P:Sansar.Simulation.SimpleScript.ScenePrivate" /> to access the Scene the object is in.</para>
            <para>Override <see cref="M:Sansar.Simulation.SimpleScript.OnAddUser(Sansar.Simulation.AgentPrivate)" /> to handle AddUser events.<example><code lang="C#">
            protected override OnAddUser(AgentPrivate agent)
            {
                agent.SendChat($"Welcome to the {ScenePrivate.SceneInfo.ExperienceName} scene!");
            }</code></example></para>
            <para>Override <see cref="M:Sansar.Simulation.SimpleScript.OnRemoveUser(Sansar.Simulation.AgentInfo)" /> to handle AddUser events.<example><code lang="C#">
            protected override OnRemoveUser(AgentInfo agent)
            {
                Log.Write($"{agent.Name} has left the region.");
            }</code></example></para>
            <para>Override <see cref="M:Sansar.Simulation.SimpleScript.OnTimer" /> to do something at regular intervals.<example><code lang="C#">
            protected override OnTimer()
            {
                RigidBodyComponent?.SetPosition(ObjectPrivate?.InitialPosition);
            }</code></example></para>
            <para>Override <see cref="M:Sansar.Simulation.SimpleScript.OnChat(Sansar.Simulation.ChatData)" /> to handle Chat events when users or scripts chat.<example><code lang="C#">
            protected override OnChat(ChatData data)
            {
                AgentPrivate agent = ScenePrivate.FindAgent(data.SourceId);
                <![CDATA[if (agent != null && agent.AgentInfo.AvatarUuid == ScenePrivate.SceneInfo.AvatarUuid))]]>
                {
                   Log.Write($"Scene owner {agent.AgentInfo.Name} said {data.Message}");
                }
            }</code></example></para>
            <para>Override <see cref="M:Sansar.Simulation.SimpleScript.OnCollision(Sansar.Simulation.CollisionData)" /> to handle Collision events with the object this script is on.<example><code lang="C#">
            protected override OnCollision(CollisionData data)
            {
                Log.Write($"Bumped {data.HitObject.ObjectId}");
            }</code></example></para>
            <para>Override <see cref="M:Sansar.Simulation.SimpleScript.OnScriptEvent(Sansar.Script.ScriptId,System.Object)" /> to handle ScriptEvent events from other scripts.<example><code lang="C#">
            protected override OnScriptEvent(AgentPrivate agent)
            {
                <![CDATA[ISimpleScriptEvent simple = data.Data.As<ISimpleScriptEvent>();]]>
                Log.Write($"Received message {data.Message} event with data {simple.Value}");
            }</code></example></para>
            <para>Override <see cref="M:Sansar.Script.SimpleScript.SimpleInit()"/> for more advanced script initialization.</para>
            <code lang="C#" src="examples/SimpleScriptExample.cs"/>
            </remarks>
        </member>
        <member name="M:Sansar.Simulation.SimpleScript.#ctor">
            <summary>
            This constructor is called before any properties have been set. Override <see cref="M:Sansar.Script.SimpleScript.SimpleInit()"/> to initialize the script after properties have been set and events setup.
            </summary><remarks/>
        </member>
        <member name="M:Sansar.Simulation.SimpleScript.Init">
            <summary>
            Init() initializes all event subscriptions for the overridable methods in SimpleScript
            </summary>
            <remarks /><seealso cref="M:Sansar.Simulation.SimpleScript.SimpleInit" />
        </member>
        <member name="P:Sansar.Simulation.SimpleScript.RigidBodyComponent">
            <summary>
            The first RigidBodyComponent on ObjectPrivate
            </summary>
            <remarks>This is a convenience for: <code lang="C#">
            RigidBodyComponent rigidbody;
             <![CDATA[if (ObjectPrivate != null && ObjectPrivate.TryGetFirstComponent(out rigidbody))]]>
            {
                // Do something with rigidbody
            }
            </code></remarks>
            <value>The first <see cref="P:Sansar.Simulation.SimpleScript.RigidBodyComponent"/> on the object this script is attached to.</value>
        </member>
        <member name="M:Sansar.Simulation.SimpleScript.SimpleInit">
            <summary>
            Override SimpleInit for script setup, such as subscribing to other events or 
            </summary>
            <remarks>SimpleInit is run after events have been set up for overridden methods. Use it to set up more complex subscriptions or otherwise initialize the script.</remarks>
        </member>
        <member name="T:Sansar.Simulation.SimpleScript.SimpleScriptOptionsAttribute">
            <summary>
            Internal Use Only
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Sansar.Simulation.SimpleScript.SimpleScriptOptionsAttribute.#ctor">
            <summary>Default Constructor</summary><remarks></remarks>
        </member>
        <member name="T:Sansar.Simulation.SimpleScript.OnCollisionOptionsAttribute">
            <summary>
            Set options for OnCollision events, or use to create more simple collision handlers.
            </summary><example><code lang="C#">
            // Only receive events for collisions with users
            [OnCollisionOptions(EventType=CollisionEventType.CharacterContact]
            protected override OnCollision(CollisionData data)
            </code></example>
            <remarks><para>This attribute is optional when overriding OnCollision which by default will respond to <see cref="F:Sansar.Simulation.CollisionEventType.AllCollisions"/>.</para>
            Add this attribute to any method that matches <![CDATA[Action<CollisionData>]]> to create extra collision event subscriptions.
            <code lang="C#">[OnCollisionOptions(EventType=CollisionEventType.CharacterContact)]
            void CharacterCollisionsOnly(CollisionData data)
            {
               // character collisions.
            }
              
            void OnCollision(CollisionData data)
            {
               // all collisions (including character) 
            }</code></remarks>
            <seealso cref="M:Sansar.Simulation.SimpleScript.OnCollision(Sansar.Simulation.CollisionData)"/>
        </member>
        <member name="M:Sansar.Simulation.SimpleScript.OnCollisionOptionsAttribute.#ctor">
            <summary>Set options for OnCollision events.</summary>
            <remarks></remarks>
        </member>
        <member name="P:Sansar.Simulation.SimpleScript.OnCollisionOptionsAttribute.EventType">
            <summary>
            Set the event type for the types of collisions to get events for.
            </summary>
            <remarks /><example><code lang="C#">
            // Only receive events for collisions with users
            [OnCollisionOptions(EventType=CollisionEventType.CharacterContact]
            protected override OnCollision(CollisionData data)
            </code></example>
            <value>The type of collision events to subscribe to.</value>
        </member>
        <member name="M:Sansar.Simulation.SimpleScript.OnCollision(Sansar.Simulation.CollisionData)">
            <summary>
            Receive events whenever the object this script is on collides with something or someone.
            </summary>
            <remarks>By default receives events for every collision. Use <see cref="T:Sansar.Simulation.SimpleScript.OnCollisionOptionsAttribute"/> to change which types of collision events will trigger OnCollision.</remarks>
            <param name="data">The CollisionData about the collision.</param>
            <seealso cref="T:Sansar.Simulation.SimpleScript.OnCollisionOptionsAttribute"/>
        </member>
        <member name="T:Sansar.Simulation.SimpleScript.OnChatOptionsAttribute">
            <summary>
            Set options for OnChat() overrides, or use to create more simple chat handlers.
            </summary>
            <example><code lang="C#">
            // Only listen for chat on Channel 10 from scripts.
            [OnChatOptions(Channel=10, Source="script")]
            protected override OnChat(ChatData data)
            </code></example>
            <remarks><para>This attribute is optional when overriding OnChat which by default will respond to all chat on the default channel (Chat.DefaultChannel) and all sources.</para>
            Add this attribute to any method that matches <![CDATA[Action<ChatData>]]> to create extra chat event subscriptions.
            <code lang="C#">
            [OnChatOptions(Channel=5)]
            void ChatFrom5(ChatData data)
            {
               // chat from channel 5.
            }
              
            void OnChat(ChatData data)
            {
               // chat from the default channel (0)
            }</code></remarks>
            <seealso cref="M:Sansar.Simulation.SimpleScript.OnChat(Sansar.Simulation.ChatData)"/>
        </member>
        <member name="M:Sansar.Simulation.SimpleScript.OnChatOptionsAttribute.#ctor">
            <summary>Set options for OnChat events</summary>
            <remarks></remarks>
        </member>
        <member name="P:Sansar.Simulation.SimpleScript.OnChatOptionsAttribute.Channel">
            <summary>
            Specify a specific channel to listen for messages on.
            </summary>
            <example><code lang="C#">
            // Only listen for chat on Channel 10.
            [OnChatOptions(Channel=10)]
            protected override OnChat(ChatData data)
            </code></example>
            <value>The channel to listen for chat on.</value>
            <remarks>By default listens for chat on Chat.DefaultChannel (0).</remarks>
        </member>
        <member name="P:Sansar.Simulation.SimpleScript.OnChatOptionsAttribute.Source">
            <summary>
            string source of the chat: system, user or script.
            </summary>
            <value>The source chat to listen for: "script", "user" or "system"</value>
            <remarks>Restricts which chat messages will trigger OnChat. [OnChatOptions(Source="user")] will only run OnChat for chat from users, while "script" will respond to other script messages, and "system" will only respond to system messages.</remarks>
        </member>
        <member name="M:Sansar.Simulation.SimpleScript.OnChat(Sansar.Simulation.ChatData)">
            <summary>
            Code in OnChat will run whenever chat is heard. 
            </summary>
            <param name="data">ChatData for the message.</param>
            <remarks>Defaults to all chat on the default channel. Use [OnChatOptions] to change the channel or limit the source of the chat.</remarks>
            <seealso cref="T:Sansar.Simulation.SimpleScript.OnChatOptionsAttribute"/>
        </member>
        <member name="T:Sansar.Simulation.SimpleScript.OnAddUserOptionsAttribute">
            <summary>
            Use to create additional OnAddUser subscriptions
            </summary>
            <remarks>This is provided for consistency only. There are no options that can be set and multiple subscriptions would receive all the same events.</remarks>
            <seealso cref="M:Sansar.Simulation.SimpleScript.OnAddUser(Sansar.Simulation.AgentPrivate)"/>
        </member>
        <member name="M:Sansar.Simulation.SimpleScript.OnAddUserOptionsAttribute.#ctor">
            <summary>Default Constructor</summary><remarks></remarks>
        </member>
        <member name="M:Sansar.Simulation.SimpleScript.OnAddUser(Sansar.Simulation.AgentPrivate)">
            <summary>
            Code in OnAddUser will run whenever a user enters the scene.
            </summary>
            <param name="agent">The AgentPrivate for the user that has joined the scene.</param>
            <remarks>Override OnAddUser to handle events when a user enters the scene.</remarks>
            <seealso cref="M:Sansar.Simulation.SimpleScript.OnRemoveUser(Sansar.Simulation.AgentInfo)"/>
            <example><code lang="C#">
            protected override OnAddUser(AgentPrivate agent)
            {
               agent.SendChat($"Welcome to the {ScenePrivate.SceneInfo.ExperienceName} scene!");
            }
            </code></example>
        </member>
        <member name="T:Sansar.Simulation.SimpleScript.OnRemoveUserOptionsAttribute">
            <summary>
            Use to create additional OnRemoveUser subscriptions
            </summary>
            <remarks>This is provided for consistency only. There are no options that can be set and multiple subscriptions would receive all the same events.</remarks>
            <seealso cref="M:Sansar.Simulation.SimpleScript.OnRemoveUser(Sansar.Simulation.AgentInfo)"/>
        </member>
        <member name="M:Sansar.Simulation.SimpleScript.OnRemoveUserOptionsAttribute.#ctor">
            <summary>Default Constructor</summary>
        </member>
        <member name="M:Sansar.Simulation.SimpleScript.OnRemoveUser(Sansar.Simulation.AgentInfo)">
            <summary>
            Code in OnRemoveUser will run whenever a user leaves the scene.
            </summary>
            <param name="data">UserData for the user that has left the scene.</param>
            <remarks>Override OnAddUser to handle events when a user enters the scene.</remarks>
            <example><code lang="C#">// This event occurs when a user leaves the scene
            protected override void OnRemoveUser(AgentInfo info)
            {
                Log.Write($"{info.Name} has left the region.");
            }</code></example>
            <seealso cref="M:Sansar.Simulation.SimpleScript.OnAddUser(Sansar.Simulation.AgentPrivate)"/>
        </member>
        <member name="T:Sansar.Simulation.SimpleScript.OnTimerOptionsAttribute">
            <summary>
            Set options for OnTimer() overrides, or use to create more simple timers.
            </summary>
            <example><code lang="C#">
            // Run this timer every 5 seconds
            [OnTimerOptions(Rate=5)]
            protected override OnTimer()
            </code></example>
            <remarks><para>This attribute is optional when overriding OnTimer which by default will run once per second.</para>
            Add this attribute to any method that matches <![CDATA[Action<>]]> to create extra timers.
            <code lang="C#">[OnTimerOptions(Rate=5)]
            void TimerEvery5()
            {
               // run every 5 seconds
            }
              
            void OnTimer()
            {
               // run every 1 second
            }</code></remarks>
            <seealso cref="M:Sansar.Simulation.SimpleScript.OnTimer"/>
        </member>
        <member name="M:Sansar.Simulation.SimpleScript.OnTimerOptionsAttribute.#ctor">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="P:Sansar.Simulation.SimpleScript.OnTimerOptionsAttribute.Rate">
            <summary>
            Set the rate in seconds between events.
            </summary>
            <example><code lang="C#">
            // Set OnTimer to happen every 0.2 seconds.
            [OnTimerOptions(Rate=0.2)]
            protected override void OnTimer(Int64 frame)
            </code></example>
            <remarks>A Rate of 1 would call OnTimer once every second, 0.1 would call OnTimer 10 times every second, and 10 would call OnTimer once every 10 seconds.
            <br/>Minimum value for Rate is 0.025, which is 40 times per second.</remarks>
            <value>The value in seconds between OnTimer events.</value>
        </member>
        <member name="F:Sansar.Simulation.SimpleScript.OnTimerOptionsAttribute.MinimumRate">
            <summary>
            Minimum value for Rate is 0.025, which is 40 times per second.
            </summary><remarks/>
        </member>
        <member name="M:Sansar.Simulation.SimpleScript.OnTimer">
            <summary>
            Code in OnTimer will run at regular intervals.
            </summary>
            <example><code lang="C#">
            // Set OnTimer to happen once every minute.
            [OnTimerOptions(Rate=60)]
            protected override void OnTimer()
            </code></example>
            <remarks>Defaults to one call per second. Change the rate with <see cref="T:Sansar.Simulation.SimpleScript.OnTimerOptionsAttribute"/></remarks>
        </member>
        <member name="P:Sansar.Simulation.SimpleScript.ISimpleScriptEventData.Data">
            <summary/>
        </member>
        <member name="T:Sansar.Simulation.SimpleScript.OnScriptEventOptionsAttribute">
            <summary>
            Set options for OnScriptEvent events.
            </summary>
            <remarks>If EventName is not set then OnScriptEvent will receive events with the name of the script class.</remarks>
            <example><code lang="C#">
            // Send events to this handler from other simple scripts with: PostScriptEvent("AddPosition", myVector);
            [OnScriptEventOptions(EventName="AddPosition")]
            protected override void OnScriptEvent(object eventData)
            {
                Vector newPos = eventData as Vector;
                if (newPos != null) AllPositions.Add(newPos);
            }
            </code></example>
            <seealso cref="M:Sansar.Simulation.SimpleScript.OnScriptEvent(Sansar.Script.ScriptId,System.Object)"/>
        </member>
        <member name="M:Sansar.Simulation.SimpleScript.OnScriptEventOptionsAttribute.#ctor">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="P:Sansar.Simulation.SimpleScript.OnScriptEventOptionsAttribute.Message">
            <summary>
            Set the name of the script event to listen for.
            </summary>
            <example><code lang="C#">
            // Listen for script events "MyEvent"
            [OnScriptEventOptions(Message="MyEvent")]
            protected override void OnScriptEvent(ScriptEventData data)
            </code></example>
            <remarks>If Message is not set then OnScriptEvent will receive events with the name of the script class. In the following example it will receive events named "MySimpleScript"
            <example><code lang="C#">
            // Listen for script events named "MyEvent"
            public class MySimpleScript : SimpleScript
            {
                protected override void OnScriptEvent(ScriptEventData data)
                {
                    // Will get script events named "MySimpleScript"
                }
            }
            </code></example>
            </remarks>
            <seealso cref="M:Sansar.Simulation.SimpleScript.OnScriptEvent(Sansar.Script.ScriptId,System.Object)"/>
            <value>The name of the script event message to subscribe to.</value>
        </member>
        <member name="M:Sansar.Simulation.SimpleScript.OnScriptEvent(Sansar.Script.ScriptId,System.Object)">
            <summary>
            Receive events from other scripts.
            </summary>
            <remarks>If EventName is not set then OnScriptEvent will receive events with the name of the script class. In the following example it will receive events named "MySimpleScript"
            <code lang="C#">
            public class SimpleExample : SimpleScript
            {
                // Send events to this handler from other simple scripts with: PostScriptEvent("SimpleExample", myVector);
                protected override void OnScriptEvent(object eventData)
                {
                    Vector newPos = eventData as Vector;
                    if (newPos != null) AllPositions.Add(newPos);
                }
            }    
            </code>
            <para>To send events to a SimpleScript from a non-simple script, the non-simple script must build a Reflective class that contains a single public object field named Data like this:
            <code lang="C#">
            class SimpleData : Reflective
            {
                public object Data;
            }
            </code>
            Then send the data like this:
            <code lang="C#">PostScriptEvent("simpleeventname",new SimpleData {Data = position});</code> 
            </para></remarks>
            <example><code lang="C#">
            // Send events to this handler from other simple scripts with: PostScriptEvent("AddPosition", myVector);
            [OnScriptEventOptions(EventName="AddPosition")]
            protected override void OnScriptEvent(object eventData)
            {
                Vector newPos = eventData as Vector;
                if (newPos != null) AllPositions.Add(newPos);
            }
            </code></example>
            <seealso cref="T:Sansar.Simulation.SimpleScript.OnScriptEventOptionsAttribute"/>
            <param name="data">The data sent by another script, as an object.</param>
            <param name="sourceScriptId">The <see cref="T:Sansar.Script.ScriptId"/> of the script that sent the message</param>
        </member>
        <member name="P:Sansar.Simulation.SimpleScript.ObjectPrivate">
            <summary>
            The ObjectPrivate this script is attached to if it is attached to an object.
            </summary>
            <remarks> For AgentScripts this is the Agent's ObjectPrivate of their avatar.</remarks>
            <value>The scene object this script is attached to if it is attached to an object, null otherwise.</value>
        </member>
        <member name="P:Sansar.Simulation.SimpleScript.ScenePrivate">
            <summary>
            The Scene API for the Scene this script is a part of if the script is attached to scene content.
            </summary>
            <remarks>This value will be set before Init is called.</remarks>
            <value>The Scene API for this scene if this script was attached to scene content, null otherwise.</value>
        </member>
        <member name="M:Sansar.Simulation.SimpleScript.GetSubscription(System.String)">
            <summary>
            Get the IEventSubscription for any of the registered event subscription methods
            </summary>
            <param name="methodName">The n</param>
            <returns>An IEventSubscription interface that can be used to unsubscribe from a registered event.</returns>
            <example><code lang="C#">
            GetSubscription("OnChat").Unsubscribe();
            </code></example>
        </member>
    </members>
</doc>
